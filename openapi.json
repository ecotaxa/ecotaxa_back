{
  "openapi":"3.0.2",
  "info":{
    "title":"EcoTaxa",
    "version":"0.0.3"
  },
  "paths":{
    "/login":{
      "post":{
        "tags":[
          "authentification"
        ],
        "summary":"Login",
        "description":"Just for description. The _real_ login is done in legacy code via flask.",
        "operationId":"login_login_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Username",
              "type":"string"
            },
            "name":"username",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Password",
              "type":"string"
            },
            "name":"password",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Users",
        "description":"Return the list of users.",
        "operationId":"get_users_users_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Users Users Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/UserModel"
                  }
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/users/me":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Show Current User",
        "description":"Return currently authenticated user.",
        "operationId":"show_current_user_users_me_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/UserModel"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/users/my_preferences/{project_id}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Current User Prefs",
        "description":"Return one preference, for project and currently authenticated user.",
        "operationId":"get_current_user_prefs_users_my_preferences__project_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Key",
              "type":"string"
            },
            "name":"key",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Current User Prefs Users My Preferences  Project Id  Get",
                  "type":"string"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      },
      "put":{
        "tags":[
          "users"
        ],
        "summary":"Set Current User Prefs",
        "description":"Set one preference, for project and currently authenticated user.\n\n-`key`: The preference key",
        "operationId":"set_current_user_prefs_users_my_preferences__project_id__put",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Key",
              "type":"string"
            },
            "name":"key",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Value",
              "type":"string"
            },
            "name":"value",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/users/search":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Search User",
        "description":"Search users using various criteria, search is case insensitive and might contain % chars.",
        "operationId":"search_user_users_search_get",
        "parameters":[
          {
            "required":false,
            "schema":{
              "title":"By Name",
              "type":"string"
            },
            "name":"by_name",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search User Users Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/UserModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/users/{user_id}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get User",
        "description":"Return a single user by its id.",
        "operationId":"get_user_users__user_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"User Id",
              "type":"integer"
            },
            "name":"user_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/UserModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/search":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Search Projects",
        "description":"Return projects summary for current user.\n- @param also_others: Allows to return projects for which given user has no right\n- @param for_managing: Allows to return project that can be written to (including erased) by the given user\n- @param title_filter: Use this pattern for matching returned projects names\n- @param instrument_filter: Only return projects where this instrument was used\n- @param filter_subset: Only return projects having 'subset' in their names",
        "operationId":"search_projects_projects_search_get",
        "parameters":[
          {
            "required":false,
            "schema":{
              "title":"Also Others",
              "type":"boolean",
              "default":false
            },
            "name":"also_others",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"For Managing",
              "type":"boolean",
              "default":false
            },
            "name":"for_managing",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Title Filter",
              "type":"string",
              "default":""
            },
            "name":"title_filter",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Instrument Filter",
              "type":"string",
              "default":""
            },
            "name":"instrument_filter",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Filter Subset",
              "type":"boolean",
              "default":false
            },
            "name":"filter_subset",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Projects Projects Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectSearchResult"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/create":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Create Project",
        "description":"Create an empty project with only a title, and return its number.\nThe project will be managed by current user.\nThe user has to be app administrator or project creator.",
        "operationId":"create_project_projects_create_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CreateProjectReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Create Project Projects Create Post",
                  "type":"integer"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/subset":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Subset",
        "description":"Subset a project into another one.",
        "operationId":"project_subset_projects__project_id__subset_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/SubsetReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SubsetRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/query":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Query",
        "description":"See if project exists for current user, eventually for managing it.",
        "operationId":"project_query_projects__project_id__query_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":false,
            "schema":{
              "title":"For Managing",
              "type":"boolean",
              "default":false
            },
            "name":"for_managing",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProjectModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/merge":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Merge",
        "description":"Merge another project into this one. It's more a phagocytosis than a merge, as the source will see\nall its objects gone and will be erased.\n- param `dry_run`: If set, then only a diagnostic of doability will be done.",
        "operationId":"project_merge_projects__project_id__merge_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Source Project Id",
              "type":"integer"
            },
            "name":"source_project_id",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Dry Run",
              "type":"boolean"
            },
            "name":"dry_run",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/MergeRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/check":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Check",
        "description":"Check consistency of a project.",
        "operationId":"project_check_projects__project_id__check_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/recompute_geo":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Recompute Geography",
        "description":"Recompute geography information for all samples in project.",
        "operationId":"project_recompute_geography_projects__project_id__recompute_geo_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/import_prep/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Import Preparation",
        "description":"Prepare/validate the import of an EcoTaxa archive or directory.",
        "operationId":"import_preparation_import_prep__project_id__post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ImportPrepReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ImportPrepRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/import_real/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Real Import",
        "description":"Import an EcoTaxa archive or directory.",
        "operationId":"real_import_import_real__project_id__post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ImportRealReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ImportRealRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/simple_import/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Simple Import",
        "description":"Import images only, with same metadata for all.",
        "operationId":"simple_import_simple_import__project_id__post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/SimpleImportReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SimpleImportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}":{
      "delete":{
        "tags":[
          "projects"
        ],
        "summary":"Erase Project",
        "description":"Delete the project.\n    Optionally, if \"only_objects\" is set, the project structure is kept,\n        but emptied from any object/sample/acquisition/process\n    Otherwise, no trace of the project will remain in the database.",
        "operationId":"erase_project_projects__project_id__delete",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":false,
            "schema":{
              "title":"Only Objects",
              "type":"boolean",
              "default":false
            },
            "name":"only_objects",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/query":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Get Object Set",
        "description":"Return object ids for the given project with the filters.",
        "operationId":"get_object_set_object_set__project_id__query_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetQueryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/reset_to_predicted":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Reset Object Set To Predicted",
        "description":"Reset to Predicted all objects for the given project with the filters.",
        "operationId":"reset_object_set_to_predicted_object_set__project_id__reset_to_predicted_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/revert_to_history":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Revert Object Set To History",
        "description":"Revert all objects for the given project, with the filters, to the target.\n- param `dry_run`: If set, then no real write but consequences of the revert will be replied.\n- param `target`: Use null/None for reverting using the last annotation from anyone, or a user id\n    for the last annotation from this user.",
        "operationId":"revert_object_set_to_history_object_set__project_id__revert_to_history_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Dry Run",
              "type":"boolean"
            },
            "name":"dry_run",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Target",
              "type":"integer"
            },
            "name":"target",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetRevertToHistoryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/":{
      "delete":{
        "tags":[
          "objects"
        ],
        "summary":"Erase Object Set",
        "description":"Delete the objects with given object ids.\nCurrent user needs Manage right on all projects of specified objects.",
        "operationId":"erase_object_set_object_set__delete",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Object Ids",
                "type":"array",
                "items":{
                  "type":"integer"
                }
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/update":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Update Object Set",
        "description":"Update all the objects with given IDs and values\nCurrent user needs Manage right on all projects of specified objects.",
        "operationId":"update_object_set_object_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/sample_set/update":{
      "post":{
        "tags":[
          "samples"
        ],
        "summary":"Update Samples",
        "description":"Do the required update for each sample in the set. Any non-null field in the model is written to\nevery impacted sample.\n    Return the number of updated entities.",
        "operationId":"update_samples_sample_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/acquisition_set/update":{
      "post":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Update Acquisitions",
        "description":"Do the required update for each acquisition in the set.\n    Return the number of updated entities.",
        "operationId":"update_acquisitions_acquisition_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/process_set/update":{
      "post":{
        "tags":[
          "processes"
        ],
        "summary":"Update Processes",
        "description":"Do the required update for each process in the set.\n    Return the number of updated entities.",
        "operationId":"update_processes_process_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Processes Process Set Update Post",
                  "type":"integer"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/status":{
      "get":{
        "tags":[
          "WIP"
        ],
        "summary":"System Status",
        "description":"Report the status, mainly used for verifying that the server is up.",
        "operationId":"system_status_status_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/error":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"System Error",
        "description":"This entry point will return a 500 internal error, on purpose so the stack trace is visible and client\ncan see what it gives.",
        "operationId":"system_error_error_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/noop":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"Do Nothing",
        "description":"This entry point will just do nothing.\n    It's also used for exporting models we could need on client side.",
        "operationId":"do_nothing_noop_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectHeaderModel"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    }
  },
  "components":{
    "schemas":{
      "BulkUpdateReq":{
        "title":"BulkUpdateReq",
        "required":[
          "target_ids",
          "updates"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"The IDs of the target entities",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "updates":{
            "title":"The updates, to do on all impacted entities",
            "type":"array",
            "items":{}
          }
        }
      },
      "CreateProjectReq":{
        "title":"CreateProjectReq",
        "required":[
          "title"
        ],
        "type":"object",
        "properties":{
          "clone_of_id":{
            "title":"If set, clone specified Project",
            "type":"integer"
          },
          "title":{
            "title":"The project title",
            "type":"string"
          },
          "visible":{
            "title":"The project is created visible",
            "type":"boolean",
            "default":true
          }
        }
      },
      "HTTPValidationError":{
        "title":"HTTPValidationError",
        "type":"object",
        "properties":{
          "detail":{
            "title":"Detail",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HistoricalClassif":{
        "title":"HistoricalClassif",
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "histo_classif_date":{
            "title":"Histo Classif Date",
            "type":"string",
            "format":"date-time"
          },
          "histo_classif_type":{
            "title":"Histo Classif Type",
            "type":"string"
          },
          "histo_classif_id":{
            "title":"Histo Classif Id",
            "type":"integer"
          },
          "histo_classif_qual":{
            "title":"Histo Classif Qual",
            "type":"string"
          },
          "histo_classif_who":{
            "title":"Histo Classif Who",
            "type":"integer"
          }
        }
      },
      "ImportPrepReq":{
        "title":"ImportPrepReq",
        "required":[
          "task_id",
          "source_path"
        ],
        "type":"object",
        "properties":{
          "task_id":{
            "title":"The existing task to use",
            "type":"integer"
          },
          "source_path":{
            "title":"Source path on server, to zip or plain directory",
            "type":"string"
          },
          "taxo_mappings":{
            "title":"Optional taxonomy mapping",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "skip_loaded_files":{
            "title":"Skip Loaded Files",
            "type":"boolean",
            "default":false
          },
          "skip_existing_objects":{
            "title":"Skip Existing Objects",
            "type":"boolean",
            "default":false
          },
          "update_mode":{
            "title":"Update data ('Yes'), including classification ('Cla')",
            "type":"string",
            "default":""
          }
        },
        "description":"Import preparation, request. "
      },
      "ImportPrepRsp":{
        "title":"ImportPrepRsp",
        "required":[
          "source_path"
        ],
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Eventually amended source path on server",
            "type":"string"
          },
          "mappings":{
            "title":"Fields mapping",
            "type":"object",
            "additionalProperties":{
              "type":"object",
              "additionalProperties":{
                "type":"string"
              }
            },
            "default":{}
          },
          "found_users":{
            "title":"Users found in TSV files",
            "type":"object",
            "additionalProperties":{
              "type":"object"
            },
            "description":"key = user name; value = dict with (key = 'id' if resolved, else 'email')",
            "default":{}
          },
          "found_taxa":{
            "title":"Taxa found without ID in TSV files",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"key = taxon NAME; value = taxon ID if resolved, else None",
            "default":{}
          },
          "warnings":{
            "title":"Warnings from analysis",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          },
          "errors":{
            "title":"Errors from analysis",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Do NOT proceed to real import if not empty.",
            "default":[]
          },
          "rowcount":{
            "title":"Number of TSV rows, counted during validation",
            "type":"integer",
            "default":0
          }
        },
        "description":"Import preparation, response. "
      },
      "ImportRealReq":{
        "title":"ImportRealReq",
        "required":[
          "task_id",
          "source_path"
        ],
        "type":"object",
        "properties":{
          "task_id":{
            "title":"The existing task to use",
            "type":"integer"
          },
          "source_path":{
            "title":"Source path on server, to plain directory",
            "type":"string"
          },
          "taxo_mappings":{
            "title":"Optional taxonomy mapping",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "skip_loaded_files":{
            "title":"Skip Loaded Files",
            "type":"boolean",
            "default":false
          },
          "skip_existing_objects":{
            "title":"Skip Existing Objects",
            "type":"boolean",
            "default":false
          },
          "update_mode":{
            "title":"Update data ('Yes'), including classification ('Cla')",
            "type":"string",
            "default":""
          },
          "mappings":{
            "title":"Fields mapping",
            "type":"object",
            "additionalProperties":{
              "type":"object",
              "additionalProperties":{
                "type":"string"
              }
            },
            "default":{}
          },
          "found_users":{
            "title":"Users found in TSV files",
            "type":"object",
            "additionalProperties":{
              "type":"object"
            },
            "description":"key = user name; value = dict with (key = 'id' if resolved, else 'email')",
            "default":{}
          },
          "found_taxa":{
            "title":"Taxa found in TSV files",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"key = taxon NAME; value = taxon ID if resolved, else None",
            "default":{}
          },
          "rowcount":{
            "title":"Number of TSV rows, counted during validation",
            "type":"integer",
            "default":0
          }
        },
        "description":"Import for real, request. "
      },
      "ImportRealRsp":{
        "title":"ImportRealRsp",
        "type":"object",
        "properties":{},
        "description":"Import for real, response. "
      },
      "MergeRsp":{
        "title":"MergeRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"The errors found during processing.",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          }
        },
        "description":"Merge response. "
      },
      "ObjectHeaderModel":{
        "title":"ObjectHeaderModel",
        "required":[
          "projid"
        ],
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "projid":{
            "title":"Projid",
            "type":"integer"
          },
          "objdate":{
            "title":"Objdate",
            "type":"string",
            "format":"date"
          },
          "objtime":{
            "title":"Objtime",
            "type":"string",
            "format":"time"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number"
          },
          "longitude":{
            "title":"Longitude",
            "type":"number"
          },
          "depth_min":{
            "title":"Depth Min",
            "type":"number"
          },
          "depth_max":{
            "title":"Depth Max",
            "type":"number"
          },
          "sunpos":{
            "title":"Sunpos",
            "type":"string"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "classif_qual":{
            "title":"Classif Qual",
            "type":"string"
          },
          "classif_who":{
            "title":"Classif Who",
            "type":"integer"
          },
          "classif_when":{
            "title":"Classif When",
            "type":"string",
            "format":"date-time"
          },
          "classif_auto_id":{
            "title":"Classif Auto Id",
            "type":"integer"
          },
          "classif_auto_score":{
            "title":"Classif Auto Score",
            "type":"number"
          },
          "classif_auto_when":{
            "title":"Classif Auto When",
            "type":"string",
            "format":"date-time"
          },
          "classif_crossvalidation_id":{
            "title":"Classif Crossvalidation Id",
            "type":"integer"
          },
          "img0id":{
            "title":"Img0Id",
            "type":"integer"
          },
          "imgcount":{
            "title":"Imgcount",
            "type":"integer"
          },
          "complement_info":{
            "title":"Complement Info",
            "type":"string"
          },
          "similarity":{
            "title":"Similarity",
            "type":"number"
          },
          "random_value":{
            "title":"Random Value",
            "type":"integer"
          },
          "sampleid":{
            "title":"Sampleid",
            "type":"integer"
          },
          "acquisid":{
            "title":"Acquisid",
            "type":"integer"
          },
          "processid":{
            "title":"Processid",
            "type":"integer"
          }
        }
      },
      "ObjectSetQueryRsp":{
        "title":"ObjectSetQueryRsp",
        "type":"object",
        "properties":{
          "object_ids":{
            "title":"Matching object IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "process_ids":{
            "title":"Parent (process) IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "acquisition_ids":{
            "title":"Parent (acquisition) IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "sample_ids":{
            "title":"Parent (sample) IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          }
        }
      },
      "ObjectSetRevertToHistoryRsp":{
        "title":"ObjectSetRevertToHistoryRsp",
        "type":"object",
        "properties":{
          "last_entries":{
            "title":"Object + last classification",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/HistoricalClassif"
            },
            "default":[]
          },
          "classif_info":{
            "title":"Classification names (self+parent) for involved IDs",
            "type":"object",
            "default":{}
          }
        }
      },
      "ProjectFilters":{
        "title":"ProjectFilters",
        "type":"object",
        "properties":{
          "taxo":{
            "title":"Taxo",
            "type":"string"
          },
          "taxochild":{
            "title":"Taxochild",
            "type":"string"
          },
          "statusfilter":{
            "title":"Statusfilter",
            "type":"string"
          },
          "MapN":{
            "title":"Mapn",
            "type":"string"
          },
          "MapW":{
            "title":"Mapw",
            "type":"string"
          },
          "MapE":{
            "title":"Mape",
            "type":"string"
          },
          "MapS":{
            "title":"Maps",
            "type":"string"
          },
          "depthmin":{
            "title":"Depthmin",
            "type":"string"
          },
          "depthmax":{
            "title":"Depthmax",
            "type":"string"
          },
          "samples":{
            "title":"Samples",
            "type":"string"
          },
          "instrum":{
            "title":"Instrum",
            "type":"string"
          },
          "daytime":{
            "title":"Daytime",
            "type":"string"
          },
          "month":{
            "title":"Month",
            "type":"string"
          },
          "fromdate":{
            "title":"Fromdate",
            "type":"string"
          },
          "todate":{
            "title":"Todate",
            "type":"string"
          },
          "fromtime":{
            "title":"Fromtime",
            "type":"string"
          },
          "totime":{
            "title":"Totime",
            "type":"string"
          },
          "inverttime":{
            "title":"Inverttime",
            "type":"string"
          },
          "validfromdate":{
            "title":"Validfromdate",
            "type":"string"
          },
          "validtodate":{
            "title":"Validtodate",
            "type":"string"
          },
          "freenum":{
            "title":"Freenum",
            "type":"string"
          },
          "freenumst":{
            "title":"Freenumst",
            "type":"string"
          },
          "freenumend":{
            "title":"Freenumend",
            "type":"string"
          },
          "freetxt":{
            "title":"Freetxt",
            "type":"string"
          },
          "freetxtval":{
            "title":"Freetxtval",
            "type":"string"
          },
          "filt_annot":{
            "title":"Filt Annot",
            "type":"string"
          },
          "filt_last_annot":{
            "title":"Filt Last Annot",
            "type":"string"
          }
        }
      },
      "ProjectModel":{
        "title":"ProjectModel",
        "required":[
          "title"
        ],
        "type":"object",
        "properties":{
          "obj_free_cols":{
            "title":"Object free columns",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "sample_free_cols":{
            "title":"Sample free columns",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "acquisition_free_cols":{
            "title":"Acquisition free columns",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "process_free_cols":{
            "title":"Process free columns",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "projid":{
            "title":"Projid",
            "type":"integer"
          },
          "title":{
            "title":"Title",
            "type":"string"
          },
          "visible":{
            "title":"Visible",
            "type":"boolean"
          },
          "status":{
            "title":"Status",
            "type":"string"
          },
          "mappingobj":{
            "title":"Mappingobj",
            "type":"string"
          },
          "mappingsample":{
            "title":"Mappingsample",
            "type":"string"
          },
          "mappingacq":{
            "title":"Mappingacq",
            "type":"string"
          },
          "mappingprocess":{
            "title":"Mappingprocess",
            "type":"string"
          },
          "objcount":{
            "title":"Objcount",
            "type":"number"
          },
          "pctvalidated":{
            "title":"Pctvalidated",
            "type":"number"
          },
          "pctclassified":{
            "title":"Pctclassified",
            "type":"number"
          },
          "classifsettings":{
            "title":"Classifsettings",
            "type":"string"
          },
          "initclassiflist":{
            "title":"Initclassiflist",
            "type":"string"
          },
          "classiffieldlist":{
            "title":"Classiffieldlist",
            "type":"string"
          },
          "popoverfieldlist":{
            "title":"Popoverfieldlist",
            "type":"string"
          },
          "comments":{
            "title":"Comments",
            "type":"string"
          },
          "projtype":{
            "title":"Projtype",
            "type":"string"
          },
          "fileloaded":{
            "title":"Fileloaded",
            "type":"string"
          },
          "rf_models_used":{
            "title":"Rf Models Used",
            "type":"string"
          },
          "cnn_network_id":{
            "title":"Cnn Network Id",
            "type":"string"
          }
        },
        "description":"Project + computed",
        "example":{
          "obj_free_cols":{
            "area":"n01",
            "esd":"n02"
          },
          "sample_free_cols":{
            "barcode":"t01"
          },
          "acquisition_free_cols":{
            "flash_delay":"t01"
          },
          "process_free_cols":{
            "nb_images":"t01"
          }
        }
      },
      "ProjectSearchResult":{
        "title":"ProjectSearchResult",
        "required":[
          "projid",
          "title",
          "status",
          "objcount",
          "pctvalidated",
          "pctclassified",
          "visible"
        ],
        "type":"object",
        "properties":{
          "projid":{
            "title":"Projid",
            "type":"integer"
          },
          "title":{
            "title":"Title",
            "type":"string"
          },
          "status":{
            "title":"Status",
            "type":"string"
          },
          "objcount":{
            "title":"Objcount",
            "type":"integer"
          },
          "pctvalidated":{
            "title":"Pctvalidated",
            "type":"number"
          },
          "pctclassified":{
            "title":"Pctclassified",
            "type":"number"
          },
          "email":{
            "title":"Email",
            "type":"string"
          },
          "name":{
            "title":"Name",
            "type":"string"
          },
          "visible":{
            "title":"Visible",
            "type":"boolean"
          }
        }
      },
      "SimpleImportReq":{
        "title":"SimpleImportReq",
        "required":[
          "task_id",
          "source_path",
          "values"
        ],
        "type":"object",
        "properties":{
          "task_id":{
            "title":"The existing task to use, if 0 then it's a dry run",
            "type":"integer"
          },
          "source_path":{
            "title":"Source path on server, to zip or plain directory",
            "type":"string"
          },
          "values":{
            "title":"Constant values, per field, to write for all images.",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":":imgdate, imgtime, latitude, longitude, depthmin, depthmax, taxolb, userlb, status"
          },
          "possible_values":{
            "title":"Possible Values",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[
              "imgdate",
              "imgtime",
              "latitude",
              "longitude",
              "depthmin",
              "depthmax",
              "taxolb",
              "userlb",
              "status"
            ]
          }
        },
        "description":"Simple Import preparation, request. "
      },
      "SimpleImportRsp":{
        "title":"SimpleImportRsp",
        "required":[
          "errors",
          "nb_images"
        ],
        "type":"object",
        "properties":{
          "errors":{
            "title":"Validation, copy or insert errors",
            "type":"array",
            "items":{
              "type":"string"
            }
          },
          "nb_images":{
            "title":"Number of successfully imported images",
            "type":"integer"
          }
        },
        "description":"Simple Import, response. "
      },
      "SubsetReq":{
        "title":"SubsetReq",
        "required":[
          "task_id",
          "dest_prj_id",
          "limit_type",
          "limit_value",
          "do_images"
        ],
        "type":"object",
        "properties":{
          "task_id":{
            "title":"The existing task to use.",
            "type":"integer"
          },
          "filters":{
            "title":"The filters to apply to project",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "dest_prj_id":{
            "title":"The destination project ID.",
            "type":"integer"
          },
          "limit_type":{
            "title":"The type of limit_value: P for %, V for constant, both per category.",
            "enum":[
              "P",
              "V"
            ],
            "type":"string"
          },
          "limit_value":{
            "title":"Limit value, e.g. 20% or 5 per copepoda.",
            "type":"number"
          },
          "do_images":{
            "title":"If set, also clone images.",
            "type":"boolean"
          }
        },
        "description":"Subset request. "
      },
      "SubsetRsp":{
        "title":"SubsetRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"The errors found during processing",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          }
        },
        "description":"Subset response. "
      },
      "UserModel":{
        "title":"UserModel",
        "required":[
          "email",
          "name"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "email":{
            "title":"Email",
            "type":"string"
          },
          "password":{
            "title":"Password",
            "type":"string"
          },
          "name":{
            "title":"Name",
            "type":"string"
          },
          "organisation":{
            "title":"Organisation",
            "type":"string"
          },
          "active":{
            "title":"Active",
            "type":"boolean"
          },
          "preferences":{
            "title":"Preferences",
            "type":"string"
          },
          "country":{
            "title":"Country",
            "type":"string"
          },
          "usercreationdate":{
            "title":"Usercreationdate",
            "type":"string",
            "format":"date-time"
          },
          "usercreationreason":{
            "title":"Usercreationreason",
            "type":"string"
          }
        }
      },
      "ValidationError":{
        "title":"ValidationError",
        "required":[
          "loc",
          "msg",
          "type"
        ],
        "type":"object",
        "properties":{
          "loc":{
            "title":"Location",
            "type":"array",
            "items":{
              "type":"string"
            }
          },
          "msg":{
            "title":"Message",
            "type":"string"
          },
          "type":{
            "title":"Error Type",
            "type":"string"
          }
        }
      }
    },
    "securitySchemes":{
      "HTTPBearer":{
        "type":"http",
        "scheme":"bearer"
      }
    }
  }
}