"""empty message

Revision ID: 6e16b3a1d05d
Revises: 4cb636df602
Create Date: 2017-04-24 18:44:19.104977

"""

# revision identifiers, used by Alembic.
revision = "6e16b3a1d05d"
down_revision = "4cb636df602"

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "part_projects",
        sa.Column("pprojid", sa.INTEGER(), nullable=False),
        sa.Column("ptitle", sa.VARCHAR(length=250), nullable=False),
        sa.Column("rawfolder", sa.VARCHAR(length=250), nullable=False),
        sa.Column("ownerid", sa.Integer(), nullable=True),
        sa.Column("projid", sa.INTEGER(), nullable=True),
        sa.Column("instrumtype", sa.VARCHAR(length=50), nullable=True),
        sa.Column("op_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("op_email", sa.VARCHAR(length=100), nullable=True),
        sa.Column("cs_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("cs_email", sa.VARCHAR(length=100), nullable=True),
        sa.Column("do_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("do_email", sa.VARCHAR(length=100), nullable=True),
        sa.Column("prj_info", sa.VARCHAR(length=1000), nullable=True),
        sa.Column("prj_acronym", sa.VARCHAR(length=100), nullable=True),
        sa.Column("cruise", sa.VARCHAR(length=100), nullable=True),
        sa.Column("ship", sa.VARCHAR(length=100), nullable=True),
        sa.Column("default_instrumsn", sa.VARCHAR(length=50), nullable=True),
        sa.Column("default_depthoffset", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.ForeignKeyConstraint(
            ["ownerid"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["projid"],
            ["projects.projid"],
        ),
        sa.PrimaryKeyConstraint("pprojid"),
    )
    op.create_index(
        "is_part_projects_projid", "part_projects", ["projid"], unique=False
    )
    op.create_table(
        "part_samples",
        sa.Column("psampleid", sa.INTEGER(), nullable=False),
        sa.Column("pprojid", sa.INTEGER(), nullable=True),
        sa.Column("profileid", sa.VARCHAR(length=250), nullable=False),
        sa.Column("filename", sa.VARCHAR(length=250), nullable=False),
        sa.Column("sampleid", sa.INTEGER(), nullable=True),
        sa.Column("latitude", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("longitude", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("organizedbydeepth", sa.Boolean(), nullable=True),
        sa.Column("histobrutavailable", sa.Boolean(), nullable=True),
        sa.Column("qualitytaxo", sa.VARCHAR(length=20), nullable=True),
        sa.Column("qualitypart", sa.VARCHAR(length=20), nullable=True),
        sa.Column("daterecalculhistotaxo", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("winddir", sa.INTEGER(), nullable=True),
        sa.Column("winspeed", sa.INTEGER(), nullable=True),
        sa.Column("seastate", sa.INTEGER(), nullable=True),
        sa.Column("nebuloussness", sa.INTEGER(), nullable=True),
        sa.Column("comment", sa.VARCHAR(length=1000), nullable=True),
        sa.Column("stationid", sa.VARCHAR(length=100), nullable=True),
        sa.Column("firstimage", sa.INTEGER(), nullable=True),
        sa.Column("lastimg", sa.BIGINT(), nullable=True),
        sa.Column("lastimgused", sa.BIGINT(), nullable=True),
        sa.Column("bottomdepth", sa.INTEGER(), nullable=True),
        sa.Column("yoyo", sa.Boolean(), nullable=True),
        sa.Column("sampledate", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("op_sample_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("op_sample_email", sa.VARCHAR(length=100), nullable=True),
        sa.Column("ctd_desc", sa.VARCHAR(length=1000), nullable=True),
        sa.Column("ctd_origfilename", sa.VARCHAR(length=250), nullable=True),
        sa.Column("ctd_import_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("ctd_import_email", sa.VARCHAR(length=100), nullable=True),
        sa.Column("ctd_import_datetime", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("ctd_status", sa.VARCHAR(length=50), nullable=True),
        sa.Column("instrumsn", sa.VARCHAR(length=50), nullable=True),
        sa.Column("acq_aa", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("acq_exp", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("acq_volimage", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("acq_depthoffset", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("acq_pixel", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("acq_shutterspeed", sa.INTEGER(), nullable=True),
        sa.Column("acq_smzoo", sa.INTEGER(), nullable=True),
        sa.Column("acq_exposure", sa.INTEGER(), nullable=True),
        sa.Column("acq_gain", sa.INTEGER(), nullable=True),
        sa.Column("acq_filedescription", sa.VARCHAR(length=200), nullable=True),
        sa.Column("acq_eraseborder", sa.INTEGER(), nullable=True),
        sa.Column("acq_tasktype", sa.INTEGER(), nullable=True),
        sa.Column("acq_threshold", sa.INTEGER(), nullable=True),
        sa.Column("acq_choice", sa.INTEGER(), nullable=True),
        sa.Column("acq_disktype", sa.INTEGER(), nullable=True),
        sa.Column("acq_smbase", sa.INTEGER(), nullable=True),
        sa.Column("acq_ratio", sa.INTEGER(), nullable=True),
        sa.Column("acq_descent_filter", sa.Boolean(), nullable=True),
        sa.Column("acq_presure_gain", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("acq_xsize", sa.INTEGER(), nullable=True),
        sa.Column("acq_ysize", sa.INTEGER(), nullable=True),
        sa.Column("acq_barcode", sa.VARCHAR(length=50), nullable=True),
        sa.Column("proc_datetime", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("proc_gamma", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("proc_soft", sa.VARCHAR(length=250), nullable=True),
        sa.Column("lisst_zscat_filename", sa.VARCHAR(length=200), nullable=True),
        sa.Column("lisst_kernel", sa.VARCHAR(length=200), nullable=True),
        sa.Column("lisst_year", sa.INTEGER(), nullable=True),
        sa.Column("txt_data01", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data02", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data03", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data04", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data05", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data06", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data07", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data08", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data09", sa.VARCHAR(length=200), nullable=True),
        sa.Column("txt_data10", sa.VARCHAR(length=200), nullable=True),
        sa.ForeignKeyConstraint(
            ["pprojid"],
            ["part_projects.pprojid"],
        ),
        sa.ForeignKeyConstraint(
            ["sampleid"],
            ["samples.sampleid"],
        ),
        sa.PrimaryKeyConstraint("psampleid"),
    )
    op.create_index("is_part_samples_prj", "part_samples", ["pprojid"], unique=False)
    op.create_index(
        "is_part_samples_sampleid", "part_samples", ["sampleid"], unique=False
    )
    op.create_table(
        "part_ctd",
        sa.Column("psampleid", sa.INTEGER(), nullable=False),
        sa.Column("lineno", sa.INTEGER(), nullable=False),
        sa.Column("depth", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("datetime", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("chloro_fluo", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("conductivity", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("cpar", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("depth_salt_water", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("fcdom_factory", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column(
            "in_situ_density_anomaly", postgresql.DOUBLE_PRECISION(), nullable=True
        ),
        sa.Column("neutral_density", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("nitrate", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("oxygen_mass", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("oxygen_vol", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("par", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column(
            "part_backscattering_coef_470_nm",
            postgresql.DOUBLE_PRECISION(),
            nullable=True,
        ),
        sa.Column("pot_temperature", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column(
            "potential_density_anomaly", postgresql.DOUBLE_PRECISION(), nullable=True
        ),
        sa.Column(
            "potential_temperature", postgresql.DOUBLE_PRECISION(), nullable=True
        ),
        sa.Column("practical_salinity", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column(
            "practical_salinity__from_conductivity",
            postgresql.DOUBLE_PRECISION(),
            nullable=True,
        ),
        sa.Column("qc_flag", sa.INTEGER(), nullable=True),
        sa.Column("sound_speed_c", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("spar", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("temperature", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames01", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames02", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames03", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames04", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames05", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames06", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames07", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames08", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames09", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames10", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames11", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames12", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames13", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames14", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames15", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames16", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames17", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames18", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames19", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("extrames20", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.ForeignKeyConstraint(
            ["psampleid"],
            ["part_samples.psampleid"],
        ),
        sa.PrimaryKeyConstraint("psampleid", "lineno"),
    )
    op.create_table(
        "part_histocat",
        sa.Column("psampleid", sa.INTEGER(), nullable=False),
        sa.Column("classif_id", sa.INTEGER(), nullable=False),
        sa.Column("lineno", sa.INTEGER(), nullable=False),
        sa.Column("depth", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("datetime", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("watervolume", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("nbr", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("avgesd", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("totalbiovolume", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.ForeignKeyConstraint(
            ["psampleid"],
            ["part_samples.psampleid"],
        ),
        sa.PrimaryKeyConstraint("psampleid", "classif_id", "lineno"),
    )
    op.create_table(
        "part_histocat_lst",
        sa.Column("psampleid", sa.INTEGER(), nullable=False),
        sa.Column("classif_id", sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(
            ["psampleid"],
            ["part_samples.psampleid"],
        ),
        sa.PrimaryKeyConstraint("psampleid", "classif_id"),
    )
    op.create_table(
        "part_histopart_det",
        sa.Column("psampleid", sa.INTEGER(), nullable=False),
        sa.Column("lineno", sa.INTEGER(), nullable=False),
        sa.Column("depth", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("datetime", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("watervolume", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("class01", sa.INTEGER(), nullable=True),
        sa.Column("class02", sa.INTEGER(), nullable=True),
        sa.Column("class03", sa.INTEGER(), nullable=True),
        sa.Column("class04", sa.INTEGER(), nullable=True),
        sa.Column("class05", sa.INTEGER(), nullable=True),
        sa.Column("class06", sa.INTEGER(), nullable=True),
        sa.Column("class07", sa.INTEGER(), nullable=True),
        sa.Column("class08", sa.INTEGER(), nullable=True),
        sa.Column("class09", sa.INTEGER(), nullable=True),
        sa.Column("class10", sa.INTEGER(), nullable=True),
        sa.Column("class11", sa.INTEGER(), nullable=True),
        sa.Column("class12", sa.INTEGER(), nullable=True),
        sa.Column("class13", sa.INTEGER(), nullable=True),
        sa.Column("class14", sa.INTEGER(), nullable=True),
        sa.Column("class15", sa.INTEGER(), nullable=True),
        sa.Column("class16", sa.INTEGER(), nullable=True),
        sa.Column("class17", sa.INTEGER(), nullable=True),
        sa.Column("class18", sa.INTEGER(), nullable=True),
        sa.Column("class19", sa.INTEGER(), nullable=True),
        sa.Column("class20", sa.INTEGER(), nullable=True),
        sa.Column("class21", sa.INTEGER(), nullable=True),
        sa.Column("class22", sa.INTEGER(), nullable=True),
        sa.Column("class23", sa.INTEGER(), nullable=True),
        sa.Column("class24", sa.INTEGER(), nullable=True),
        sa.Column("class25", sa.INTEGER(), nullable=True),
        sa.Column("class26", sa.INTEGER(), nullable=True),
        sa.Column("class27", sa.INTEGER(), nullable=True),
        sa.Column("class28", sa.INTEGER(), nullable=True),
        sa.Column("class29", sa.INTEGER(), nullable=True),
        sa.Column("class30", sa.INTEGER(), nullable=True),
        sa.Column("class31", sa.INTEGER(), nullable=True),
        sa.Column("class32", sa.INTEGER(), nullable=True),
        sa.Column("class33", sa.INTEGER(), nullable=True),
        sa.Column("class34", sa.INTEGER(), nullable=True),
        sa.Column("class35", sa.INTEGER(), nullable=True),
        sa.Column("class36", sa.INTEGER(), nullable=True),
        sa.Column("class37", sa.INTEGER(), nullable=True),
        sa.Column("class38", sa.INTEGER(), nullable=True),
        sa.Column("class39", sa.INTEGER(), nullable=True),
        sa.Column("class40", sa.INTEGER(), nullable=True),
        sa.Column("class41", sa.INTEGER(), nullable=True),
        sa.Column("class42", sa.INTEGER(), nullable=True),
        sa.Column("class43", sa.INTEGER(), nullable=True),
        sa.Column("class44", sa.INTEGER(), nullable=True),
        sa.Column("class45", sa.INTEGER(), nullable=True),
        sa.Column("biovol01", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol02", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol03", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol04", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol05", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol06", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol07", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol08", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol09", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol10", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol11", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol12", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol13", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol14", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol15", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol16", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol17", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol18", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol19", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol20", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol21", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol22", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol23", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol24", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol25", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol26", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol27", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol28", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol29", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol30", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol31", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol32", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol33", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol34", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol35", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol36", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol37", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol38", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol39", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol40", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol41", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol42", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol43", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol44", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol45", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.ForeignKeyConstraint(
            ["psampleid"],
            ["part_samples.psampleid"],
        ),
        sa.PrimaryKeyConstraint("psampleid", "lineno"),
    )
    op.create_table(
        "part_histopart_reduit",
        sa.Column("psampleid", sa.INTEGER(), nullable=False),
        sa.Column("lineno", sa.INTEGER(), nullable=False),
        sa.Column("depth", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("datetime", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("watervolume", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("class01", sa.INTEGER(), nullable=True),
        sa.Column("class02", sa.INTEGER(), nullable=True),
        sa.Column("class03", sa.INTEGER(), nullable=True),
        sa.Column("class04", sa.INTEGER(), nullable=True),
        sa.Column("class05", sa.INTEGER(), nullable=True),
        sa.Column("class06", sa.INTEGER(), nullable=True),
        sa.Column("class07", sa.INTEGER(), nullable=True),
        sa.Column("class08", sa.INTEGER(), nullable=True),
        sa.Column("class09", sa.INTEGER(), nullable=True),
        sa.Column("class10", sa.INTEGER(), nullable=True),
        sa.Column("class11", sa.INTEGER(), nullable=True),
        sa.Column("class12", sa.INTEGER(), nullable=True),
        sa.Column("class13", sa.INTEGER(), nullable=True),
        sa.Column("class14", sa.INTEGER(), nullable=True),
        sa.Column("class15", sa.INTEGER(), nullable=True),
        sa.Column("biovol01", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol02", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol03", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol04", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol05", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol06", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol07", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol08", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol09", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol10", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol11", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol12", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol13", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol14", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.Column("biovol15", postgresql.DOUBLE_PRECISION(), nullable=True),
        sa.ForeignKeyConstraint(
            ["psampleid"],
            ["part_samples.psampleid"],
        ),
        sa.PrimaryKeyConstraint("psampleid", "lineno"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("part_histopart_reduit")
    op.drop_table("part_histopart_det")
    op.drop_table("part_histocat_lst")
    op.drop_table("part_histocat")
    op.drop_table("part_ctd")
    op.drop_index("is_part_samples_sampleid", table_name="part_samples")
    op.drop_index("is_part_samples_prj", table_name="part_samples")
    op.drop_table("part_samples")
    op.drop_index("is_part_projects_projid", table_name="part_projects")
    op.drop_table("part_projects")
    # ### end Alembic commands ###
