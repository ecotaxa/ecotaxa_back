{
  "openapi":"3.0.2",
  "info":{
    "title":"EcoTaxa",
    "version":"0.0.40"
  },
  "servers":[
    {
      "url":"/api",
      "description":"External access"
    },
    {
      "url":"/",
      "description":"Local access"
    }
  ],
  "paths":{
    "/login":{
      "post":{
        "tags":[
          "authentification"
        ],
        "summary":"Login",
        "description":"**Login barrier,**\n\nIf successful, the login will returns a **JWT** which will have to be used\nin bearer authentication scheme for subsequent calls.",
        "operationId":"login",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/LoginReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Login Login Post",
                  "type":"string"
                },
                "example":"eyJ1c2VyX2lkIjo5OTN9.YUmHHw.-X4tsLsYbwldKL6vDgO3o4-aAxE"
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Users",
        "description":"Returns the list of **all users** with their full information, or just some of them if their ids\nare provided.\n\n🔒 *For admins only.*",
        "operationId":"get_users",
        "parameters":[
          {
            "description":"String containing the list of one or more id separated by non-num char. \n \n **If several ids are provided**, one full info is returned per user.",
            "required":false,
            "schema":{
              "title":"Ids",
              "type":"string",
              "description":"String containing the list of one or more id separated by non-num char. \n \n **If several ids are provided**, one full info is returned per user.",
              "default":""
            },
            "example":"1",
            "name":"ids",
            "in":"query"
          },
          {
            "description":"Return users except rights and last_used_projects if set to True. For users list display purpose.",
            "required":false,
            "schema":{
              "title":"Summary",
              "type":"boolean",
              "description":"Return users except rights and last_used_projects if set to True. For users list display purpose."
            },
            "example":true,
            "name":"summary",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Users Users Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/UserModelWithRights"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/me":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Show Current User",
        "description":"Returns **currently authenticated user's** (i.e. you) information, permissions and last used projects.",
        "operationId":"show_current_user",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/UserModelWithRights"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/{user_id}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get User",
        "description":"Returns **information about the user** corresponding to the given id.",
        "operationId":"get_user",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this user.",
            "required":true,
            "schema":{
              "title":"User Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this user."
            },
            "example":1,
            "name":"user_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/MinUserModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "put":{
        "tags":[
          "users"
        ],
        "summary":"Update User",
        "description":"**Update the user**, return **NULL upon success.**\n\n🔒 Depending on logged user, different authorizations apply:\n- An administrator or user administrator can change any field with respect of consistency.\n- A user can update own password and name.\n- An ordinary user cannot update anything for another user.",
        "operationId":"update_user",
        "parameters":[
          {
            "description":"Internal, numeric id of the user.",
            "required":true,
            "schema":{
              "title":"User Id",
              "type":"integer",
              "description":"Internal, numeric id of the user."
            },
            "example":760,
            "name":"user_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/UserModelWithRights"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/create":{
      "post":{
        "tags":[
          "users"
        ],
        "summary":"Create User",
        "description":"**Create a new user**, return **NULL upon success.**\n\n🔒 Depending on logged user, different authorizations apply:\n- An administrator or user administrator can create a user.\n- An unlogged user can self-create an account. But must eventually provide a no-robot proof.\n- An ordinary logged user cannot create another account.\n\nIf back-end configuration for self-creation check is Google reCAPTCHA,\nthen no_bot is a pair [remote IP, reCAPTCHA response].",
        "operationId":"create_user",
        "parameters":[
          {
            "description":"not-a-robot proof",
            "required":false,
            "schema":{
              "title":"NoBot token",
              "type":"array",
              "items":{
                "type":"string"
              },
              "description":"not-a-robot proof"
            },
            "example":"['127.0.0.1', 'ffqsdfsdf']",
            "name":"no_bot",
            "in":"query"
          },
          {
            "description":"token in the url to validate request",
            "required":false,
            "schema":{
              "title":"Token",
              "type":"string",
              "description":"token in the url to validate request"
            },
            "name":"token",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/UserModelWithRights"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/my_preferences/{project_id}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Current User Prefs",
        "description":"**Returns one preference**, for a project and the currently authenticated user.\n\nAvailable keys are **cwd**, **img_import** and **filters**.",
        "operationId":"get_current_user_prefs",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"The preference key, as text.",
            "required":true,
            "schema":{
              "title":"Key",
              "type":"string",
              "description":"The preference key, as text."
            },
            "example":"filters",
            "name":"key",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Current User Prefs Users My Preferences  Project Id  Get",
                  "type":"string"
                },
                "example":"{\"dispfield\": \" dispfield_orig_id dispfield_classif_auto_score dispfield_classif_when\", \"ipp\": \"1000\", \"magenabled\": \"1\", \"popupenabled\": \"1\", \"sortby\": \"orig_id\", \"sortorder\": \"asc\", \"statusfilter\": \"P\", \"zoom\": \"90\"}"
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "put":{
        "tags":[
          "users"
        ],
        "summary":"Set Current User Prefs",
        "description":"**Sets one preference**, for a project and for the currently authenticated user.\n\nAvailable keys are **cwd**, **img_import** and **filters**.\n\nThe key disappears if set to empty string.\n\n**Returns NULL upon success.**",
        "operationId":"set_current_user_prefs",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"The preference key, as text.",
            "required":true,
            "schema":{
              "title":"Key",
              "type":"string",
              "description":"The preference key, as text."
            },
            "example":"filters",
            "name":"key",
            "in":"query"
          },
          {
            "description":"The value to set this preference to, as text.",
            "required":true,
            "schema":{
              "title":"Value",
              "type":"string",
              "description":"The value to set this preference to, as text."
            },
            "example":"{\"dispfield\": \" dispfield_orig_id dispfield_classif_auto_score dispfield_classif_when dispfield_random_value\", \"ipp\": \"500\", \"magenabled\": \"1\", \"popupenabled\": \"1\", \"sortby\": \"orig_id\", \"sortorder\": \"asc\", \"statusfilter\": \"\", \"zoom\": \"90\"}",
            "name":"value",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/search":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Search User",
        "description":"**Search users using various criteria**, search is case-insensitive and might contain % chars.",
        "operationId":"search_user",
        "parameters":[
          {
            "description":"Search by name, use % for searching with 'any char'.",
            "required":false,
            "schema":{
              "title":"search by name",
              "type":"string",
              "description":"Search by name, use % for searching with 'any char'."
            },
            "example":"%userNa%",
            "name":"by_name",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search User Users Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/MinUserModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/admins":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Users Admins",
        "description":"**List users administrators**, themselves being users.\n🔒 Public, no auth.",
        "operationId":"get_users_admins",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Users Admins Users Admins Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/MinUserModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/user_admins":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Admin Users",
        "description":"**List application administrators**, themselves being users.\n🔒 Any authenticated user can access the list.",
        "operationId":"get_admin_users",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Admin Users Users User Admins Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/MinUserModel"
                  }
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/activate/{user_id}/{status}":{
      "post":{
        "tags":[
          "users"
        ],
        "summary":"Activate User",
        "description":"Activate a new user if external validation is on., return **NULL upon success.**\n\n🔒 Depending on logged user, different authorizations apply:\n- An administrator or user administrator can activate a user or bypass the activation and inform the user when a modification request value/reason is provided.\n- An ordinary logged user cannot activate another account.\nIf back-end configuration for self-creation check is Google reCAPTCHA,\nthen no_bot is a pair [remote IP, reCAPTCHA response].",
        "operationId":"activate_user",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this user.",
            "required":true,
            "schema":{
              "title":"User Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this user."
            },
            "example":1,
            "name":"user_id",
            "in":"path"
          },
          {
            "description":"Internal, the status name assign to this user.",
            "required":true,
            "schema":{
              "title":"Status",
              "type":"string",
              "description":"Internal, the status name assign to this user."
            },
            "example":1,
            "name":"status",
            "in":"path"
          },
          {
            "description":"not-a-robot proof",
            "required":false,
            "schema":{
              "title":"NoBot",
              "type":"array",
              "items":{
                "type":"string"
              },
              "description":"not-a-robot proof"
            },
            "example":"['127.0.0.1', 'ffqsdfsdf']",
            "name":"no_bot",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Activatereq",
                "allOf":[
                  {
                    "$ref":"#/components/schemas/UserActivateReq"
                  }
                ],
                "description":"activation parameters : reason if the request comes from an Administrator, password if the request comes from the user as it serves as email confirmation request."
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/reset_user_password":{
      "post":{
        "tags":[
          "users"
        ],
        "summary":"Reset User Password",
        "description":"reset user password **return NULL on success**\n\n🔒 Depending on logged user, different authorizations apply:\n- An administrator or user administrator can reset a user password.\n- An unlogged user can ask for a reset  in two steps. and receive a mail with a token. But must eventually provide a no-robot proof.\n\nIf back-end configuration for self-creation check is Google reCAPTCHA,\nthen no_bot is a pair [remote IP, reCAPTCHA response].",
        "operationId":"reset_user_password",
        "parameters":[
          {
            "description":"not-a-robot proof",
            "required":false,
            "schema":{
              "title":"NoBot token",
              "type":"array",
              "items":{
                "type":"string"
              },
              "description":"not-a-robot proof"
            },
            "example":"['127.0.0.1', 'ffqsdfsdf']",
            "name":"no_bot",
            "in":"query"
          },
          {
            "description":"token in the url to validate request",
            "required":false,
            "schema":{
              "title":"Token",
              "type":"string",
              "description":"token in the url to validate request"
            },
            "name":"token",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ResetPasswordReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/organizations/search":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Search Organizations",
        "description":"**Search for organizations.**\nSo far, organizations are just names in users table.",
        "operationId":"search_organizations",
        "parameters":[
          {
            "description":"Search by name, use % for searching with 'any char'.",
            "required":true,
            "schema":{
              "title":"Title",
              "type":"string",
              "description":"Search by name, use % for searching with 'any char'."
            },
            "example":"%vill%",
            "name":"name",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Organizations Organizations Search Get",
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                },
                "example":[
                  "Oceanographic Laboratory of Villefranche sur Mer - LOV",
                  "Developmental Biology Laboratory of Villefranche sur Mer - LBDV",
                  "Sea Institute of Villefranche sur Mer - IMEV"
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/create":{
      "post":{
        "tags":[
          "collections"
        ],
        "summary":"Create Collection",
        "description":"**Create a collection** with at least one project inside.\n\nReturns the created collection Id.\n\nNote: 'manage' right is required on all underlying projects.",
        "operationId":"create_collection",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CreateCollectionReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Create Collection Collections Create Post",
                  "type":"integer"
                },
                "example":1
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/collections/search":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Search Collections",
        "description":"**Search for collections.**\n\nNote: Only manageable collections are returned.",
        "operationId":"search_collections",
        "parameters":[
          {
            "description":"Search by title, use % for searching with 'any char'.",
            "required":true,
            "schema":{
              "title":"Title",
              "type":"string",
              "description":"Search by title, use % for searching with 'any char'."
            },
            "example":"%coll%",
            "name":"title",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Collections Collections Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/CollectionModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/collections/by_title":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Collection By Title",
        "description":"Return the **single collection with this title**.\n\n*For published datasets.*\n\n⚠️ DO NOT MODIFY BEHAVIOR ⚠️",
        "operationId":"collection_by_title",
        "parameters":[
          {
            "description":"Search by **exact** title.",
            "required":true,
            "schema":{
              "title":"Title",
              "type":"string",
              "description":"Search by **exact** title."
            },
            "example":"My collection",
            "name":"q",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/by_short_title":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Collection By Short Title",
        "description":"Return the **single collection with this short title**.\n\n*For published datasets.*\n\n⚠️ DO NOT MODIFY BEHAVIOR ⚠️",
        "operationId":"collection_by_short_title",
        "parameters":[
          {
            "description":"Search by **exact** short title.",
            "required":true,
            "schema":{
              "title":"Short title",
              "type":"string",
              "description":"Search by **exact** short title."
            },
            "example":"My coll",
            "name":"q",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Get Collection",
        "description":"Returns **information about the collection** corresponding to the given id.\n\nNote: The collection is returned only if manageable.",
        "operationId":"get_collection",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this collection.",
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this collection."
            },
            "example":1,
            "name":"collection_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "put":{
        "tags":[
          "collections"
        ],
        "summary":"Update Collection",
        "description":"**Update the collection**. Note that some updates are silently failing when not compatible\n with the composing projects.\n\n **Returns NULL upon success.**\n\n Note: The collection is updated only if manageable.",
        "operationId":"update_collection",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this collection.",
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this collection."
            },
            "example":1,
            "name":"collection_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CollectionModel"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "delete":{
        "tags":[
          "collections"
        ],
        "summary":"Erase Collection",
        "description":"**Delete the collection**,\n\ni.e. the precious fields, as the projects are just linked-at from the collection.\n\nNote: Only manageable collections can be deleted.",
        "operationId":"erase_collection",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this collection.",
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this collection."
            },
            "example":1,
            "name":"collection_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Erase Collection Collections  Collection Id  Delete",
                  "type":"integer"
                },
                "example":0
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/collections/{collection_id}/taxo_recast":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Read Collection Taxo Recast",
        "description":"**Read the collection taxonomy recast**.\n\n **Returns NULL upon success.**\n\n Note: The collection data is returned only if manageable.",
        "operationId":"get_collection_taxonomy_recast",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this collection.",
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this collection."
            },
            "example":1,
            "name":"collection_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "put":{
        "tags":[
          "collections"
        ],
        "summary":"Update Collection Taxo Recast",
        "description":"**Create or Update the collection taxonomy recast**.\n\n **Returns NULL upon success.**\n\n Note: The collection is updated only if manageable.",
        "operationId":"update_collection_taxonomy_recast",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this collection.",
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this collection."
            },
            "example":1,
            "name":"collection_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/TaxonomyRecast"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/collections/export/darwin_core":{
      "post":{
        "tags":[
          "collections"
        ],
        "summary":"Darwin Core Format Export",
        "description":"**Export the collection in Darwin Core format, e.g. for EMODnet portal**, @see https://www.emodnet-ingestion.eu\n\nProduces a DwC-A (https://dwc.tdwg.org/) archive into a temporary directory, ready for download.\n\nMaybe useful, a reader in Python: https://python-dwca-reader.readthedocs.io/en/latest/index.html\n\nNote: Only manageable collections can be exported.",
        "operationId":"darwin_core_format_export",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/DarwinCoreExportReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ExportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/search":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Search Projects",
        "description":"Returns **projects which the current user has explicit permission to access, with search options.**\n\nNote that, for performance reasons, in returned ProjectModels, field 'highest_rank' is NOT valued\n(unlike in simple query). The same information can be found in 'managers', 'annotators' and 'viewers' lists.",
        "operationId":"search_projects",
        "parameters":[
          {
            "required":false,
            "deprecated":true,
            "schema":{
              "title":"Also others",
              "type":"boolean",
              "default":false
            },
            "example":false,
            "name":"also_others",
            "in":"query"
          },
          {
            "description":"Return projects on which the current user has _no permission_, but visible to him/her.",
            "required":false,
            "schema":{
              "title":"Not granted",
              "type":"boolean",
              "description":"Return projects on which the current user has _no permission_, but visible to him/her.",
              "default":false
            },
            "example":false,
            "name":"not_granted",
            "in":"query"
          },
          {
            "description":"Return projects that can be written to (including erased) by the current user.",
            "required":false,
            "schema":{
              "title":"For managing",
              "type":"boolean",
              "description":"Return projects that can be written to (including erased) by the current user.",
              "default":false
            },
            "example":false,
            "name":"for_managing",
            "in":"query"
          },
          {
            "description":"Use this pattern for matching returned projects names.",
            "required":false,
            "schema":{
              "title":"Title filter",
              "type":"string",
              "description":"Use this pattern for matching returned projects names.",
              "default":""
            },
            "example":"Tara",
            "name":"title_filter",
            "in":"query"
          },
          {
            "description":"Only return projects where this instrument was used.",
            "required":false,
            "schema":{
              "title":"Instrument filter",
              "type":"string",
              "description":"Only return projects where this instrument was used.",
              "default":""
            },
            "example":"uvp5",
            "name":"instrument_filter",
            "in":"query"
          },
          {
            "description":"Only return projects having 'subset' in their names.",
            "required":false,
            "schema":{
              "title":"Filter subset",
              "type":"boolean",
              "description":"Only return projects having 'subset' in their names.",
              "default":false
            },
            "example":true,
            "name":"filter_subset",
            "in":"query"
          },
          {
            "description":"One of ['instrument', 'instrument_url', 'highest_right', 'projid', 'title', 'visible', 'status', 'objcount', 'pctvalidated', 'pctclassified', 'classifsettings', 'classiffieldlist', 'popoverfieldlist', 'comments', 'description', 'rf_models_used', 'cnn_network_id']",
            "required":false,
            "schema":{
              "title":"Order field",
              "type":"string",
              "description":"One of ['instrument', 'instrument_url', 'highest_right', 'projid', 'title', 'visible', 'status', 'objcount', 'pctvalidated', 'pctclassified', 'classifsettings', 'classiffieldlist', 'popoverfieldlist', 'comments', 'description', 'rf_models_used', 'cnn_network_id']"
            },
            "example":"instrument",
            "name":"order_field",
            "in":"query"
          },
          {
            "description":"Return projects except somme fields like bodc_variables if set to True. For projects list display purpose.",
            "required":false,
            "schema":{
              "title":"Summary",
              "type":"boolean",
              "description":"Return projects except somme fields like bodc_variables if set to True. For projects list display purpose."
            },
            "example":true,
            "name":"summary",
            "in":"query"
          },
          {
            "description":"Skip `window_start` before returning data.",
            "required":false,
            "schema":{
              "title":"Window start",
              "type":"integer",
              "description":"Skip `window_start` before returning data."
            },
            "example":"0",
            "name":"window_start",
            "in":"query"
          },
          {
            "description":"Return only `window_size` lines.",
            "required":false,
            "schema":{
              "title":"Window size",
              "type":"integer",
              "description":"Return only `window_size` lines."
            },
            "example":"100",
            "name":"window_size",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Projects Projects Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/create":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Create Project",
        "description":"**Create an empty project with only a title,** and **return the numeric id of this newly created project**.\n\nThe project will be managed by current user.\n\n🔒 The user has to be *app administrator* or *project creator*.",
        "operationId":"create_project",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CreateProjectReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Create Project Projects Create Post",
                  "type":"integer"
                },
                "example":44
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/subset":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Subset",
        "description":"**Subset a project into another one.**",
        "operationId":"project_subset",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/SubsetReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SubsetRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Query",
        "description":"**Returns project** if it exists for current user, eventually for managing it.",
        "operationId":"project_query",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"For managing this project.",
            "required":false,
            "schema":{
              "title":"For managing",
              "type":"boolean",
              "description":"For managing this project.",
              "default":false
            },
            "example":false,
            "name":"for_managing",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProjectModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "put":{
        "tags":[
          "projects"
        ],
        "summary":"Update Project",
        "description":"**Update the project**, return **NULL upon success.**\n\nNote that some fields will **NOT** be updated and simply ignored, e.g. *free_cols*.",
        "operationId":"update_project",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectModel"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "delete":{
        "tags":[
          "projects"
        ],
        "summary":"Erase Project",
        "description":"**Delete the project.**\n\nOptionally, if \"only_objects\" is set, the project structure is kept,\nbut emptied from any object, sample, acquisition and process.\n\nOtherwise, no trace of the project will remain in the database.\n\n**Returns** the number of  : **deleted objects**, 0, **deleated image rows** and **deleated image files**.",
        "operationId":"erase_project",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"If set, the project structure is kept, but emptied from any object, sample, acquisition and process.",
            "required":false,
            "schema":{
              "title":"Only objects",
              "type":"boolean",
              "description":"If set, the project structure is kept, but emptied from any object, sample, acquisition and process.",
              "default":false
            },
            "example":false,
            "name":"only_objects",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":[
                  100,
                  0,
                  10,
                  10
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/project_set/taxo_stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Set Get Stats",
        "description":"**Returns projects statistics**, i.e. used taxa and classification states.",
        "operationId":"project_set_get_stats",
        "parameters":[
          {
            "description":"String containing the list of one or more project id separated by non-num char. \n \n **If several ids are provided**, one stat record will be returned per project.",
            "required":true,
            "schema":{
              "title":"Ids",
              "type":"string",
              "description":"String containing the list of one or more project id separated by non-num char. \n \n **If several ids are provided**, one stat record will be returned per project."
            },
            "example":"1",
            "name":"ids",
            "in":"query"
          },
          {
            "description":"**If several taxa_ids are provided**, one stat record will be returned per requested taxa, if populated.\n \n **If taxa_ids is all**, all valued taxa in the project(s) are returned.",
            "required":false,
            "schema":{
              "title":"Taxa Ids",
              "type":"string",
              "description":"**If several taxa_ids are provided**, one stat record will be returned per requested taxa, if populated.\n \n **If taxa_ids is all**, all valued taxa in the project(s) are returned.",
              "default":""
            },
            "example":"all",
            "name":"taxa_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Set Get Stats Project Set Taxo Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectTaxoStatsModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/project_set/user_stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Set Get User Stats",
        "description":"**Returns projects user statistics**, i.e. a summary of the work done by users in the\nrequired projects.\n\nThe returned values are a detail per project, so size of input list equals size of output list.",
        "operationId":"project_set_get_user_stats",
        "parameters":[
          {
            "description":"String containing the list of one or more id separated by non-num char. \n \n **If several ids are provided**, one stat record will be returned per project.",
            "required":true,
            "schema":{
              "title":"Ids",
              "type":"string",
              "description":"String containing the list of one or more id separated by non-num char. \n \n **If several ids are provided**, one stat record will be returned per project."
            },
            "example":"1",
            "name":"ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Set Get User Stats Project Set User Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectUserStatsModel"
                  }
                },
                "example":[
                  {
                    "projid":1,
                    "annotators":[
                      {
                        "id":1267,
                        "name":"User Name"
                      }
                    ],
                    "activities":[
                      {
                        "id":1267,
                        "nb_actions":605,
                        "last_annot":"2021-09-27T13:08:54"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/project_set/column_stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Set Get Column Stats",
        "description":"**Returns projects validated data statistics**, for all named columns, in all given projects.\n\nThe free columns here are named by the alias e.g. 'area', not technical name e.g. 'n43'.\n\nThis allows getting stats on projects with different mappings, but common names.",
        "operationId":"project_set_get_column_stats",
        "parameters":[
          {
            "description":"String containing the list of one or more id separated by non-num char.",
            "required":true,
            "schema":{
              "title":"Project ids",
              "type":"string",
              "description":"String containing the list of one or more id separated by non-num char."
            },
            "example":"1400+1453",
            "name":"ids",
            "in":"query"
          },
          {
            "description":"Coma-separated prefixed columns, on which stats are needed.",
            "required":true,
            "schema":{
              "title":"Column names",
              "type":"string",
              "description":"Coma-separated prefixed columns, on which stats are needed."
            },
            "example":"fre.area,obj.depth_min,fre.nb2",
            "name":"names",
            "in":"query"
          },
          {
            "description":"Only compute stats on this number of objects per category.",
            "required":false,
            "schema":{
              "title":"Stats limit",
              "type":"integer",
              "description":"Only compute stats on this number of objects per category."
            },
            "example":5000,
            "name":"limit",
            "in":"query"
          },
          {
            "description":"String containing the Categories, one or more id separated by non-num char.",
            "required":false,
            "schema":{
              "title":"Categories for limit",
              "type":"string",
              "description":"String containing the Categories, one or more id separated by non-num char."
            },
            "example":"493,567",
            "name":"categories",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProjectSetColumnStatsModel"
                },
                "example":{
                  "proj_ids":[
                    1040,
                    4702
                  ],
                  "total":54169,
                  "columns":[
                    "fre.area",
                    "obj.depth_min"
                  ],
                  "counts":[
                    54169,
                    54169
                  ],
                  "variances":[
                    1895031198.64,
                    0.000258
                  ]
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/merge":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Merge",
        "description":"**Merge another project into this one.**\n\nIt's more a phagocytosis than a merge, as all objects from this source project will\nbe moved to the project_id above and the source project itself will be deleted.\n\nTODO: Explain a bit with it might fail (too many free columns, unique orig_ids collision)",
        "operationId":"project_merge",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"Id of the other project. All objects from this source project will be moved to the project_id above and the source project itself will be deleted.",
            "required":true,
            "schema":{
              "title":"Source project Id",
              "type":"integer",
              "description":"Id of the other project. All objects from this source project will be moved to the project_id above and the source project itself will be deleted."
            },
            "example":2,
            "name":"source_project_id",
            "in":"query"
          },
          {
            "description":"If set, then only a diagnostic of doability will be done.",
            "required":true,
            "schema":{
              "title":"Dry run",
              "type":"boolean",
              "description":"If set, then only a diagnostic of doability will be done."
            },
            "example":true,
            "name":"dry_run",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/MergeRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/check":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Check",
        "description":"**Check consistency of a project**.\n\nWith time and bugs, some consistency problems could be introduced in projects.\nThis service aims at listing them.",
        "operationId":"project_check",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Check Projects  Project Id  Check Get",
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                },
                "example":[
                  "Acquisition '765' is nested in several samples: [1234,7697]",
                  "Acquisition '766' has no associated Process "
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Stats",
        "description":"**Returns stats** for a project.\n\nThese stats will be returned as a list containing at index :\n- 0 : The **title** of the project,\n- 1 : A string containing all **freecols name and related column number**,\n\n- 2 : **\"(0):\"**\n- 3 :  **\"Total: 0 values, dup 0 values\"**\n\nThen for each acquisition a pair of strings will be added to the list :\n-  A string containing the **acquisition origin id** (the **number of objects for this acquisition**) : and then **small stats for an acquisition of a free column values inside** : [ min of values ; max of values ; distribution of the different values ; mode, i.e. freq of most frequent value]\n-  A string containing the **number of total values** and the **number of duplicates values** \"Total: ... values, dup ... values\"",
        "operationId":"project_stats",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Stats Projects  Project Id  Stats Get",
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                },
                "example":[
                  "Project name",
                  "OrderedDict([('lat_end', 'n01'), ('lon_end', 'n02')])",
                  "(0):",
                  "Total: 0 values, dup 0 values",
                  "tot_rg20180314 (1): [43.685,43.685,#1,u1],[7.3156666667,7.3156666667,#1,u1],[9357,9357,#1,u1],[231.45,231.45,#1,u1],[10.249,10.249,#1,u1],[243,243,#1,u1],[179,179,#1,u1],[255,255,#1,u1],[171.59,171.59,#1,u1],[188.42,188.42,#1,u1],[171.2,171.2,#1,u1],[188.9,188.9,#1,u1],[3557.33,3557.33,#1,u1],[3932,3932,#1,u1],[698,698,#1,u1],[373,373,#1,u1],[350,350,#1,u1],[122.1,122.1,#1,u1],[97.6,97.6,#1,u1],[67.7,67.7,#1,u1],[0.009,0.009,#1,u1],[373.3,373.3,#1,u1],[2165655,2165655,#1,u1],[232,232,#1,u1],[-0.89,-0.89,#1,u1],[1.909,1.909,#1,u1],[4.94,4.94,#1,u1],[4196,4196,#1,u1],[698,698,#1,u1],[8895,8895,#1,u1],[1.336,1.336,#1,u1],[1766,1766,#1,u1],[1.359,1.359,#1,u1],[225,225,#1,u1],[231,231,#1,u1],[237,237,#1,u1],[0,0,#1,u1],[0,0,#1,u1],[16,16,#1,u1],[26,26,#1,u1],[0,0,#1,u1],[0,0,#1,u1],[0,0,#1,u1],[0,0,#1,u1],[0,0,#1,u1],[0,0,#1,u1],[0,0,#1,u1],[19.066,19.066,#1,u1],[19.122,19.122,#1,u1],[21,21,#1,u1],[21,21,#1,u1],[1441,1441,#1,u1],[86088,86088,#1,u1],[412.756,412.756,#1,u1],[4.556,4.556,#1,u1],[1,1,#1,u1],[109.1499080169,109.1499080169,#1,u1],[1.2448979592,1.2448979592,#1,u1],[76,76,#1,u1],[-0.4489990467,-0.4489990467,#1,u1],[1.4142135624,1.4142135624,#1,u1],[4.3205875999,4.3205875999,#1,u1],[13.1578947368,13.1578947368,#1,u1],[37.7147201027,37.7147201027,#1,u1],[3.9549031764,3.9549031764,#1,u1],[9.5361930295,9.5361930295,#1,u1],[29.1557377049,29.1557377049,#1,u1],[0.0088346243,0.0088346243,#1,u1],[0.0149948464,0.0149948464,#1,u1]",
                  "Total: 69 values, dup 69 values"
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/recompute_geo":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Recompute Geography",
        "description":"**Recompute geography information** for all samples in project.\n\n**Returns NULL upon success.**\n\n🔒 The user has to be *project manager*.",
        "operationId":"project_recompute_geography",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/recompute_sunpos":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Recompute Sunpos",
        "description":"**Recompute sun position field** for all objects in project.\n\n**Returns NULL upon success.**\n\n🔒 The user has to be *project manager* on the referenced project.",
        "operationId":"project_recompute_sunpos",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/file_import/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Import File",
        "description":"**Validate or do a real import** of an EcoTaxa archive or directory.",
        "operationId":"import_file",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ImportReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ImportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/simple_import/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Simple Import",
        "description":"**Import images only**, with same metadata for all.",
        "operationId":"simple_import",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"If set, then only a diagnostic of doability will be done. In this case, plain value check. If no dry_run, this call will create a background job.",
            "required":true,
            "schema":{
              "title":"Dry run",
              "type":"boolean",
              "description":"If set, then only a diagnostic of doability will be done. In this case, plain value check. If no dry_run, this call will create a background job."
            },
            "example":true,
            "name":"dry_run",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/SimpleImportReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SimpleImportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/prediction_settings":{
      "put":{
        "tags":[
          "projects"
        ],
        "summary":"Set Project Predict Settings",
        "description":"**Update the project's prediction settings**, return **NULL upon success.**\n\n🔒 Unlike during full project update above, which needs high permissions, this entry point is accessible\nto **project annotators**, as it mirrors the prediction privileges.",
        "operationId":"set_project_predict_settings",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":4223,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"The new prediction settings.",
            "required":true,
            "schema":{
              "title":"Settings",
              "type":"string",
              "description":"The new prediction settings."
            },
            "example":"seltaxo=84963,59996,56545 baseproject=2562,2571",
            "name":"settings",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/similarity_search/{object_id}":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Object Similarity Search",
        "description":"Returns, in given project, the objects matching the filter and similar to the queried one.",
        "operationId":"get_object_set_similarity_search",
        "parameters":[
          {
            "description":"Internal, numeric id of the project to search in.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project to search in."
            },
            "example":3426,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"Object ID to search similar for.",
            "required":true,
            "schema":{
              "title":"Object Id",
              "type":"integer",
              "description":"Object ID to search similar for."
            },
            "example":1040,
            "name":"object_id",
            "in":"path"
          },
          {
            "description":"Return at maximum this number of object IDs, by default 100.",
            "required":false,
            "schema":{
              "title":"Size",
              "type":"integer",
              "description":"Return at maximum this number of object IDs, by default 100.",
              "default":100
            },
            "example":"120",
            "name":"size",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SimilaritySearchRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/samples/search":{
      "get":{
        "tags":[
          "samples"
        ],
        "summary":"Samples Search",
        "description":"**Search for samples.**",
        "operationId":"samples_search",
        "parameters":[
          {
            "description":"String containing the list of one or more project id separated by non-num char.",
            "required":true,
            "schema":{
              "title":"Project Ids",
              "type":"string",
              "description":"String containing the list of one or more project id separated by non-num char."
            },
            "example":"1,55",
            "name":"project_ids",
            "in":"query"
          },
          {
            "description":"Sample id textual pattern. Use * or '' for 'any matches'. Match is case-insensitive.",
            "required":true,
            "schema":{
              "title":"Pattern Id",
              "type":"string",
              "description":"Sample id textual pattern. Use * or '' for 'any matches'. Match is case-insensitive."
            },
            "example":"*",
            "name":"id_pattern",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Samples Search Samples Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/SampleModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/sample_set/taxo_stats":{
      "get":{
        "tags":[
          "samples"
        ],
        "summary":"Sample Set Get Stats",
        "description":"Returns **classification statistics** for each sample of the given list. One block of stats is returned for each input ID.\n\nEXPECT A SLOW RESPONSE : No cache of such information anywhere.",
        "operationId":"sample_set_get_stats",
        "parameters":[
          {
            "description":"String containing the list of one or more sample ids separated by non-num char.",
            "required":true,
            "schema":{
              "title":"Sample Ids",
              "type":"string",
              "description":"String containing the list of one or more sample ids separated by non-num char."
            },
            "example":"15,5",
            "name":"sample_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Sample Set Get Stats Sample Set Taxo Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/SampleTaxoStatsModel"
                  }
                },
                "example":[
                  {
                    "nb_dubious":56,
                    "nb_predicted":5500,
                    "nb_unclassified":0,
                    "nb_validated":1345,
                    "sample_id":192456,
                    "used_taxa":[
                      45072,
                      78418,
                      84963,
                      85011,
                      85012,
                      85078
                    ]
                  }
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/sample_set/update":{
      "post":{
        "tags":[
          "samples"
        ],
        "summary":"Update Samples",
        "description":"Do the required **update for each sample in the set.**\n\nAny non-null field in the model is written to every impacted sample.\n\n**Returns the number of updated entities.**",
        "operationId":"update_samples",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Samples Sample Set Update Post",
                  "type":"integer"
                },
                "example":1
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/sample/{sample_id}":{
      "get":{
        "tags":[
          "samples"
        ],
        "summary":"Sample Query",
        "description":"Returns **information about the sample** corresponding to the given id.",
        "operationId":"sample_query",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this sample.",
            "required":true,
            "schema":{
              "title":"Sample Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this sample."
            },
            "example":1,
            "name":"sample_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SampleModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/acquisitions/search":{
      "get":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Acquisitions Search",
        "description":"Returns the **list of all acquisitions for a given project**.",
        "operationId":"acquisitions_search",
        "parameters":[
          {
            "description":"The project id.",
            "required":true,
            "schema":{
              "title":"Project id",
              "type":"integer",
              "description":"The project id."
            },
            "example":1,
            "name":"project_id",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Acquisitions Search Acquisitions Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/AcquisitionModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/acquisition_set/update":{
      "post":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Update Acquisitions",
        "description":"Do the required **update for each acquisition in the set**.\n\n**Return the number of updated entities.**",
        "operationId":"update_acquisitions",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Acquisitions Acquisition Set Update Post",
                  "type":"integer"
                },
                "example":2
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/acquisition/{acquisition_id}":{
      "get":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Acquisition Query",
        "description":"Returns **information about the acquisition** corresponding to the given id.",
        "operationId":"acquisition_query",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this acquisition.",
            "required":true,
            "schema":{
              "title":"Acquisition Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this acquisition."
            },
            "example":1,
            "name":"acquisition_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/AcquisitionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/instruments/":{
      "get":{
        "tags":[
          "instruments"
        ],
        "summary":"Instrument Query",
        "description":"Returns the list of instruments, inside specific project(s) or globally.",
        "operationId":"instrument_query",
        "parameters":[
          {
            "description":"String containing the list of one or more project ids, separated by non-num char, or 'all' for all instruments.",
            "required":true,
            "schema":{
              "title":"Projects ids",
              "type":"string",
              "description":"String containing the list of one or more project ids, separated by non-num char, or 'all' for all instruments."
            },
            "example":"1,2,3",
            "name":"project_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Instrument Query Instruments  Get",
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                },
                "example":[
                  "uvp5",
                  "zooscan"
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process_set/update":{
      "post":{
        "tags":[
          "processes"
        ],
        "summary":"Update Processes",
        "description":"Do the required **update for each process in the set.**\n\n**Returns the number of updated entities.**",
        "operationId":"update_processes",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Processes Process Set Update Post",
                  "type":"integer"
                },
                "example":1
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/process/{process_id}":{
      "get":{
        "tags":[
          "processes"
        ],
        "summary":"Process Query",
        "description":"Returns **information about the process** corresponding to the given id.",
        "operationId":"process_query",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this process.",
            "required":true,
            "schema":{
              "title":"Process Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this process."
            },
            "example":1,
            "name":"process_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProcessModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/query":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Get Object Set",
        "description":"Returns **filtered object Ids** for the given project.",
        "operationId":"get_object_set",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"\n\nSpecify the needed object (and ancillary entities) fields.\n\nIt follows the naming convention 'prefix.field' : Prefix is either 'obj' for main object, 'fre' for free fields, 'img' for the visible image.\n\nThe column obj.imgcount contains the total count of images for the object.\n\nUse a comma to separate fields.\n\n💡 More help :\n\nYou can get the field labels by parsing the classiffieldlist returned by a call to https://ecotaxa.obs-vlfr.fr/api/docs#/projects/project_query_projects__project_id__get.\n\n**Note that the following fields must be prefixed with the header \"obj.\"** (for example → obj.orig_id):\n\nacquisid classif_auto_id, classif_auto_score, classif_auto_when, classif_crossvalidation_id,\nclassif_id, classif_qual, classif_who, classif_when, complement_info, depth_max, depth_min,\nlatitude, longitude, objdate, object_link, objid, objtime, orig_id, random_value, similarity, sunpos.\n\n**Note that the following fields must be prefixed with the header \"img.\"** (for example → img.file_name):\n\nfile_name, height, imgid, imgrank, file_name, objid, orig_file_name, thumb_file_name, thumb_height, thumb_width, width.\n\n**Note that the following fields must be prefixed with the header \"txo.\"** (for example → txo.display_name):\n\ncreation_datetime, creator_email, display_name, id, id_instance, id_source, lastupdate_datetime,\nname, nbrobj, nbrobjcum, parent_id, rename_to, source_desc, source_url, taxostatus, taxotype.\n\n**All other fields must be prefixed by the header \"fre.\"** (for example → fre.circ.).\n                   ",
            "required":false,
            "schema":{
              "title":"Fields",
              "type":"string",
              "description":"\n\nSpecify the needed object (and ancillary entities) fields.\n\nIt follows the naming convention 'prefix.field' : Prefix is either 'obj' for main object, 'fre' for free fields, 'img' for the visible image.\n\nThe column obj.imgcount contains the total count of images for the object.\n\nUse a comma to separate fields.\n\n💡 More help :\n\nYou can get the field labels by parsing the classiffieldlist returned by a call to https://ecotaxa.obs-vlfr.fr/api/docs#/projects/project_query_projects__project_id__get.\n\n**Note that the following fields must be prefixed with the header \"obj.\"** (for example → obj.orig_id):\n\nacquisid classif_auto_id, classif_auto_score, classif_auto_when, classif_crossvalidation_id,\nclassif_id, classif_qual, classif_who, classif_when, complement_info, depth_max, depth_min,\nlatitude, longitude, objdate, object_link, objid, objtime, orig_id, random_value, similarity, sunpos.\n\n**Note that the following fields must be prefixed with the header \"img.\"** (for example → img.file_name):\n\nfile_name, height, imgid, imgrank, file_name, objid, orig_file_name, thumb_file_name, thumb_height, thumb_width, width.\n\n**Note that the following fields must be prefixed with the header \"txo.\"** (for example → txo.display_name):\n\ncreation_datetime, creator_email, display_name, id, id_instance, id_source, lastupdate_datetime,\nname, nbrobj, nbrobjcum, parent_id, rename_to, source_desc, source_url, taxostatus, taxotype.\n\n**All other fields must be prefixed by the header \"fre.\"** (for example → fre.circ.).\n                   "
            },
            "example":"obj.longitude,fre.feret",
            "name":"fields",
            "in":"query"
          },
          {
            "description":"Order the result using given field. If prefixed with \"-\" then it will be reversed. When using *special syntax ss-Innnn*, the order is similarity with given (by its ID) object.",
            "required":false,
            "schema":{
              "title":"Order field",
              "type":"string",
              "description":"Order the result using given field. If prefixed with \"-\" then it will be reversed. When using *special syntax ss-Innnn*, the order is similarity with given (by its ID) object."
            },
            "example":"obj.longitude",
            "name":"order_field",
            "in":"query"
          },
          {
            "description":"\nAllows to return only a slice of the result, by skipping window_start objects before returning data.\nIf no **unique order** is specified, the result can vary for same call and conditions.",
            "required":false,
            "schema":{
              "title":"Window start",
              "type":"integer",
              "description":"\nAllows to return only a slice of the result, by skipping window_start objects before returning data.\nIf no **unique order** is specified, the result can vary for same call and conditions."
            },
            "example":"10",
            "name":"window_start",
            "in":"query"
          },
          {
            "description":"\nAllows to return only a slice of the result, by returning a _maximum_ of window_size lines.\nIf no **unique order** is specified, the result can vary for same call and conditions.",
            "required":false,
            "schema":{
              "title":"Window size",
              "type":"integer",
              "description":"\nAllows to return only a slice of the result, by returning a _maximum_ of window_size lines.\nIf no **unique order** is specified, the result can vary for same call and conditions."
            },
            "example":"100",
            "name":"window_size",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetQueryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/summary":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Get Object Set Summary",
        "description":"For the given project, with given filters, **return the classification summary**.\n\ni.e.:\n\n- Total number of objects\n\nAnd optionally\n\n- Number of Validated ones\n- Number of Dubious ones\n- Number of Predicted ones",
        "operationId":"get_object_set_summary",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"If True, returns only the **Total number of objects**. Else returns also the **Number of validated ones**, the **number of Dubious ones** and the number of **predicted ones**.",
            "required":true,
            "schema":{
              "title":"Only total",
              "type":"boolean",
              "description":"If True, returns only the **Total number of objects**. Else returns also the **Number of validated ones**, the **number of Dubious ones** and the number of **predicted ones**."
            },
            "name":"only_total",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetSummaryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/reset_to_predicted":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Force Object Set To Predicted",
        "description":"**Force to Predicted** all objects for the given project with the filters.\n\nReturn **NULL upon success.**",
        "operationId":"reset_object_set_to_predicted",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/revert_to_history":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Revert Object Set To History",
        "description":"**Revert all objects for the given project**, with the filters, to the target.",
        "operationId":"revert_object_set_to_history",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"If set, then no real write but consequences of the revert will be replied.",
            "required":true,
            "schema":{
              "title":"Dry run",
              "type":"boolean",
              "description":"If set, then no real write but consequences of the revert will be replied."
            },
            "example":false,
            "name":"dry_run",
            "in":"query"
          },
          {
            "description":"Use null/None for reverting using the last annotation from anyone, or a user id for the last annotation from this user.",
            "required":false,
            "schema":{
              "title":"Target",
              "type":"integer",
              "description":"Use null/None for reverting using the last annotation from anyone, or a user id for the last annotation from this user."
            },
            "example":465,
            "name":"target",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetRevertToHistoryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/reclassify":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Reclassify Object Set",
        "description":"Regardless of present classification or state, **set the new classification for this object set.**\n\nIf the filter designates \"all with given classification\", add a TaxonomyChangeLog entry.\n\n**Returns the number of affected objects.**",
        "operationId":"reclassify_object_set",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"The new classification Id.",
            "required":true,
            "schema":{
              "title":"Forced Id",
              "type":"integer",
              "description":"The new classification Id."
            },
            "example":23025,
            "name":"forced_id",
            "in":"query"
          },
          {
            "description":"The reason of this new classification.",
            "required":true,
            "schema":{
              "title":"Reason",
              "type":"string",
              "description":"The reason of this new classification."
            },
            "example":"W",
            "name":"reason",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Reclassify Object Set Object Set  Project Id  Reclassify Post",
                  "type":"integer"
                },
                "example":298
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/update":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Update Object Set",
        "description":"Do the required **update for each objects in the set.**\n\n**Returns the number of updated entities.**\n\n🔒 Current user needs *Manage* right on all projects of specified objects.",
        "operationId":"update_object_set",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Object Set Object Set Update Post",
                  "type":"integer"
                },
                "example":2
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/classify":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Classify Object Set",
        "description":"**Change classification and/or qualification for a set of objects.**\n\n**Returns the number of updated entities.**\n\n🔒 Current user needs at *least Annotate* right on all projects of specified objects.",
        "operationId":"classify_object_set",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ClassifyReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Classify Object Set Object Set Classify Post",
                  "type":"integer"
                },
                "example":3
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/classify_auto":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Classify Auto Object Set",
        "description":"**Set automatic classification** of a set of objects.\n\n**Returns the number of updated entities.**",
        "operationId":"classify_auto_object_set",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ClassifyAutoReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Classify Auto Object Set Object Set Classify Auto Post",
                  "type":"integer"
                },
                "example":3
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/classify_auto_multiple":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Classify Auto Mult Object Set",
        "description":"**Set automatic classification** of a set of objects.\n\n**Returns the number of updated entities.**",
        "operationId":"classify_auto_mult_object_set",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ClassifyAutoReqMult"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Classify Auto Mult Object Set Object Set Classify Auto Multiple Post",
                  "type":"integer"
                },
                "example":3
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/parents":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Query Object Set Parents",
        "description":"**Return object ids, with parent ones and projects** for the objects in given list.",
        "operationId":"query_object_set_parents",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Object IDs list",
                "type":"array",
                "items":{
                  "type":"integer"
                },
                "description":"The list of object ids."
              },
              "example":[
                634509,
                6234516,
                976544
              ]
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetQueryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/export":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Export Object Set",
        "description":"⚠️ Deprecated, see general, summary and backup exports for alternatives.\n\nStart an export job for the given object set and options.\n\n🔒 Current user needs *at least Read* right on the requested project.",
        "operationId":"export_object_set",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/Body_export_object_set_object_set_export_post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ExportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/export/general":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Export Object Set General",
        "description":"Start a general-purpose export job for the given object set and options.\n\n🔒 Current user needs *at least Read* right on the requested project.",
        "operationId":"export_object_set_general",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/Body_export_object_set_general_object_set_export_general_post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ExportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/export/summary":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Export Object Set Summary",
        "description":"Start a summary export job for the given object set and options.\n\n🔒 Current user needs *at least Read* right on the requested project.",
        "operationId":"export_object_set_summary",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/Body_export_object_set_summary_object_set_export_summary_post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ExportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/export/backup":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Export Object Set Backup",
        "description":"Start a backup export job for the given object set and options.\nIf filters are empty, the produced zip will contain the full project.\n\n🔒 Current user needs *at least Read* right on the requested project.",
        "operationId":"export_object_set_backup",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/Body_export_object_set_backup_object_set_export_backup_post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ExportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/predict":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Predict Object Set",
        "description":"**Start a prediction** AKA automatic classification for the given object set and options.",
        "operationId":"predict_object_set",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/Body_predict_object_set_object_set_predict_post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/PredictionRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/predictions":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Query Object Set Predictions",
        "description":"** Return last prediction information for a set of objects, by their IDs.",
        "operationId":"object_set_predictions",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Object IDs list",
                "type":"array",
                "items":{
                  "type":"integer"
                },
                "description":"The list of object ids."
              },
              "example":[
                634509,
                6234516,
                976544
              ]
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/PredictionInfoRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/":{
      "delete":{
        "tags":[
          "objects"
        ],
        "summary":"Erase Object Set",
        "description":"**Delete the objects with given object ids.**\n\n**Returns** the number of  : **deleted objects**, 0, **deleated image rows** and **deleated image files**.\n\n🔒 Current user needs *Manage* right on all projects of specified objects.",
        "operationId":"erase_object_set",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Object IDs list",
                "type":"array",
                "items":{
                  "type":"integer"
                },
                "description":"The list of object ids."
              },
              "example":[
                634509,
                6234516,
                976544
              ]
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":[
                  100,
                  0,
                  10,
                  10
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object/{object_id}":{
      "get":{
        "tags":[
          "object"
        ],
        "summary":"Object Query",
        "description":"Returns **information about the object** corresponding to the given id.\n\n🔒 Anonymous reader can do if the project has the right rights :)",
        "operationId":"object_query",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this object.",
            "required":true,
            "schema":{
              "title":"Object Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this object."
            },
            "example":1,
            "name":"object_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object/{object_id}/history":{
      "get":{
        "tags":[
          "object"
        ],
        "summary":"Object Query History",
        "description":"Returns **information about the object's history** corresponding to the given id.",
        "operationId":"object_query_history",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this object.",
            "required":true,
            "schema":{
              "title":"Object Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this object."
            },
            "example":1,
            "name":"object_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Object Query History Object  Object Id  History Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/HistoricalClassification"
                  }
                },
                "example":[
                  {
                    "objid":264409236,
                    "classif_id":82399,
                    "classif_date":"2021-09-21T14:59:01.007110",
                    "classif_who":"null",
                    "classif_type":"A",
                    "classif_qual":"P",
                    "classif_score":0.085,
                    "user_name":"null",
                    "taxon_name":"Penilia avirostris"
                  },
                  {
                    "objid":264409236,
                    "classif_id":25828,
                    "classif_date":"2021-09-29T08:25:37.968095",
                    "classif_who":1267,
                    "classif_type":"M",
                    "classif_qual":"V",
                    "classif_score":"null",
                    "user_name":"User name",
                    "taxon_name":"Copepoda"
                  }
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Root Taxa",
        "description":"**Return all taxa with no parent.**",
        "operationId":"query_root_taxa",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Root Taxa Taxa Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxa/status":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Taxa Tree Status",
        "description":"**Return the status of taxonomy tree** w/r to freshness.",
        "operationId":"taxa_tree_status",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/TaxonomyTreeStatus"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa/reclassification_stats":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Reclassif Stats",
        "description":"Dig into reclassification logs and, for each input category id, **determine the most chosen target category,\nexcluding the advised one.**\n\nBy convention, if nothing relevant is found, the input category itself is returned. So one can expect\nthat the returned list has the same size as the required one.",
        "operationId":"reclassif_stats",
        "parameters":[
          {
            "description":"String containing the list of one or more taxa id separated by non-num char.",
            "required":true,
            "schema":{
              "title":"Taxa ids",
              "type":"string",
              "description":"String containing the list of one or more taxa id separated by non-num char."
            },
            "example":"12876",
            "name":"taxa_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Reclassif Stats Taxa Reclassification Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonModel"
                  }
                },
                "example":[
                  {
                    "id":12876,
                    "renm_id":{},
                    "name":"Echinodermata X",
                    "type":"P",
                    "nb_objects":24,
                    "nb_children_objects":759,
                    "display_name":"Echinodermata X",
                    "lineage":[
                      "Echinodermata X",
                      "Echinodermata",
                      "Metazoa",
                      "Holozoa",
                      "Opisthokonta",
                      "Eukaryota",
                      "living"
                    ],
                    "id_lineage":[
                      12876,
                      11509,
                      2367,
                      382,
                      8,
                      2,
                      1
                    ],
                    "children":[
                      16710
                    ]
                  }
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa/reclassification_history/{project_id}":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Reclassif Project Stats",
        "description":"Dig into reclassification logs and **return the associations (source → target) for previous reclassifications.**",
        "operationId":"reclassif_project_stats",
        "parameters":[
          {
            "description":"Internal, numeric id of the project.",
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Reclassif Project Stats Taxa Reclassification History  Project Id  Get",
                  "type":"array",
                  "items":{
                    "type":"object"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon/{taxon_id}":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Taxa",
        "description":"Returns **information about the taxon** corresponding to the given id, including its lineage.",
        "operationId":"query_taxa",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this taxon.",
            "required":true,
            "schema":{
              "title":"Taxon Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this taxon."
            },
            "example":12876,
            "name":"taxon_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/TaxonModel"
                },
                "example":{
                  "id":12876,
                  "renm_id":{},
                  "name":"Echinodermata X",
                  "type":"P",
                  "nb_objects":24,
                  "nb_children_objects":759,
                  "display_name":"Echinodermata X",
                  "lineage":[
                    "Echinodermata X",
                    "Echinodermata",
                    "Metazoa",
                    "Holozoa",
                    "Opisthokonta",
                    "Eukaryota",
                    "living"
                  ],
                  "id_lineage":[
                    12876,
                    11509,
                    2367,
                    382,
                    8,
                    2,
                    1
                  ],
                  "children":[
                    16710
                  ]
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon/{taxon_id}/usage":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Taxa Usage",
        "description":"**Where a given taxon is used.**\n\nOnly validated uses are returned.",
        "operationId":"query_taxa_usage",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this taxon.",
            "required":true,
            "schema":{
              "title":"Taxon Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this taxon."
            },
            "example":12876,
            "name":"taxon_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Taxa Usage Taxon  Taxon Id  Usage Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonUsageModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon_set/search":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Search Taxa",
        "description":"**Search for taxa by name.**\n\nQueries can be 'small', i.e. of length ﹤3 and even zero-length.\n\n🔓 For a public, unauthenticated call :\n- zero-length and small queries always return nothing.\n- otherwise, a full search is done and results are returned in alphabetical order.\n\n🔒 For an authenticated call :\n- zero-length queries: return the MRU list in full.\n- small queries: the MRU list is searched, so that taxa in the recent list are returned, if matching.\n- otherwise, a full search is done. Results are ordered so that taxa in the project list are in first,\n    and are signalled as such in the response.",
        "operationId":"search_taxa",
        "parameters":[
          {
            "description":"Use this query for matching returned taxa names.",
            "required":true,
            "schema":{
              "title":"Query",
              "type":"string",
              "description":"Use this query for matching returned taxa names."
            },
            "example":"Ban",
            "name":"query",
            "in":"query"
          },
          {
            "description":"Internal, numeric id of the project.",
            "required":false,
            "schema":{
              "title":"Project Id",
              "type":"integer",
              "description":"Internal, numeric id of the project."
            },
            "example":1,
            "name":"project_id",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Taxa Taxon Set Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxaSearchRsp"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon_set/query":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Taxa Set",
        "description":"Returns **information about several taxa**, including their lineage.",
        "operationId":"query_taxa_set",
        "parameters":[
          {
            "description":"The separator between numbers is arbitrary non-digit, e.g. ':', '|' or ','.",
            "required":true,
            "schema":{
              "title":"Ids",
              "type":"string",
              "description":"The separator between numbers is arbitrary non-digit, e.g. ':', '|' or ','."
            },
            "example":"1:2:3",
            "name":"ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Taxa Set Taxon Set Query Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon/central/{taxon_id}":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Get Taxon In Central",
        "description":"Return **EcoTaxoServer full record for this taxon**.",
        "operationId":"get_taxon_in_central",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this taxon.",
            "required":true,
            "schema":{
              "title":"Taxon Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this taxon."
            },
            "example":12876,
            "name":"taxon_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Taxon In Central Taxon Central  Taxon Id  Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonCentral"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon/central":{
      "put":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Add Taxon In Central",
        "description":"**Create a taxon** on EcoTaxoServer.\n\n🔒 Logged user must be manager (on any project) or application admin.",
        "operationId":"add_taxon_in_central",
        "parameters":[
          {
            "description":"The taxon/category verbatim name.",
            "required":true,
            "schema":{
              "title":"Name",
              "type":"string",
              "description":"The taxon/category verbatim name."
            },
            "example":"Echinodermata",
            "name":"name",
            "in":"query"
          },
          {
            "description":"It's not possible to create a root taxon.",
            "required":true,
            "schema":{
              "title":"Parent Id",
              "type":"integer",
              "description":"It's not possible to create a root taxon."
            },
            "example":2367,
            "name":"parent_id",
            "in":"query"
          },
          {
            "description":"The taxon type, 'M' for Morpho or 'P' for Phylo.",
            "required":true,
            "schema":{
              "title":"Taxo Type",
              "type":"string",
              "description":"The taxon type, 'M' for Morpho or 'P' for Phylo."
            },
            "example":"P",
            "name":"taxotype",
            "in":"query"
          },
          {
            "description":"The email of the taxo creator.",
            "required":true,
            "schema":{
              "title":"Creator email",
              "type":"string",
              "description":"The email of the taxo creator."
            },
            "example":"user.creator@email.com",
            "name":"creator_email",
            "in":"query"
          },
          {
            "description":"The source description.",
            "required":false,
            "schema":{
              "title":"Source desc",
              "type":"string",
              "description":"The source description."
            },
            "example":"null",
            "name":"source_desc",
            "in":"query"
          },
          {
            "description":"The source url.",
            "required":false,
            "schema":{
              "title":"Source url",
              "type":"string",
              "description":"The source url."
            },
            "example":"http://www.google.fr/",
            "name":"source_url",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa/stats/push_to_central":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Push Taxa Stats In Central",
        "description":"**Push present instance stats**, into EcoTaxoServer.",
        "operationId":"push_taxa_stats_in_central",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa/pull_from_central":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Pull Taxa Update From Central",
        "description":"**Returns what changed in EcoTaxoServer managed tree** and update local tree accordingly.\n\ni.e. : the number of inserts as nbr_inserts, updates as nbr_updates and errors as errors.",
        "operationId":"pull_taxa_update_from_central",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/admin/db/query":{
      "get":{
        "tags":[
          "admin"
        ],
        "summary":"Direct Db Query",
        "description":"For making selects on the DB.\n🔒 Admin only.",
        "operationId":"db_direct_query",
        "parameters":[
          {
            "description":"The SQL to execute.",
            "required":true,
            "schema":{
              "title":"Query",
              "type":"string",
              "description":"The SQL to execute."
            },
            "example":"select count(1) from objects",
            "name":"q",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"List Jobs",
        "description":"**Return the jobs** for current user, or all of them if admin is asked for.",
        "operationId":"list_jobs",
        "parameters":[
          {
            "description":"If FALSE return the jobs for current user, else return all of them.",
            "required":true,
            "schema":{
              "title":"For admin",
              "type":"boolean",
              "description":"If FALSE return the jobs for current user, else return all of them."
            },
            "example":false,
            "name":"for_admin",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response List Jobs Jobs  Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/JobModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"Get Job",
        "description":"Returns **information about the job** corresponding to the given id.",
        "operationId":"get_job",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this job.",
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this job."
            },
            "example":47445,
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/JobModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/answer":{
      "post":{
        "tags":[
          "jobs"
        ],
        "summary":"Reply Job Question",
        "description":"**Send answers to last question.** The job resumes after it receives the reply.\n\nReturn **NULL upon success.**\n\n*Note: It's only about data storage here.*\n\n\nIf the data is technically NOK e.g. not a JS object, standard 422 error should be thrown.\n\nIf the data is incorrect from consistency point of view, the job will return in Asking state.",
        "operationId":"reply_job_question",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this job.",
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this job."
            },
            "example":47445,
            "name":"job_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Reply job question",
                "type":"object",
                "default":{}
              }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/restart":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"Restart Job",
        "description":"**Restart the job related to the given id.**\n\nReturn **NULL upon success.**\n\n🔒 The job must be in a restartable state, and be accessible to current user.",
        "operationId":"restart_job",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this job.",
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this job."
            },
            "example":47445,
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/log":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"Get Job Log File",
        "description":"**Return the log file produced by given job.**\n\n🔒 The job must be accessible to current user.",
        "operationId":"get_job_log_file",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this job.",
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this job."
            },
            "example":47445,
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/file":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"Get Job File",
        "description":"**Return the file produced by given job.**\n\n🔒 The job must be accessible to current user.",
        "operationId":"get_job_file",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this job.",
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this job."
            },
            "example":47445,
            "name":"job_id",
            "in":"path"
          },
          {
            "required":false,
            "schema":{
              "title":"Range",
              "type":"string"
            },
            "name":"Range",
            "in":"header"
          }
        ],
        "responses":{
          "200":{
            "description":"Return the produced file.",
            "content":{
              "application/json":{
                "schema":{}
              },
              "application/zip":{},
              "text/tab-separated-values":{}
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}":{
      "delete":{
        "tags":[
          "jobs"
        ],
        "summary":"Erase Job",
        "description":"**Delete the job** from DB, with associated storage.\n\nReturn **NULL upon success.**\n\nIf the job is running then kill it.\n\n🔒 The job must be accessible to current user.",
        "operationId":"erase_job",
        "parameters":[
          {
            "description":"Internal, the unique numeric id of this job.",
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer",
              "description":"Internal, the unique numeric id of this job."
            },
            "example":47445,
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/my_files/{sub_path}":{
      "get":{
        "tags":[
          "Files"
        ],
        "summary":"List User Files",
        "description":"**List the private files** which are usable for some file-related operations.\nA sub_path starting with \"/\" is considered relative to user folder.\n\n*e.g. import.*",
        "operationId":"list_user_files",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Sub Path",
              "type":"string"
            },
            "name":"sub_path",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/DirectoryModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/my_files/":{
      "post":{
        "tags":[
          "Files"
        ],
        "summary":"Put User File",
        "description":"**Upload a file for the current user.**\n\nThe returned text will contain a server-side path which is usable for some file-related operations.\n\n*e.g. import.*",
        "operationId":"post_user_file",
        "requestBody":{
          "content":{
            "multipart/form-data":{
              "schema":{
                "$ref":"#/components/schemas/Body_put_user_file_my_files__post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Put User File My Files  Post",
                  "type":"string"
                },
                "example":"/ftp_plankton/Ecotaxa_Data_to_import/uploadedFile.zip"
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/common_files/":{
      "get":{
        "tags":[
          "Files"
        ],
        "summary":"List Common Files",
        "description":"**List the common files** which are usable for some file-related operations.\n\n*e.g. import.*",
        "operationId":"list_common_files",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"path",
              "type":"string"
            },
            "example":"/ftp_plankton/Ecotaxa_Exported_data",
            "name":"path",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/DirectoryModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/user_files/{sub_path}":{
      "get":{
        "tags":[
          "Myfiles"
        ],
        "summary":"List My Files",
        "description":"**List the private files** from user files directory  which are usable for some file-related operations.\nA sub_path starting with \"/\" is considered relative to user folder.\n\n*e.g. import.*",
        "operationId":"list_my_files",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Sub Path",
              "type":"string"
            },
            "name":"sub_path",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/DirectoryModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/user_files/":{
      "post":{
        "tags":[
          "Myfiles"
        ],
        "summary":"Put My File",
        "description":"**Upload a file for the current user files directory.**\n\nThe returned text will contain a server-side path which is usable for some file-related operations.\n\n*e.g. import.*",
        "operationId":"post_my_file",
        "requestBody":{
          "content":{
            "multipart/form-data":{
              "schema":{
                "$ref":"#/components/schemas/Body_put_my_file_user_files__post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Put My File User Files  Post",
                  "type":"string"
                },
                "example":"/ftp_plankton/Ecotaxa_Data_to_import/uploadedFile.zip"
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/user_files/mv/":{
      "post":{
        "tags":[
          "Myfiles"
        ],
        "summary":"Move File",
        "description":"**Move (or rename depending on source and dest path) a file or directory in the current user files directory.**\nThe returned text will contain a server-side path which is usable for some file-related operations.",
        "operationId":"move_my_file",
        "requestBody":{
          "content":{
            "application/x-www-form-urlencoded":{
              "schema":{
                "$ref":"#/components/schemas/Body_move_file_user_files_mv__post"
              }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Move File User Files Mv  Post",
                  "type":"string"
                },
                "example":"/ftp_plankton/Ecotaxa_Data_to_import/uploadedFile.zip"
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/user_files/rm/":{
      "post":{
        "tags":[
          "Myfiles"
        ],
        "summary":"Remove File",
        "description":"**Remove a file, or directory in the current user files directory.**",
        "operationId":"remove_my_file",
        "requestBody":{
          "content":{
            "application/x-www-form-urlencoded":{
              "schema":{
                "$ref":"#/components/schemas/Body_remove_file_user_files_rm__post"
              }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Remove File User Files Rm  Post",
                  "type":"integer"
                },
                "example":0
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/user_files/create/":{
      "post":{
        "tags":[
          "Myfiles"
        ],
        "summary":"Create File",
        "description":"**Create a new file or directory in the current user files directory.**\nThe returned text will contain a server-side path which is usable for some file-related operations.",
        "operationId":"create_my_file",
        "requestBody":{
          "content":{
            "application/x-www-form-urlencoded":{
              "schema":{
                "$ref":"#/components/schemas/Body_create_file_user_files_create__post"
              }
            }
          }
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Create File User Files Create  Post",
                  "type":"string"
                },
                "example":"/ftp_plankton/Ecotaxa_Data_to_import/uploadedFile.zip"
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/status":{
      "get":{
        "tags":[
          "WIP"
        ],
        "summary":"System Status",
        "description":"**Report the status**, mainly used for verifying that the server is up.\nDepending on provided credentials, you get more or less information.",
        "operationId":"system_status",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":"Config dump:\n  secret_key: *************\n  db_user: postgres\n  db_password: *************\n  db_host: localhost\n  db_port: 5432\n  db_database: ecotaxa\n  ro_db_user: readerole\n  ro_db_password: *************\n  ro_db_host: localhost\n  ro_db_port: 5432\n  ro_db_database: ecotaxa\n  db_toolsdir: /usr/bin\n  sqlalchemy_database_uri: postgresql+psycopg2://+DB_USER+:+DB_PASSWORD+@+DB_HOST+/+DB_DATABASE+?application_name=ecotaxasqla\n  sqlalchemy_echo: False\n  sqlalchemy_pool_size: 50\n  security_password_hash: *************\n  security_password_salt: *************\n  security_changeable: True\n  security_post_change_view: /\n  security_send_password_change_email: *************\n  appmanager_email: marc.picheral@obs-vlfr.fr\n  appmanager_name: Marc Picheral\n  username: 'admin'\n  password: *************\n  thumbsizelimit: 400\n  serverloadarea: '/plankton_rw'\n  pythonexecutable: /home/ecotaxa/venv_ecotaxa/bin/python3\n  serverurl: https://ecotaxa.obs-vlfr.fr\n  part_default_visible_delay: 2\n  part_default_general_export_delay: 24\n  part_default_plankton_export_delay: 36\n  google_analytics_id: UA-100751107-1\n  recaptchaid: 6LcNbXgUAAAAAN683bG-gWlXDhZFyMBePp-SM6t8\n  recaptchasecret: *************\n  scn_enabled: True\n  scn_binary: /home/ecotaxa/ecotaxa/SCN_networks/ecotaxa\n  ftpexportarea: '/plankton_rw/ftp_plankton/Ecotaxa_Exported_data'\n  taxoserver_url: http://ecotaxoserver.obs-vlfr.fr\n  taxoserver_instance_id: 1\n  taxoserver_shared_secret: *************\nPaths:\n  /plankton_rw (from serverloadarea): OK\n  /plankton_rw/ftp_plankton/Ecotaxa_Exported_data (from ftpexportarea): OK"
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/error":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"System Error",
        "description":"**Return a 500 internal error**, on purpose so the stack trace is visible and client\ncan see what it gives.",
        "operationId":"system_error",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/noop":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"Do Nothing",
        "description":"**This entry point will just do nothing.**\n\nIt's also used for exporting models we need on client side.",
        "operationId":"do_nothing",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Do Nothing Noop Get",
                  "anyOf":[
                    {
                      "$ref":"#/components/schemas/ObjectHeaderModel"
                    },
                    {
                      "$ref":"#/components/schemas/HistoricalClassification"
                    }
                  ]
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/constants":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"Used Constants",
        "description":"**Return useful strings for user dialog.**\n\nNow also used for values extracted from Config.",
        "operationId":"used_constants",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Constants"
                }
              }
            }
          }
        }
      }
    },
    "/ml_models":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"Query Ml Models",
        "description":"**Return the list of machine learning models, which can be used for extracting image features.**",
        "operationId":"query_ml_models",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Ml Models Ml Models Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/MLModel"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components":{
    "schemas":{
      "AcquisitionModel":{
        "title":"AcquisitionModel",
        "required":[
          "acquisid",
          "acq_sample_id",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "acquisid":{
            "title":"Acquisition Id",
            "type":"integer",
            "description":"The acquisition Id.",
            "example":144
          },
          "acq_sample_id":{
            "title":"Acquisition sample Id",
            "type":"integer",
            "description":"The acquisition sample Id.",
            "example":1039
          },
          "orig_id":{
            "title":"Original id",
            "type":"string",
            "description":"Original acquisition ID from initial TSV load.",
            "example":"uvp5_station1_cast1b"
          },
          "instrument":{
            "title":"Instrument",
            "type":"string",
            "description":"Instrument used.",
            "example":"uvp5"
          },
          "free_columns":{
            "title":"Free columns",
            "type":"object",
            "description":"Free columns from acquisition mapping in project.",
            "default":{},
            "example":{
              "bottomdepth":322,
              "ship":"suroit"
            }
          }
        }
      },
      "BackupExportReq":{
        "title":"Backup Export request Model",
        "required":[
          "project_id"
        ],
        "type":"object",
        "properties":{
          "project_id":{
            "title":"Project Id",
            "type":"integer",
            "description":"The project to export.",
            "example":1
          },
          "out_to_ftp":{
            "title":"Out to ftp",
            "type":"boolean",
            "description":"Copy result file to FTP area. Original file is still available.",
            "default":false,
            "example":false
          }
        },
        "description":"Backup export request."
      },
      "Body_create_file_user_files_create__post":{
        "title":"Body_create_file_user_files_create__post",
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Source Path",
            "type":"string",
            "description":"The client-side full path of the file or directory to be moved."
          }
        }
      },
      "Body_export_object_set_backup_object_set_export_backup_post":{
        "title":"Body_export_object_set_backup_object_set_export_backup_post",
        "required":[
          "filters",
          "request"
        ],
        "type":"object",
        "properties":{
          "filters":{
            "$ref":"#/components/schemas/ProjectFilters"
          },
          "request":{
            "$ref":"#/components/schemas/BackupExportReq"
          }
        }
      },
      "Body_export_object_set_general_object_set_export_general_post":{
        "title":"Body_export_object_set_general_object_set_export_general_post",
        "required":[
          "filters",
          "request"
        ],
        "type":"object",
        "properties":{
          "filters":{
            "$ref":"#/components/schemas/ProjectFilters"
          },
          "request":{
            "$ref":"#/components/schemas/GeneralExportReq"
          }
        }
      },
      "Body_export_object_set_object_set_export_post":{
        "title":"Body_export_object_set_object_set_export_post",
        "required":[
          "filters",
          "request"
        ],
        "type":"object",
        "properties":{
          "filters":{
            "$ref":"#/components/schemas/ProjectFilters"
          },
          "request":{
            "title":"Request",
            "allOf":[
              {
                "$ref":"#/components/schemas/ExportReq"
              }
            ],
            "deprecated":true
          }
        }
      },
      "Body_export_object_set_summary_object_set_export_summary_post":{
        "title":"Body_export_object_set_summary_object_set_export_summary_post",
        "required":[
          "filters",
          "request"
        ],
        "type":"object",
        "properties":{
          "filters":{
            "$ref":"#/components/schemas/ProjectFilters"
          },
          "request":{
            "$ref":"#/components/schemas/SummaryExportReq"
          }
        }
      },
      "Body_move_file_user_files_mv__post":{
        "title":"Body_move_file_user_files_mv__post",
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Source Path",
            "type":"string",
            "description":"The client-side full path of the file or directory to be moved."
          },
          "dest_path":{
            "title":"Destination Path",
            "type":"string",
            "description":"The client-side full path of the destination file or directory."
          }
        }
      },
      "Body_predict_object_set_object_set_predict_post":{
        "title":"Body_predict_object_set_object_set_predict_post",
        "required":[
          "filters",
          "request"
        ],
        "type":"object",
        "properties":{
          "filters":{
            "$ref":"#/components/schemas/ProjectFilters"
          },
          "request":{
            "$ref":"#/components/schemas/PredictionReq"
          }
        }
      },
      "Body_put_my_file_user_files__post":{
        "title":"Body_put_my_file_user_files__post",
        "required":[
          "file"
        ],
        "type":"object",
        "properties":{
          "file":{
            "title":"File",
            "type":"string",
            "format":"binary"
          },
          "path":{
            "title":"Path",
            "type":"string",
            "description":"The client-side full path of the file."
          }
        }
      },
      "Body_put_user_file_my_files__post":{
        "title":"Body_put_user_file_my_files__post",
        "required":[
          "file"
        ],
        "type":"object",
        "properties":{
          "file":{
            "title":"File",
            "type":"string",
            "format":"binary"
          },
          "path":{
            "title":"Path",
            "type":"string",
            "description":"The client-side full path of the file."
          },
          "tag":{
            "title":"Tag",
            "type":"string",
            "description":"If a tag is provided, then all files with the same tag are grouped (in a sub-directory). Otherwise, a temp directory with only this file will be created."
          }
        }
      },
      "Body_remove_file_user_files_rm__post":{
        "title":"Body_remove_file_user_files_rm__post",
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Source Path",
            "type":"string",
            "description":"The client-side full path of the file  or directory to be removed."
          }
        }
      },
      "BulkUpdateReq":{
        "title":"Update request Model",
        "required":[
          "target_ids",
          "updates"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"Target Id",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The IDs of the target entities.",
            "example":[
              1,
              5,
              290
            ]
          },
          "updates":{
            "title":"Updates",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ColUpdate"
            },
            "description":"The list of updates, to do on all impacted entities. \n\n     { \n\n         ucol : A column name, pseudo-columns AKA free ones, are OK. \n\n         uval : The new value to set, always as a string \n\n     }",
            "example":[
              {
                "ucol":"sub_part",
                "uval":"2"
              }
            ]
          }
        }
      },
      "ClassifyAutoReq":{
        "title":"ClassifyAutoReq",
        "required":[
          "target_ids",
          "classifications",
          "scores",
          "keep_log"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"Target Ids",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The IDs of the target objects."
          },
          "classifications":{
            "title":"Classifications",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The wanted new classifications, i.e. taxon ID, one for each object."
          },
          "scores":{
            "title":"Scores",
            "type":"array",
            "items":{
              "type":"number"
            },
            "description":"The classification score is generally between 0 and 1. It indicates the probability that the taxon prediction of this object is correct."
          },
          "keep_log":{
            "title":"Keep log",
            "type":"boolean",
            "description":"Set if former automatic classification history is needed."
          }
        }
      },
      "ClassifyAutoReqMult":{
        "title":"Classify auto request Model",
        "required":[
          "target_ids",
          "classifications",
          "scores",
          "keep_log"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"Target Ids",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The IDs of the target objects."
          },
          "classifications":{
            "title":"Classifications",
            "type":"array",
            "items":{
              "type":"array",
              "items":{
                "type":"integer"
              }
            },
            "description":"The wanted new classifications, i.e. taxon ID, one list for each object."
          },
          "scores":{
            "title":"Scores",
            "type":"array",
            "items":{
              "type":"array",
              "items":{
                "type":"number"
              }
            },
            "description":"The classification scores, between 0 and 1. Each indicates the probability that the taxon prediction of this object for this category is correct."
          },
          "keep_log":{
            "title":"Keep log",
            "type":"boolean",
            "description":"Set if former automatic classification history is needed. Deprecated, always True."
          }
        },
        "example":{
          "target_ids":[
            634509,
            6234516,
            976544
          ],
          "classifications":[
            [
              7546
            ],
            [
              3421,
              5614
            ],
            [
              788
            ]
          ],
          "scores":[
            [
              0.4
            ],
            [
              0.56,
              0.3333
            ],
            [
              0.38
            ]
          ],
          "keep_log":false
        }
      },
      "ClassifyReq":{
        "title":"ClassifyReq",
        "required":[
          "target_ids",
          "classifications",
          "wanted_qualification"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"Target Ids",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The IDs of the target objects.",
            "example":[
              634509,
              6234516,
              976544
            ]
          },
          "classifications":{
            "title":"Classifications",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The wanted new classifications, i.e. taxon ID, one for each object. Use -1 to keep present one.",
            "example":[
              7546,
              3421,
              788
            ]
          },
          "wanted_qualification":{
            "title":"Wanted qualification",
            "type":"string",
            "description":"The wanted qualifications for all objects. 'V' or 'P'.",
            "example":"V"
          }
        }
      },
      "ColUpdate":{
        "title":"Update request Model",
        "required":[
          "ucol",
          "uval"
        ],
        "type":"object",
        "properties":{
          "ucol":{
            "title":"Ucol",
            "type":"string"
          },
          "uval":{
            "title":"Uval",
            "type":"string"
          }
        }
      },
      "CollectionModel":{
        "title":"Collection Model",
        "required":[
          "project_ids",
          "id",
          "external_id",
          "external_id_system",
          "title"
        ],
        "type":"object",
        "properties":{
          "project_ids":{
            "title":"Project ids",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The list of composing project IDs.",
            "example":[
              1
            ]
          },
          "provider_user":{
            "title":"Provider user",
            "allOf":[
              {
                "$ref":"#/components/schemas/MinUserModel"
              }
            ],
            "description":"Is the person who\n        is responsible for the content of this metadata record. Writer of the title and abstract."
          },
          "contact_user":{
            "title":"Contact user",
            "allOf":[
              {
                "$ref":"#/components/schemas/MinUserModel"
              }
            ],
            "description":"Is the person who\n        should be contacted in cases of questions regarding the content of the dataset or any data restrictions.\n        This is also the person who is most likely to stay involved in the dataset the longest."
          },
          "creator_users":{
            "title":"Creator users",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/MinUserModel"
            },
            "description":"All people who\n        are responsible for the creation of the collection. Data creators should receive credit\n        for their work and should therefore be included in the citation.",
            "default":[]
          },
          "creator_organisations":{
            "title":"Creator organisations",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"All\n        organisations who are responsible for the creation of the collection. Data creators should\n        receive credit for their work and should therefore be included in the citation.",
            "default":[]
          },
          "associate_users":{
            "title":"Associate users",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/MinUserModel"
            },
            "description":"Other person(s)\n        associated with the collection.",
            "default":[]
          },
          "associate_organisations":{
            "title":"Associate organisations",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Other\n        organisation(s) associated with the collection.",
            "default":[]
          },
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"The collection Id.",
            "example":1
          },
          "external_id":{
            "title":"External Id",
            "type":"string",
            "description":"The external Id.",
            "example":""
          },
          "external_id_system":{
            "title":"External id system",
            "type":"string",
            "description":"The external Id system.",
            "example":""
          },
          "title":{
            "title":"Title",
            "type":"string",
            "description":"The collection title.",
            "example":"My collection"
          },
          "short_title":{
            "title":"Short title",
            "type":"string",
            "description":"The collection short title.",
            "example":"My coll"
          },
          "citation":{
            "title":"Citation",
            "type":"string",
            "description":"The collection citation.",
            "example":""
          },
          "license":{
            "title":"License",
            "type":"string",
            "description":"The collection license.",
            "example":"CC BY 4.0"
          },
          "abstract":{
            "title":"Abstract",
            "type":"string",
            "description":"The collection abstract.",
            "example":""
          },
          "description":{
            "title":"Description",
            "type":"string",
            "description":"The collection description.",
            "example":""
          }
        },
        "description":"Basic and computed information about the Collection."
      },
      "Constants":{
        "title":"Constants",
        "type":"object",
        "properties":{
          "license_texts":{
            "title":"License texts",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"The supported licenses and help text/links.",
            "default":{
              "CC0 1.0":"<a href=\"https://creativecommons.org/publicdomain/zero/1.0/\" rel=\"nofollow\"><strong>CC-0</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, with no conditions. Other databases can index the data. The data falls into the worldwide public domain. This is the license preferred by <a href=\"https://obis.org/manual/policy/\" rel=\"nofollow\">OBIS</a> and <a href=\"https://www.gbif.org/terms\" rel=\"nofollow\">GBIF</a>.",
              "CC BY 4.0":"<a href=\"https://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\"><strong>CC-BY</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors. Other databases can index the data.",
              "CC BY-NC 4.0":"<a href=\"https://creativecommons.org/licenses/by-nc/4.0/\" rel=\"nofollow\"><strong>CC-BY-NC</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors, and do not use it for commercial purpose (\"primarily intended for or directed toward commercial advantage or monetary compensation\"). Other databases can index the data.",
              "Copyright":"<strong>Copyright</strong>: only contributors to this project have rights on this data. This prevents its distribution in any kind of database.",
              "":"Not chosen"
            },
            "example":{
              "CC0 1.0":"<a href=\"https://creativecommons.org/publicdomain/zero/1.0/\" rel=\"nofollow\"><strong>CC-0</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, with no conditions. Other databases can index the data. The data falls into the worldwide public domain. This is the license preferred by <a href=\"https://obis.org/manual/policy/\" rel=\"nofollow\">OBIS</a> and <a href=\"https://www.gbif.org/terms\" rel=\"nofollow\">GBIF</a>.",
              "CC BY 4.0":"<a href=\"https://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\"><strong>CC-BY</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors. Other databases can index the data.",
              "CC BY-NC 4.0":"<a href=\"https://creativecommons.org/licenses/by-nc/4.0/\" rel=\"nofollow\"><strong>CC-BY-NC</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors, and do not use it for commercial purpose (\"primarily intended for or directed toward commercial advantage or monetary compensation\"). Other databases can index the data.",
              "Copyright":"<strong>Copyright</strong>: only contributors to this project have rights on this data. This prevents its distribution in any kind of database.",
              "":"Not chosen"
            }
          },
          "app_manager":{
            "title":"Application manager",
            "maxItems":2,
            "minItems":2,
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"The application manager identity (name, mail), from config file.",
            "default":[
              "",
              ""
            ],
            "example":[
              "App manager Name",
              "app.manager@email.fr"
            ]
          },
          "countries":{
            "title":"Countries",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"List of known countries names.",
            "default":[],
            "example":[
              "France"
            ]
          },
          "user_status":{
            "title":"User status",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"Application User status values",
            "default":{
              "blocked":-1,
              "inactive":0,
              "active":1,
              "pending":2
            },
            "example":{
              "blocked":-1,
              "inactive":0,
              "active":1,
              "pending":2
            }
          },
          "password_regexp":{
            "title":"Password regexp",
            "type":"string",
            "description":"8 char. minimum, at least one uppercase, one lowercase, one number and one special char in '#?!@%^&*-+' ",
            "default":"^(?:(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#?%^&*-+])).{8,20}$"
          },
          "email_verification":{
            "title":"Account email verification",
            "type":"boolean",
            "description":"Require verification before activation.",
            "default":true
          },
          "account_validation":{
            "title":"Account validation",
            "type":"boolean",
            "description":"Require validation by a Users Administrator before activation.",
            "default":false
          },
          "short_token_age":{
            "title":"Short token lifespan",
            "type":"integer",
            "description":"Email confirmation, password reset token lifespan.",
            "default":1
          },
          "profile_token_age":{
            "title":"Profile token lifespan",
            "type":"integer",
            "description":"Profile modification token lifespan.",
            "default":24
          },
          "recaptchaid":{
            "title":"Google ReCaptcha",
            "type":"boolean",
            "description":"use Google ReCaptcha",
            "default":false
          }
        },
        "description":"Values which can be considered identical over the lifetime of the back-end."
      },
      "CreateCollectionReq":{
        "title":"Create collection request Model",
        "required":[
          "title",
          "project_ids"
        ],
        "type":"object",
        "properties":{
          "title":{
            "title":"Title",
            "type":"string",
            "description":"The collection title.",
            "example":"My collection"
          },
          "project_ids":{
            "title":"Project ids",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The list of composing project IDs.",
            "example":[
              1
            ]
          }
        }
      },
      "CreateProjectReq":{
        "title":"Create project request Model",
        "required":[
          "title"
        ],
        "type":"object",
        "properties":{
          "clone_of_id":{
            "title":"Clone of id",
            "type":"integer",
            "description":"Internal, numeric id of a project to clone as a new one. By default it does not clone anything.",
            "example":2
          },
          "title":{
            "title":"Title",
            "type":"string",
            "description":"The project title, as text.",
            "example":"My new project title"
          },
          "instrument":{
            "title":"Instrument",
            "type":"string",
            "description":"The project instrument.",
            "default":"?",
            "example":"UVP5"
          },
          "visible":{
            "title":"Visible",
            "type":"boolean",
            "description":"When TRUE, the project is created visible by all users.",
            "default":true,
            "example":true
          }
        }
      },
      "DarwinCoreExportReq":{
        "title":"DarwinCoreExportReq",
        "required":[
          "collection_id"
        ],
        "type":"object",
        "properties":{
          "collection_id":{
            "title":"Collection Id",
            "type":"integer",
            "description":"The collection to export, by its internal Id.",
            "example":1
          },
          "dry_run":{
            "title":"Dry run",
            "type":"boolean",
            "description":"If set, then only a diagnostic of doability will be done.",
            "default":false,
            "example":false
          },
          "include_predicted":{
            "title":"Include predicted",
            "type":"boolean",
            "description":"If set, then predicted objects, as well as validated ones, will be exported. A validation status will allow to distinguish between the two possible statuses.",
            "default":false,
            "example":false
          },
          "with_absent":{
            "title":"With absent",
            "type":"boolean",
            "description":"If set, then *absent* records will be generated, in the relevant samples, for categories present in other samples.",
            "default":false,
            "example":false
          },
          "with_computations":{
            "title":"With computations",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/SciExportTypeEnum"
            },
            "description":"Compute organisms abundances (ABO), concentrations (CNC) or biovolumes (BIV). Several possible.",
            "default":[],
            "example":[
              "ABO"
            ]
          },
          "computations_pre_mapping":{
            "title":"Computation mapping",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"Mapping from present taxon (key) to output replacement one (value), during computations. Use a 0 replacement to _discard_ the objects with present taxon. Note: These are EcoTaxa categories, WoRMS mapping happens after, whatever.",
            "default":{},
            "example":{
              "456":956,
              "2456":213,
              "93672":0
            }
          },
          "formulae":{
            "title":"Computation formulas",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Transitory: How to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'. Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'",
            "default":{},
            "example":{
              "subsample_coef":"1/ssm.sub_part",
              "total_water_volume":"sam.tot_vol/1000",
              "individual_volume":"4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3"
            }
          },
          "extra_xml":{
            "title":"Extra XML",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"XML blocks which will be output, reformatted, inside the <dataset> tag of produced EML. Formal schema is in dataset section of: https://eml.ecoinformatics.org/schema/eml_xsd ",
            "default":[],
            "example":[
              "<associatedParty>\n    <individualName><givenName>Coco</givenName><surName>Rico</surName>\n    </individualName>\n    <organizationName>CHICK</organizationName>\n      </associatedParty>"
            ]
          }
        },
        "additionalProperties":false,
        "description":"Darwin Core format export request, only allowed format for a Collection. @see https://dwc.tdwg.org/"
      },
      "DirectoryEntryModel":{
        "title":"DirectoryEntryModel",
        "required":[
          "name",
          "type",
          "size",
          "mtime"
        ],
        "type":"object",
        "properties":{
          "name":{
            "title":"Name",
            "type":"string",
            "description":"atomic entry name.",
            "example":"task_281167_export_reduced_20200120_15_05.zip"
          },
          "type":{
            "title":"Type",
            "type":"string",
            "description":"entry type, 'D' for directory, 'F' for file.",
            "example":"F"
          },
          "size":{
            "title":"Size",
            "type":"integer",
            "description":"Entry size, for zips.",
            "example":173804090
          },
          "mtime":{
            "title":"Modification time",
            "type":"string",
            "description":"Modification time, in ISO format.",
            "example":"2020-01-20 15:10:54.834571"
          }
        },
        "description":"Something inside a directory, i.e. a sub-directory or a file."
      },
      "DirectoryModel":{
        "title":"DirectoryModel",
        "required":[
          "path",
          "entries"
        ],
        "type":"object",
        "properties":{
          "path":{
            "title":"Path",
            "type":"string",
            "description":"A /-separated path from root to this directory.",
            "example":"/ftp_plankton/Ecotaxa_Exported_data"
          },
          "entries":{
            "title":"Entries",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/DirectoryEntryModel"
            },
            "description":"Entries, i.e. subdirectories or contained files.All entries are readable, i.e. can be used as input or navigated into."
          }
        },
        "description":"A path + list of entries inside. The path is relative to an implied root."
      },
      "ExportImagesOptionsEnum":{
        "title":"ExportImagesOptionsEnum",
        "enum":[
          "all",
          "first",
          "none"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "ExportReq":{
        "title":"Export request Model",
        "required":[
          "project_id",
          "exp_type"
        ],
        "type":"object",
        "properties":{
          "project_id":{
            "title":"Project Id",
            "type":"integer",
            "description":"The project to export.",
            "example":1
          },
          "exp_type":{
            "title":"Export type",
            "allOf":[
              {
                "$ref":"#/components/schemas/ExportTypeEnum"
              }
            ],
            "description":"The export type.",
            "example":"TSV"
          },
          "use_latin1":{
            "title":"Use latin1",
            "type":"boolean",
            "description":"Export using latin 1 character set, AKA iso-8859-1. Default is utf-8.",
            "default":false,
            "example":false
          },
          "tsv_entities":{
            "title":"Tsv entities",
            "type":"string",
            "description":"For 'TSV' type, the entities to export, one letter for each of O(bject), P(rocess), A(cquisition), S(ample), C(omments).",
            "default":"",
            "example":"OPAS"
          },
          "only_annotations":{
            "title":"Backup annotations",
            "type":"boolean",
            "description":"For 'BAK' type, only save objects' last annotation data in backup.",
            "default":false,
            "example":false
          },
          "split_by":{
            "title":"Split by",
            "type":"string",
            "description":"For 'TSV' type, inside archives, split in one directory per... 'sample', 'acquisition', 'taxon' or '' (no split).",
            "default":"",
            "example":"sample"
          },
          "coma_as_separator":{
            "title":"Coma as separator",
            "type":"boolean",
            "description":"For 'TSV' type, use a , instead of . for decimal separator.",
            "default":false,
            "example":false
          },
          "format_dates_times":{
            "title":"Format dates times",
            "type":"boolean",
            "description":"For 'TSV' type, format dates and times using - and : respectively.",
            "default":true,
            "example":false
          },
          "with_images":{
            "title":"With images",
            "type":"boolean",
            "description":"For 'BAK' and 'DOI' types, export images as well.",
            "default":false,
            "example":false
          },
          "with_internal_ids":{
            "title":"With internal ids",
            "type":"boolean",
            "description":"For 'TSV' type, export internal DB IDs.",
            "default":false,
            "example":false
          },
          "with_types_row":{
            "title":"With types row",
            "type":"boolean",
            "description":"Add an EcoTaxa-compatible second line with types.",
            "default":false,
            "example":false
          },
          "only_first_image":{
            "title":"Only first image",
            "type":"boolean",
            "description":"For 'DOI' type, export only first (displayed) image.",
            "default":false,
            "example":false
          },
          "sum_subtotal":{
            "title":"Sum subtotal",
            "allOf":[
              {
                "$ref":"#/components/schemas/SummaryExportGroupingEnum"
              }
            ],
            "description":"For 'SUM', 'ABO', 'CNC' and 'BIV' types, if computations should be combined. Per A(cquisition) or S(ample) or <Empty>(just taxa).",
            "default":"",
            "example":"A"
          },
          "pre_mapping":{
            "title":"Categories mapping",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"For 'ABO', 'CNC' and 'BIV' types types, mapping from present taxon (key) to output replacement one (value). Use a null replacement to _discard_ the present taxon.",
            "default":{},
            "example":{
              "456":956,
              "2456":213
            }
          },
          "formulae":{
            "title":"Computation formulas",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Transitory: For 'CNC' and 'BIV' type, how to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'.Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'",
            "default":{},
            "example":{
              "subsample_coef":"1/ssm.sub_part",
              "total_water_volume":"sam.tot_vol/1000",
              "individual_volume":"4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3"
            }
          },
          "out_to_ftp":{
            "title":"Out to ftp",
            "type":"boolean",
            "description":"Copy result file to FTP area. Original file is still available.",
            "default":false,
            "example":false
          }
        },
        "description":"Export request."
      },
      "ExportRsp":{
        "title":"ExportRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"Errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Showstopper problems found preventing building the archive.",
            "default":[],
            "example":[
              "No content produced.",
              " See previous warnings or check the presence of samples in the projects"
            ]
          },
          "warnings":{
            "title":"Warnings",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Problems found while building the archive, which do not prevent producing it.",
            "default":[],
            "example":[
              "No occurrence added for sample '3456' in 1"
            ]
          },
          "job_id":{
            "title":"Job Id",
            "type":"integer",
            "description":"The created job, 0 if there were problems.",
            "default":0,
            "example":12376
          }
        },
        "description":"Export response, for all export jobs, either on Project or Collection"
      },
      "ExportSplitOptionsEnum":{
        "title":"ExportSplitOptionsEnum",
        "enum":[
          "sample",
          "acquisition",
          "taxon",
          "none"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "ExportTypeEnum":{
        "title":"ExportTypeEnum",
        "enum":[
          "TSV",
          "BAK",
          "DOI",
          "SUM",
          "ABO",
          "CNC",
          "BIV"
        ],
        "type":"string",
        "description":"Externally deprecated"
      },
      "GeneralExportReq":{
        "title":"General Export request Model",
        "required":[
          "project_id"
        ],
        "type":"object",
        "properties":{
          "project_id":{
            "title":"Project Id",
            "type":"integer",
            "description":"The project to export.",
            "example":1
          },
          "split_by":{
            "title":"Split by",
            "allOf":[
              {
                "$ref":"#/components/schemas/ExportSplitOptionsEnum"
              }
            ],
            "description":"If not none, separate (in ZIP sub-directories) output per given field.",
            "default":"none",
            "example":"sample"
          },
          "with_images":{
            "title":"With images",
            "allOf":[
              {
                "$ref":"#/components/schemas/ExportImagesOptionsEnum"
              }
            ],
            "description":"Add in ZIP first (i.e. visible) image, all images, or no image.⚠️ 'all' means maybe several lines per object in TSVs.",
            "default":"none",
            "example":"first"
          },
          "with_internal_ids":{
            "title":"With internal ids",
            "type":"boolean",
            "description":"Export internal database IDs.",
            "default":false,
            "example":false
          },
          "with_types_row":{
            "title":"With types row",
            "type":"boolean",
            "description":"Add an EcoTaxa-compatible second line with types.",
            "default":false,
            "example":false
          },
          "only_annotations":{
            "title":"Backup annotations",
            "type":"boolean",
            "description":"Only save objects' last annotation data.",
            "default":false,
            "example":false
          },
          "out_to_ftp":{
            "title":"Out to ftp",
            "type":"boolean",
            "description":"Copy result file to FTP area. Original file is still available.",
            "default":false,
            "example":false
          }
        },
        "description":"General purpose export request, produce a zip in a job with many options."
      },
      "GroupDefinitions":{
        "title":"GroupDefinitions",
        "enum":[
          "C",
          "S",
          "A"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "HTTPValidationError":{
        "title":"HTTPValidationError",
        "type":"object",
        "properties":{
          "detail":{
            "title":"Detail",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HistoricalClassification":{
        "title":"HistoricalClassification",
        "type":"object",
        "properties":{
          "objid":{
            "title":"Object Id",
            "type":"integer",
            "description":"The object Id.",
            "example":264409236
          },
          "classif_id":{
            "title":"Classification Id",
            "type":"integer",
            "description":"The classification Id.",
            "example":82399
          },
          "classif_date":{
            "title":"Classification date",
            "type":"string",
            "description":"The classification date.",
            "format":"date-time",
            "example":"2021-09-21T14:59:01.007110"
          },
          "classif_who":{
            "title":"Classification who",
            "type":"integer",
            "description":"The user who manualy classify this object.",
            "example":"null"
          },
          "classif_type":{
            "title":"Classification type",
            "type":"string",
            "description":"The type of classification. Could be **A** for Automatic or **M** for Manual.",
            "example":"A"
          },
          "classif_qual":{
            "title":"Classification qualification",
            "type":"string",
            "description":"The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.",
            "example":"P"
          },
          "classif_score":{
            "title":"Classification score",
            "type":"number",
            "description":"The classification score is generally between 0 and 1. This is a confidence score, in the fact that, the taxon prediction for this object is correct.",
            "example":0.085
          },
          "user_name":{
            "title":"User name",
            "type":"string",
            "description":"The name of the user who classified this object.",
            "example":"null"
          },
          "taxon_name":{
            "title":"Taxon name",
            "type":"string",
            "description":"The taxon name of the object.",
            "example":"Penilia avirostris"
          }
        }
      },
      "HistoricalLastClassif":{
        "title":"HistoricalLastClassif",
        "type":"object",
        "properties":{
          "objid":{
            "title":"Object Id",
            "type":"integer",
            "description":"The object Id.",
            "example":264409236
          },
          "classif_id":{
            "title":"Classification Id",
            "type":"integer",
            "description":"The classification Id.",
            "example":82399
          },
          "histo_classif_date":{
            "title":"Historical last classification date",
            "type":"string",
            "description":"The classification date.",
            "format":"date-time",
            "example":"2021-09-21T14:59:01.007110"
          },
          "histo_classif_id":{
            "title":"Historical last classification Id",
            "type":"integer",
            "description":"The classification Id.",
            "example":56
          },
          "histo_classif_type":{
            "title":"Historical last classification type",
            "type":"string",
            "description":"The type of classification. Could be **A** for Automatic or **M** for Manual.",
            "example":"M"
          },
          "histo_classif_qual":{
            "title":"Historical last classification qualification",
            "type":"string",
            "description":"The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.",
            "example":"V"
          },
          "histo_classif_who":{
            "title":"Historical last classification who",
            "type":"integer",
            "description":"The user who manually classified this object.",
            "example":3876
          },
          "histo_classif_score":{
            "title":"Histo Classif Score",
            "type":"number"
          }
        }
      },
      "ImageModel":{
        "title":"ImageModel",
        "required":[
          "imgid",
          "objid",
          "imgrank",
          "width",
          "height",
          "orig_file_name",
          "file_name"
        ],
        "type":"object",
        "properties":{
          "imgid":{
            "title":"Image Id",
            "type":"integer",
            "description":"The id of the image.",
            "example":376456
          },
          "objid":{
            "title":"Object Id",
            "type":"integer",
            "description":"The id of the object related to the image.",
            "example":376456
          },
          "imgrank":{
            "title":"Image rank",
            "type":"integer",
            "description":"The rank of the image.",
            "example":0
          },
          "width":{
            "title":"Width",
            "type":"integer",
            "description":"The width of the image.",
            "example":98
          },
          "height":{
            "title":"Height",
            "type":"integer",
            "description":"The height of the image.",
            "example":63
          },
          "orig_file_name":{
            "title":"Original file name",
            "type":"string",
            "description":"The file name of the original image.",
            "example":"dewex_leg2_63_689.jpg"
          },
          "thumb_width":{
            "title":"Thumb width",
            "type":"integer",
            "description":"Generate thumbnail if image is too large. This generated thumbnail width.",
            "example":"null"
          },
          "thumb_height":{
            "title":"Thumb height",
            "type":"integer",
            "description":"Generate thumbnail if image is too large. The thumb height of the image.",
            "example":"null"
          },
          "file_name":{
            "title":"File name",
            "type":"string",
            "description":"The file name.",
            "example":"0037/6456.jpg"
          },
          "thumb_file_name":{
            "title":"Thumb file name",
            "type":"string",
            "description":"If image was too large at import time, the generated thumbnail file name.",
            "example":"null"
          }
        },
        "description":"Computed inside ObjectBO"
      },
      "ImportReq":{
        "title":"Import request Model",
        "required":[
          "source_path"
        ],
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Source path",
            "type":"string",
            "description":"Source path on server, to zip or plain directory. \n \n The path can be returned by a file upload (absolute), \n \n otherwise it's relative to shared file area root.",
            "example":"/import_test.zip"
          },
          "taxo_mappings":{
            "title":"Taxo mappings",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Optional taxonomy mapping, the key specifies the taxonomy ID found in file and the value specifies the final taxonomy ID to write.",
            "default":{},
            "example":{
              "23444":76543
            }
          },
          "skip_loaded_files":{
            "title":"Skip loaded files",
            "type":"boolean",
            "description":"If true skip loaded files, else don't.",
            "default":false,
            "example":false
          },
          "skip_existing_objects":{
            "title":"Skip existing objects",
            "type":"boolean",
            "description":"If true skip existing objects, else don't.",
            "default":false,
            "example":false
          },
          "update_mode":{
            "title":"Update mode",
            "type":"string",
            "description":"Update data ('Yes'), including classification ('Cla').",
            "default":"",
            "example":"Yes"
          }
        },
        "description":"Import request, from UI choices."
      },
      "ImportRsp":{
        "title":"ImportRsp",
        "required":[
          "job_id"
        ],
        "type":"object",
        "properties":{
          "job_id":{
            "title":"Job Id",
            "type":"integer",
            "description":"The job which was created for the run.",
            "example":1
          },
          "errors":{
            "title":"Errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Errors from analysis.",
            "default":[],
            "example":[
              "new TSV file(s) are not compliant"
            ]
          }
        },
        "description":"Import response."
      },
      "JobModel":{
        "title":"JobModel",
        "required":[
          "id",
          "owner_id",
          "type",
          "creation_date",
          "updated_on"
        ],
        "type":"object",
        "properties":{
          "params":{
            "title":"params",
            "type":"object",
            "description":"Creation parameters.",
            "default":{},
            "example":{
              "prj_id":1,
              "req":{
                "filters":{
                  "taxo":"85067",
                  "taxochild":"N"
                },
                "dest_prj_id":1,
                "group_type":"S",
                "limit_type":"P",
                "limit_value":100.0,
                "do_images":true
              }
            }
          },
          "result":{
            "title":"result",
            "type":"object",
            "description":"Final result of the run.",
            "default":{},
            "example":{
              "rowcount":3
            }
          },
          "errors":{
            "title":"errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"The errors seen during last step.",
            "default":[],
            "example":[]
          },
          "question":{
            "title":"question",
            "type":"object",
            "description":"The data provoking job move to Asking state.",
            "default":{},
            "example":{}
          },
          "reply":{
            "title":"reply",
            "type":"object",
            "description":"The data provided as a reply to the question.",
            "default":{},
            "example":{}
          },
          "inside":{
            "title":"inside",
            "type":"object",
            "description":"Internal state of the job.",
            "default":{},
            "example":{}
          },
          "id":{
            "title":"id",
            "type":"integer",
            "description":"Job unique identifier.",
            "example":47445
          },
          "owner_id":{
            "title":"owner_id",
            "type":"integer",
            "description":"The user who created and thus owns the job. ",
            "example":1
          },
          "type":{
            "title":"type",
            "type":"string",
            "description":"The job type, e.g. import, export... ",
            "example":"Subset"
          },
          "state":{
            "title":"state",
            "type":"string",
            "description":"What the job is doing. Could be 'P' for Pending (Waiting for an execution thread), 'R' for Running (Being executed inside a thread), 'A' for Asking (Needing user information before resuming), 'E' for Error (Stopped with error), 'F' for Finished (Done).",
            "example":"F"
          },
          "step":{
            "title":"step",
            "type":"integer",
            "description":"Where in the workflow the job is. ",
            "example":"null"
          },
          "progress_pct":{
            "title":"progress_pct",
            "type":"integer",
            "description":"The progress percentage for UI. ",
            "example":100
          },
          "progress_msg":{
            "title":"progress_msg",
            "type":"string",
            "description":"The message for UI, short version. ",
            "example":"Done"
          },
          "creation_date":{
            "title":"creation_date",
            "type":"string",
            "description":"The date of creation of the Job, as text formatted according to the ISO 8601 standard.",
            "format":"date-time",
            "example":"2021-09-28T08:43:20.196061"
          },
          "updated_on":{
            "title":"updated_on",
            "type":"string",
            "description":"Last time that anything changed in present line. ",
            "format":"date-time",
            "example":"2021-09-28T08:43:21.441969"
          }
        },
        "description":"All information about the Job."
      },
      "LicenseEnum":{
        "title":"LicenseEnum",
        "enum":[
          "CC0 1.0",
          "CC BY 4.0",
          "CC BY-NC 4.0",
          "Copyright",
          ""
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "LimitMethods":{
        "title":"LimitMethods",
        "enum":[
          "P",
          "V"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "LoginReq":{
        "title":"Login request Model",
        "required":[
          "password",
          "username"
        ],
        "type":"object",
        "properties":{
          "password":{
            "title":"User's password",
            "type":"string",
            "description":"User password.",
            "example":"test!"
          },
          "username":{
            "title":"User's email",
            "type":"string",
            "description":"User email used during registration.",
            "example":"ecotaxa.api.user@gmail.com"
          }
        }
      },
      "MLModel":{
        "title":"MLModel",
        "required":[
          "name"
        ],
        "type":"object",
        "properties":{
          "name":{
            "title":"Name",
            "type":"string",
            "description":"A usable model for features extraction.",
            "example":"zoocam_2022_04_06"
          }
        },
        "description":"A ML model for the features, so far just a name."
      },
      "MergeRsp":{
        "title":"MergeRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"Errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"The errors found during processing.",
            "default":[]
          }
        },
        "description":"Merge response."
      },
      "MinUserModel":{
        "title":"MinUserModel",
        "required":[
          "id",
          "email",
          "name"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"The unique numeric id of this user.",
            "example":1
          },
          "email":{
            "title":"Email",
            "type":"string",
            "description":"User's email address, as text, used during registration.",
            "example":"ecotaxa.api.user@gmail.com"
          },
          "name":{
            "title":"Name",
            "type":"string",
            "description":"User's full name, as text.",
            "example":"userName"
          }
        }
      },
      "MinimalUserBO":{
        "title":"MinimalUserBO",
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "name":{
            "title":"Name",
            "type":"string"
          }
        }
      },
      "ObjectHeaderModel":{
        "title":"ObjectHeaderModel",
        "required":[
          "objid",
          "acquisid",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "classif_when":{
            "title":"Classification when",
            "type":"string",
            "description":"The human classification date, if **P** or **V**.",
            "format":"date-time",
            "example":"2021-09-21T14:59:01.007110"
          },
          "classif_auto_id":{
            "title":"Classification auto Id",
            "type":"integer",
            "description":"Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. "
          },
          "classif_auto_score":{
            "title":"Classification auto score",
            "type":"number",
            "description":"Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification auto score is generally between 0 and 1. This is a confidence score, in the fact that, the taxon prediction for this object is correct.",
            "example":0.085
          },
          "classif_auto_when":{
            "title":"Classification auto when",
            "type":"string",
            "description":"Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification date.",
            "format":"date-time",
            "example":"2021-09-21T14:59:01.007110"
          },
          "objid":{
            "title":"Object Id",
            "type":"integer",
            "description":"The object Id.",
            "example":264409236
          },
          "acquisid":{
            "title":"Acquisition Id",
            "type":"integer",
            "description":"The parent acquisition Id.",
            "example":144
          },
          "classif_id":{
            "title":"Classification Id",
            "type":"integer",
            "description":"The classification Id.",
            "example":82399
          },
          "objtime":{
            "title":"Object time",
            "type":"string",
            "format":"time"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number",
            "description":"The latitude.",
            "example":42.0231666666667
          },
          "longitude":{
            "title":"Longitude",
            "type":"number",
            "description":"The longitude.",
            "example":4.71766666666667
          },
          "depth_min":{
            "title":"Depth min",
            "type":"number",
            "description":"The min depth.",
            "example":0
          },
          "depth_max":{
            "title":"Depth max",
            "type":"number",
            "description":"The min depth.",
            "example":300
          },
          "objdate":{
            "title":"Object date",
            "type":"string",
            "format":"date"
          },
          "classif_qual":{
            "title":"Classification qualification",
            "type":"string",
            "description":"The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.",
            "example":"P"
          },
          "sunpos":{
            "title":"Sun position",
            "type":"string",
            "description":"Sun position, from date, time and coords.",
            "example":"N"
          },
          "classif_score":{
            "title":"Classification score",
            "type":"number",
            "description":"The ML score for this object, if **P**.",
            "example":"null"
          },
          "classif_who":{
            "title":"Classification who",
            "type":"integer",
            "description":"The user who manually classified this object, if **V** or **D**.",
            "example":"null"
          },
          "orig_id":{
            "title":"Original id",
            "type":"string",
            "description":"Original object ID from initial TSV load.",
            "example":"deex_leg1_48_406"
          },
          "object_link":{
            "title":"Object link",
            "type":"string",
            "description":"Object link.",
            "example":"http://www.zooscan.obs-vlfr.fr//"
          },
          "complement_info":{
            "title":"Complement info",
            "type":"string",
            "example":"Part of ostracoda"
          }
        }
      },
      "ObjectModel":{
        "title":"ObjectModel",
        "required":[
          "objid",
          "acquisid",
          "orig_id",
          "sample_id",
          "project_id",
          "random_value"
        ],
        "type":"object",
        "properties":{
          "classif_when":{
            "title":"Classification when",
            "type":"string",
            "description":"The human classification date, if **P** or **V**.",
            "format":"date-time",
            "example":"2021-09-21T14:59:01.007110"
          },
          "classif_auto_id":{
            "title":"Classification auto Id",
            "type":"integer",
            "description":"Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. "
          },
          "classif_auto_score":{
            "title":"Classification auto score",
            "type":"number",
            "description":"Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification auto score is generally between 0 and 1. This is a confidence score, in the fact that, the taxon prediction for this object is correct.",
            "example":0.085
          },
          "classif_auto_when":{
            "title":"Classification auto when",
            "type":"string",
            "description":"Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification date.",
            "format":"date-time",
            "example":"2021-09-21T14:59:01.007110"
          },
          "objid":{
            "title":"Object Id",
            "type":"integer",
            "description":"The object Id.",
            "example":264409236
          },
          "acquisid":{
            "title":"Acquisition Id",
            "type":"integer",
            "description":"The parent acquisition Id.",
            "example":144
          },
          "classif_id":{
            "title":"Classification Id",
            "type":"integer",
            "description":"The classification Id.",
            "example":82399
          },
          "objtime":{
            "title":"Object time",
            "type":"string",
            "format":"time"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number",
            "description":"The latitude.",
            "example":42.0231666666667
          },
          "longitude":{
            "title":"Longitude",
            "type":"number",
            "description":"The longitude.",
            "example":4.71766666666667
          },
          "depth_min":{
            "title":"Depth min",
            "type":"number",
            "description":"The min depth.",
            "example":0
          },
          "depth_max":{
            "title":"Depth max",
            "type":"number",
            "description":"The min depth.",
            "example":300
          },
          "objdate":{
            "title":"Object date",
            "type":"string",
            "format":"date"
          },
          "classif_qual":{
            "title":"Classification qualification",
            "type":"string",
            "description":"The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.",
            "example":"P"
          },
          "sunpos":{
            "title":"Sun position",
            "type":"string",
            "description":"Sun position, from date, time and coords.",
            "example":"N"
          },
          "classif_score":{
            "title":"Classification score",
            "type":"number",
            "description":"The ML score for this object, if **P**.",
            "example":"null"
          },
          "classif_who":{
            "title":"Classification who",
            "type":"integer",
            "description":"The user who manually classified this object, if **V** or **D**.",
            "example":"null"
          },
          "orig_id":{
            "title":"Original id",
            "type":"string",
            "description":"Original object ID from initial TSV load.",
            "example":"deex_leg1_48_406"
          },
          "object_link":{
            "title":"Object link",
            "type":"string",
            "description":"Object link.",
            "example":"http://www.zooscan.obs-vlfr.fr//"
          },
          "complement_info":{
            "title":"Complement info",
            "type":"string",
            "example":"Part of ostracoda"
          },
          "sample_id":{
            "title":"Sample id",
            "type":"integer",
            "description":"Sample (i.e. parent of parent acquisition) ID.",
            "example":12
          },
          "project_id":{
            "title":"Project id",
            "type":"integer",
            "description":"Project (i.e. parent of sample) ID.",
            "example":76
          },
          "images":{
            "title":"Images",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ImageModel"
            },
            "description":"Images for this object.",
            "default":[],
            "example":[
              {
                "imgid":376456,
                "objid":376456,
                "imgrank":0,
                "file_name":"0037/6456.jpg",
                "orig_file_name":"dewex_leg2_63_689.jpg",
                "width":98,
                "height":63,
                "thumb_file_name":"null",
                "thumb_width":"null",
                "thumb_height":"null"
              }
            ]
          },
          "free_columns":{
            "title":"Free columns",
            "type":"object",
            "description":"Free columns from object mapping in project.",
            "default":{},
            "example":{
              "area":49.0,
              "mean":232.27,
              "stddev":2.129
            }
          },
          "classif_crossvalidation_id":{
            "title":"Classification crossvalidation Id",
            "type":"integer",
            "description":"Always NULL, kept for compat.",
            "example":"null"
          },
          "similarity":{
            "title":"Similarity",
            "type":"number",
            "description":"Always NULL, kept for compat.",
            "example":"null"
          },
          "random_value":{
            "title":"random_value",
            "type":"integer",
            "description":"Random value associated to an image",
            "example":1234
          }
        }
      },
      "ObjectSetQueryRsp":{
        "title":"ObjectSetQueryRsp",
        "type":"object",
        "properties":{
          "object_ids":{
            "title":"Object Ids",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"Matching object IDs.",
            "default":[],
            "example":[
              634509,
              6234516,
              976544
            ]
          },
          "acquisition_ids":{
            "title":"Acquisition Ids",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"Parent (acquisition) IDs.",
            "default":[],
            "example":[
              23,
              987,
              89
            ]
          },
          "sample_ids":{
            "title":"Sample Ids",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"Parent (sample) IDs.",
            "default":[],
            "example":[
              234,
              194,
              12
            ]
          },
          "project_ids":{
            "title":"Project Ids",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"Project Ids.",
            "default":[],
            "example":[
              22,
              43
            ]
          },
          "details":{
            "title":"Details",
            "type":"array",
            "items":{
              "type":"array",
              "items":{}
            },
            "description":"Requested fields, in request order.",
            "default":[],
            "example":[
              [
                7.315666666666667,
                43.685
              ],
              [
                7.315666666666667,
                43.685
              ],
              [
                7.315666666666667,
                43.685
              ]
            ]
          },
          "total_ids":{
            "title":"Total Ids",
            "type":"integer",
            "description":"Total rows returned by the query, even if it was window-ed.",
            "default":0,
            "example":1000
          }
        }
      },
      "ObjectSetRevertToHistoryRsp":{
        "title":"ObjectSetRevertToHistoryRsp",
        "type":"object",
        "properties":{
          "last_entries":{
            "title":"Last entries",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/HistoricalLastClassif"
            },
            "description":"Object + last classification",
            "default":[],
            "example":[
              {
                "objid":264409236,
                "classif_id":82399,
                "histo_classif_date":"2021-09-21T14:59:01.007110",
                "histo_classif_type":"M",
                "histo_classif_id":56,
                "histo_classif_qual":"V",
                "histo_classif_who":3876
              }
            ]
          },
          "classif_info":{
            "title":"Classification info",
            "type":"object",
            "description":"Classification names (self+parent) for involved IDs.",
            "default":{},
            "example":{
              "25932":[
                "Oikopleuridae",
                "Appendicularia"
              ]
            }
          }
        }
      },
      "ObjectSetSummaryRsp":{
        "title":"ObjectSetSummaryRsp",
        "type":"object",
        "properties":{
          "total_objects":{
            "title":"Total objects",
            "type":"integer",
            "description":"Total number of objects in the set.",
            "example":300
          },
          "validated_objects":{
            "title":"Validated objects",
            "type":"integer",
            "description":"Number of validated objects in the set.",
            "example":100
          },
          "dubious_objects":{
            "title":"Dubious objects",
            "type":"integer",
            "description":"Number of dubious objects in the set.",
            "example":100
          },
          "predicted_objects":{
            "title":"Predicted objects",
            "type":"integer",
            "description":"Number of predicted objects in the set.",
            "example":100
          }
        },
        "description":"Classification summary from object set."
      },
      "PredictionInfoRsp":{
        "title":"PredictionInfoRsp",
        "type":"object",
        "properties":{
          "result":{
            "title":"Result",
            "type":"array",
            "items":{
              "maxItems":3,
              "minItems":3,
              "type":"array",
              "items":{
                "title":"type"
              }
            },
            "description":"List of lists [object ID, category ID, score for category].",
            "default":[],
            "example":[
              [
                23456,
                1234,
                0.7
              ],
              [
                23457,
                768,
                0.2
              ]
            ]
          }
        },
        "description":"Prediction information for a set of objects."
      },
      "PredictionInfoT":{
        "title":"PredictionInfoT",
        "required":[
          "object_id",
          "classif_id",
          "score"
        ],
        "type":"object",
        "properties":{
          "object_id":{
            "title":"Object Id",
            "type":"integer"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "score":{
            "title":"Score",
            "type":"number"
          }
        }
      },
      "PredictionReq":{
        "title":"Prediction Request",
        "required":[
          "project_id",
          "source_project_ids",
          "features",
          "categories",
          "pre_mapping"
        ],
        "type":"object",
        "properties":{
          "project_id":{
            "title":"Project Id",
            "type":"integer",
            "description":"The destination project, of which objects will be predicted."
          },
          "source_project_ids":{
            "title":"Source project Ids",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The source projects, objects in them will serve as reference."
          },
          "learning_limit":{
            "title":"Source projects fetching limit",
            "type":"integer",
            "description":"When set (to a positive value), there will be this number  of objects, _per category_, in the learning set."
          },
          "features":{
            "title":"Features",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"The object features AKA free column, to use in the algorithm. Features must be common to all projects, source ones and destination one."
          },
          "categories":{
            "title":"Categories",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"In source projects, only objects validated with these categories will be considered."
          },
          "use_scn":{
            "title":"Use scn",
            "type":"boolean",
            "description":"Use extra features, generated using the image, for improving the prediction.",
            "default":false
          },
          "pre_mapping":{
            "title":"Categories pre-mapping",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"Categories in keys become value one before launching the ML algorithm. Any unknown value is ignored."
          }
        },
        "description":"How to predict, in details.",
        "example":{
          "project_id":[
            3426
          ],
          "source_project_ids":[
            1040,
            1820
          ],
          "features":[
            "fre.area",
            "fre.esd",
            "obj.depth_max"
          ],
          "use_scn":true
        }
      },
      "PredictionRsp":{
        "title":"PredictionRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"Errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Showstopper problems found while preparing the prediction.",
            "default":[],
            "example":[]
          },
          "warnings":{
            "title":"Warnings",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Problems found while preparing the prediction.",
            "default":[],
            "example":[]
          },
          "job_id":{
            "title":"Job Id",
            "type":"integer",
            "description":"The created job, 0 if there were problems.",
            "default":0,
            "example":482
          }
        },
        "description":"Prediction response."
      },
      "ProcessModel":{
        "title":"ProcessModel",
        "required":[
          "processid",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "processid":{
            "title":"Process id",
            "type":"integer",
            "description":"The process Id.",
            "example":1000
          },
          "orig_id":{
            "title":"Original id",
            "type":"string",
            "description":"Original process ID from initial TSV load.",
            "example":"zooprocess_045"
          },
          "free_columns":{
            "title":"Free columns from process mapping in project",
            "type":"object",
            "default":{},
            "example":{
              "software":"zooprocess_pid_to_ecotaxa_7.26_2017/12/19",
              "pressure_gain":"10"
            }
          }
        }
      },
      "ProjectFilters":{
        "title":"Project filters Model",
        "type":"object",
        "properties":{
          "taxo":{
            "title":"Taxo",
            "type":"string",
            "description":"Coma-separated list of numeric taxonomy/category ids. Only include objects classified with one of them.",
            "example":"12,7654,5409"
          },
          "taxochild":{
            "title":"Taxo child",
            "type":"string",
            "description":"If 'Y' and taxo is set, also include children of each member of 'taxo' list in taxonomy tree.",
            "example":"Y"
          },
          "statusfilter":{
            "title":"Statusfilter",
            "maxLength":3,
            "type":"string",
            "description":"Include objects with given status:\n            'NV': Not validated \n            'PV': Predicted or Validated \n            'PVD': Predicted or Validated or Dubious\n            'NVM': Validated, but not by me \n            'VM': Validated by me \n            'U': Not classified\n            other: direct equality comparison with DB value \n        ",
            "example":"NV"
          },
          "MapN":{
            "title":"Map North",
            "type":"string",
            "description":"If all 4 are set (MapN, MapW, MapE, MapS), include objects inside the defined bounding rectangle.",
            "example":44.34
          },
          "MapW":{
            "title":"Map West",
            "type":"string",
            "description":"If all 4 are set (MapN, MapW, MapE, MapS), include objects inside the defined bounding rectangle.",
            "example":3.88
          },
          "MapE":{
            "title":"Map East",
            "type":"string",
            "description":"If all 4 are set (MapN, MapW, MapE, MapS), include objects inside the defined bounding rectangle.",
            "example":7.94
          },
          "MapS":{
            "title":"Map South",
            "type":"string",
            "description":"If all 4 are set (MapN, MapW, MapE, MapS), include objects inside the defined bounding rectangle.",
            "example":42.42
          },
          "depthmin":{
            "title":"Depthmin",
            "type":"string",
            "description":"Positive values. If both are set (depthmin, depthmax), include objects for which both depths (min and max) are inside the range.",
            "example":"10"
          },
          "depthmax":{
            "title":"Depthmax",
            "type":"string",
            "description":"Positive values. If both are set (depthmin, depthmax), include objects for which both depths (min and max) are inside the range.",
            "example":"110"
          },
          "samples":{
            "title":"Samples",
            "type":"string",
            "description":"Coma-separated list of sample IDs, include only objects for these samples.",
            "example":"10987,3456,987,38"
          },
          "instrum":{
            "title":"Instrument",
            "type":"string",
            "description":"Instrument name, include objects for which sampling was done using this instrument.",
            "example":"uvp5"
          },
          "daytime":{
            "title":"Day time",
            "type":"string",
            "description":"Coma-separated list of sun position values: D for Day, U for Dusk, N for Night, A for Dawn (Aube in French).",
            "example":"N,A"
          },
          "month":{
            "title":"Month",
            "type":"string",
            "description":"Coma-separated list of month numbers, 1=Jan and so on.",
            "example":"11,12"
          },
          "fromdate":{
            "title":"From date",
            "type":"string",
            "description":"Format is 'YYYY-MM-DD', include objects collected after this date.",
            "example":"2020-10-09"
          },
          "todate":{
            "title":"To date",
            "type":"string",
            "description":"Format is 'YYYY-MM-DD', include objects collected before this date.",
            "example":"2021-10-09"
          },
          "fromtime":{
            "title":"From time",
            "type":"string",
            "description":"Format is 'HH24:MM:SS', include objects collected after this time of day.",
            "example":"1:17:00"
          },
          "totime":{
            "title":"To time",
            "type":"string",
            "description":"Format is 'HH24:MM:SS', include objects collected before this time of day.",
            "example":"23:32:00"
          },
          "inverttime":{
            "title":"Invert time",
            "type":"string",
            "description":"If '1', include objects outside fromtime and totime range.",
            "example":"0"
          },
          "validfromdate":{
            "title":"Valid from date",
            "type":"string",
            "description":"Format is 'YYYY-MM-DD HH24:MI', include objects validated/set to dubious after this date+time.",
            "example":"2020-10-09 10:00:00"
          },
          "validtodate":{
            "title":"Valid to date",
            "type":"string",
            "description":"Format is 'YYYY-MM-DD HH24:MI', include objects validated/set to dubious before this date+time.",
            "example":"2021-10-09 10:00:00"
          },
          "freenum":{
            "title":"Free num",
            "type":"string",
            "description":"Numerical DB column number in Object as basis for the 2 following criteria (freenumst, freenumend).",
            "example":"n01"
          },
          "freenumst":{
            "title":"Freenum start",
            "type":"string",
            "description":"Start of included range for the column defined by freenum, in which objects are included.",
            "example":"0"
          },
          "freenumend":{
            "title":"Free num end",
            "type":"string",
            "description":"End of included range for the column defined by freenum, in which objects are included.",
            "example":"999999"
          },
          "freetxt":{
            "title":"Free text",
            "type":"string",
            "description":" Textual DB column number as basis for following criteria (freetxtval)\n            If starts with 's' then it's a text column in Sample\n            If starts with 'a' then it's a text column in Acquisition \n            If starts with 'p' then it's a text column in Process \n            If starts with 'o' then it's a text column in Object .\n        ",
            "example":"p01"
          },
          "freetxtval":{
            "title":"Free text val",
            "type":"string",
            "description":"Text to match in the column defined by freetxt, for an object to be include.",
            "example":"zooprocess"
          },
          "filt_annot":{
            "title":"Filter annotator",
            "type":"string",
            "description":"Coma-separated list of annotators, i.e. persons who validated the classification at any point in time.",
            "example":"34,67,67"
          },
          "filt_last_annot":{
            "title":"Filter last annotator",
            "type":"string",
            "description":"Coma-separated list of annotators, i.e. persons who validated the classification in last.",
            "example":"34,67"
          }
        },
        "description":"How to reduce project data."
      },
      "ProjectFiltersDict":{
        "title":"Subset request Model",
        "type":"object",
        "properties":{
          "taxo":{
            "title":"Taxo",
            "type":"string"
          },
          "taxochild":{
            "title":"Taxochild",
            "type":"string"
          },
          "statusfilter":{
            "title":"Statusfilter",
            "type":"string"
          },
          "MapN":{
            "title":"Mapn",
            "type":"string"
          },
          "MapW":{
            "title":"Mapw",
            "type":"string"
          },
          "MapE":{
            "title":"Mape",
            "type":"string"
          },
          "MapS":{
            "title":"Maps",
            "type":"string"
          },
          "depthmin":{
            "title":"Depthmin",
            "type":"string"
          },
          "depthmax":{
            "title":"Depthmax",
            "type":"string"
          },
          "samples":{
            "title":"Samples",
            "type":"string"
          },
          "instrum":{
            "title":"Instrum",
            "type":"string"
          },
          "daytime":{
            "title":"Daytime",
            "type":"string"
          },
          "month":{
            "title":"Month",
            "type":"string"
          },
          "fromdate":{
            "title":"Fromdate",
            "type":"string"
          },
          "todate":{
            "title":"Todate",
            "type":"string"
          },
          "fromtime":{
            "title":"Fromtime",
            "type":"string"
          },
          "totime":{
            "title":"Totime",
            "type":"string"
          },
          "inverttime":{
            "title":"Inverttime",
            "type":"string"
          },
          "validfromdate":{
            "title":"Validfromdate",
            "type":"string"
          },
          "validtodate":{
            "title":"Validtodate",
            "type":"string"
          },
          "freenum":{
            "title":"Freenum",
            "type":"string"
          },
          "freenumst":{
            "title":"Freenumst",
            "type":"string"
          },
          "freenumend":{
            "title":"Freenumend",
            "type":"string"
          },
          "freetxt":{
            "title":"Freetxt",
            "type":"string"
          },
          "freetxtval":{
            "title":"Freetxtval",
            "type":"string"
          },
          "filt_annot":{
            "title":"Filt Annot",
            "type":"string"
          },
          "filt_last_annot":{
            "title":"Filt Last Annot",
            "type":"string"
          }
        }
      },
      "ProjectModel":{
        "title":"ProjectModel",
        "required":[
          "projid",
          "title"
        ],
        "type":"object",
        "properties":{
          "obj_free_cols":{
            "title":"Object free cols",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Object free columns.",
            "default":{},
            "example":{
              "area":"n01",
              "esd":"n02"
            }
          },
          "sample_free_cols":{
            "title":"Sample free cols",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Sample free columns.",
            "default":{},
            "example":{
              "barcode":"t01"
            }
          },
          "acquisition_free_cols":{
            "title":"Acquisition free cols",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Acquisition free columns.",
            "default":{},
            "example":{
              "flash_delay":"t01"
            }
          },
          "process_free_cols":{
            "title":"Process free cols",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Process free columns.",
            "default":{},
            "example":{
              "nb_images":"t01"
            }
          },
          "bodc_variables":{
            "title":"Expressions for computing standard BODC quantities.",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"BODC quantities from columns. Only the 3 keys listed in example are valid.",
            "default":{},
            "example":{
              "subsample_coef":"1/ssm.sub_part",
              "total_water_volume":"sam.tot_vol/1000",
              "individual_volume":"4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3"
            }
          },
          "init_classif_list":{
            "title":"Init classification list",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"Favorite taxa used in classification.",
            "default":[],
            "example":[
              5,
              11493,
              11498,
              11509
            ]
          },
          "managers":{
            "title":"Managers",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/MinUserModel"
            },
            "description":"Managers of this project.",
            "default":[]
          },
          "annotators":{
            "title":"Annotators",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/MinUserModel"
            },
            "description":"Annotators of this project, if not manager.",
            "default":[]
          },
          "viewers":{
            "title":"Viewers",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/MinUserModel"
            },
            "description":"Viewers of this project, if not manager nor annotator.",
            "default":[]
          },
          "instrument":{
            "title":"Instrument",
            "type":"string",
            "description":"This project's instrument code.",
            "example":"Zooscan"
          },
          "instrument_url":{
            "title":"Instrument URL",
            "type":"string",
            "description":"This project's instrument BODC definition.",
            "example":"http://vocab.nerc.ac.uk/collection/L22/current/TOOL1581/"
          },
          "contact":{
            "title":"Contact",
            "allOf":[
              {
                "$ref":"#/components/schemas/MinUserModel"
              }
            ],
            "description":"The contact person is a manager who serves as the contact person for other users and EcoTaxa's managers."
          },
          "highest_right":{
            "title":"Highest right",
            "type":"string",
            "description":"The highest right for requester on this project. One of 'Manage', 'Annotate', 'View'.",
            "default":"",
            "example":"View"
          },
          "license":{
            "title":"License",
            "allOf":[
              {
                "$ref":"#/components/schemas/LicenseEnum"
              }
            ],
            "description":"Data licence.",
            "default":"Copyright",
            "example":"CC BY 4.0"
          },
          "projid":{
            "title":"Project Id",
            "type":"integer",
            "description":"The project Id.",
            "example":4824
          },
          "title":{
            "title":"Title",
            "type":"string",
            "description":"The project title.",
            "example":"MyProject"
          },
          "visible":{
            "title":"Visible",
            "type":"boolean",
            "description":"The project visibility.",
            "example":false
          },
          "status":{
            "title":"Status",
            "type":"string",
            "description":"The project status.",
            "example":"Annotate"
          },
          "objcount":{
            "title":"Object count",
            "type":"number",
            "description":"The number of objects.",
            "example":32292.0
          },
          "pctvalidated":{
            "title":"Percentage validated",
            "type":"number",
            "description":"Percentage of validated images.",
            "example":0.015483711135885049
          },
          "pctclassified":{
            "title":"Percentage classified",
            "type":"number",
            "description":"Percentage of classified images.",
            "example":100.0
          },
          "classifsettings":{
            "title":"Classification settings",
            "type":"string",
            "example":"baseproject=1602\ncritvar=%area,angle,area,area_exc,bx,by,cdexc,centroids,circ.,circex,convarea,convperim,cv,elongation,esd,fcons,feret,feretareaexc,fractal,height,histcum1,histcum2,histcum3,intden,kurt,lat_end,lon_end,major,max,mean,meanpos,median,min,minor,mode,nb1,nb2,perim.,perimareaexc,perimferet,perimmajor,range,skelarea,skew,slope,sr,stddev,symetrieh,symetriehc,symetriev,symetrievc,thickr,width,x,xm,xstart,y,ym,ystart\nposttaxomapping=\nseltaxo=45074,84963,61990,13333,82399,61973,62005,25930,25932,61996,78426,81941,11514,85076,85061,30815,85185,92230,85079,84993,25824,85115,85004,26525,25944,11509,26524,92112,84976,25942,84980,85078,78418,84977,85060,61993,61991,85069,81871,74144,11758,72431,13381,11518,5,18758,85117,92042,84968,84997,87826,92236,92237,92039,84989,85193,83281,78412,92239,71617,81977,45071,12865,85044,81940,85067,12908,85116,56693,85008,92139,92068\nusemodel_foldername=testln1"
          },
          "classiffieldlist":{
            "title":"Classification field list",
            "type":"string",
            "example":"depth_min=depth_min\r\ndepth_max=depth_max\r\narea=area [pixel]\r\nmean=mean [0-255]\r\nfractal=fractal\r\nmajor=major [pixel]\r\nsymetrieh=symetrieh\r\ncirc.=circ\r\nferet = Feret [pixel]"
          },
          "popoverfieldlist":{
            "title":"Pop over field list",
            "type":"string",
            "example":"depth_min=depth_min\r\ndepth_max=depth_max\r\narea=area [pixel]\r\nmean=mean [0-255]\r\nfractal=fractal\r\nmajor=major [pixel]\r\nsymetrieh=symetrieh\r\ncirc.=circ\r\nferet = Feret [pixel]"
          },
          "comments":{
            "title":"Comments",
            "type":"string",
            "description":"The project comments.",
            "example":""
          },
          "description":{
            "title":"Description",
            "type":"string",
            "description":"The project description, i.e. main traits.",
            "example":""
          },
          "rf_models_used":{
            "title":"Rf models used",
            "type":"string",
            "example":""
          },
          "cnn_network_id":{
            "title":"Cnn network id",
            "type":"string",
            "example":"SCN_zooscan_group1"
          }
        },
        "description":"Basic and computed information about the Project."
      },
      "ProjectSetColumnStatsModel":{
        "title":"ProjectSetColumnStatsModel",
        "type":"object",
        "properties":{
          "proj_ids":{
            "title":"Projects IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"Projects IDs from the call."
          },
          "total":{
            "title":"Total of rows",
            "type":"integer",
            "description":"All rows regardless of emptiness."
          },
          "columns":{
            "title":"Columns",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Column names from the call."
          },
          "counts":{
            "title":"Counts",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"Counts of non-empty values, one per column."
          },
          "variances":{
            "title":"Variances",
            "type":"array",
            "items":{
              "type":"number"
            },
            "description":"Variances of values, one per column."
          }
        }
      },
      "ProjectSummaryModel":{
        "title":"ProjectSummaryModel",
        "required":[
          "projid",
          "title"
        ],
        "type":"object",
        "properties":{
          "projid":{
            "title":"Project Id",
            "type":"integer",
            "description":"Project unique identifier.",
            "example":1
          },
          "title":{
            "title":"Project title",
            "type":"string",
            "description":"Project's title.",
            "example":"Zooscan Tara Med"
          }
        }
      },
      "ProjectTaxoStatsModel":{
        "title":"ProjectTaxoStatsModel",
        "required":[
          "projid",
          "nb_unclassified",
          "nb_validated",
          "nb_dubious",
          "nb_predicted"
        ],
        "type":"object",
        "properties":{
          "projid":{
            "title":"projid",
            "type":"integer",
            "description":"The project id.",
            "example":1
          },
          "used_taxa":{
            "title":"used_taxa",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The taxa/category ids used inside the project. An id of -1 means some unclassified objects.",
            "default":[],
            "example":[
              45072,
              78418,
              84963,
              85011,
              85012,
              85078
            ]
          },
          "nb_unclassified":{
            "title":"nb_unclassified",
            "type":"integer",
            "description":"The number of unclassified objects inside the project.",
            "example":0
          },
          "nb_validated":{
            "title":"nb_validated",
            "type":"integer",
            "description":"The number of validated objects inside the project.",
            "example":5000
          },
          "nb_dubious":{
            "title":"nb_dubious",
            "type":"integer",
            "description":"The number of dubious objects inside the project.",
            "example":56
          },
          "nb_predicted":{
            "title":"nb_predicted",
            "type":"integer",
            "description":"The number of predicted objects inside the project.",
            "example":1345
          }
        }
      },
      "ProjectUserStatsModel":{
        "title":"ProjectUserStatsModel",
        "type":"object",
        "properties":{
          "projid":{
            "title":"Project id",
            "type":"integer",
            "description":"The project id."
          },
          "annotators":{
            "title":"Annotators",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/MinimalUserBO"
            },
            "description":"The users who ever decided on classification or state of objects."
          },
          "activities":{
            "title":"Activities",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserActivity"
            },
            "description":"More details on annotators' activities."
          }
        }
      },
      "ResetPasswordReq":{
        "title":"ResetPasswordReq",
        "type":"object",
        "properties":{
          "id":{
            "title":"User Id",
            "type":"integer",
            "description":"User unique identifier.",
            "default":-1,
            "example":1
          },
          "email":{
            "title":"Email",
            "type":"string"
          },
          "password":{
            "title":"Password",
            "type":"string"
          }
        },
        "description":"Minimal user information need to reset the password"
      },
      "SampleModel":{
        "title":"SampleModel",
        "required":[
          "sampleid",
          "projid",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "sampleid":{
            "title":"Sample Id",
            "type":"integer",
            "description":"The sample Id.",
            "example":100
          },
          "projid":{
            "title":"Project Id",
            "type":"integer",
            "description":"The project Id.",
            "example":4
          },
          "orig_id":{
            "title":"Original id",
            "type":"string",
            "description":"Original sample ID from initial TSV load.",
            "example":"dewex_leg2_19"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number",
            "description":"The latitude.",
            "example":42.0231666666667
          },
          "longitude":{
            "title":"Longitude",
            "type":"number",
            "description":"The longitude.",
            "example":4.71766666666667
          },
          "dataportal_descriptor":{
            "title":"Dataportal descriptor.",
            "type":"string",
            "example":""
          },
          "free_columns":{
            "title":"Free columns",
            "type":"object",
            "description":"Free columns from sample mapping in project.",
            "default":{},
            "example":{
              "flash_delay":"t01"
            }
          }
        }
      },
      "SampleTaxoStatsModel":{
        "title":"SampleTaxoStatsModel",
        "type":"object",
        "properties":{
          "sample_id":{
            "title":"Sample id",
            "type":"integer",
            "description":"The sample id."
          },
          "used_taxa":{
            "title":"Used taxa",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The taxa/category ids used inside the sample. -1 for unclassified objects."
          },
          "nb_unclassified":{
            "title":"Number unclassified",
            "type":"integer",
            "description":"The number of unclassified objects inside the sample."
          },
          "nb_validated":{
            "title":"Number validated",
            "type":"integer",
            "description":"The number of validated objects inside the sample."
          },
          "nb_dubious":{
            "title":"Number dubious",
            "type":"integer",
            "description":"The number of dubious objects inside the sample."
          },
          "nb_predicted":{
            "title":"Number predicted",
            "type":"integer",
            "description":"The number of predicted objects inside the sample."
          }
        }
      },
      "SciExportTypeEnum":{
        "title":"SciExportTypeEnum",
        "enum":[
          "ABO",
          "CNC",
          "BIV"
        ],
        "type":"string",
        "description":"Computed export quantities"
      },
      "SimilaritySearchRsp":{
        "title":"Similarity Search Response",
        "required":[
          "neighbor_ids",
          "sim_scores"
        ],
        "type":"object",
        "properties":{
          "neighbor_ids":{
            "title":"Neighbor IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The list of similar objects IDs."
          },
          "sim_scores":{
            "title":"Similarity Scores",
            "type":"array",
            "items":{
              "type":"number"
            },
            "description":"The list of similarity scores, between 0 and 1. The higher the closer, e.g. 1 for the target_id itself."
          },
          "message":{
            "title":"Message",
            "type":"string",
            "description":"A message to the user. If not 'Success' then some condition prevented the computation."
          }
        },
        "description":"The list of similar objects.",
        "example":{
          "neighbor_ids":[
            1040,
            1041,
            1042,
            1043,
            1044,
            1045,
            1046,
            1047
          ],
          "sim_scores":[
            1.0,
            0.9,
            0.8,
            0.7,
            0.6,
            0.5,
            0.4,
            0.3
          ],
          "message":"Success"
        }
      },
      "SimpleImportReq":{
        "title":"Simple import request Model",
        "required":[
          "source_path",
          "values"
        ],
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Source path",
            "type":"string",
            "description":"Source path on server, to zip or plain directory.",
            "example":"/import_test"
          },
          "values":{
            "title":"Constant values, per field, to write for all images. If a field has no value don't include it.",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":":imgdate, imgtime, latitude, longitude, depthmin, depthmax, taxolb, userlb, status",
            "example":{
              "latitude":43.69,
              "longitude":7.3
            }
          },
          "possible_values":{
            "title":"Possible Values",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[
              "imgdate",
              "imgtime",
              "latitude",
              "longitude",
              "depthmin",
              "depthmax",
              "taxolb",
              "userlb",
              "status"
            ]
          }
        },
        "description":"Simple Import request."
      },
      "SimpleImportRsp":{
        "title":"SimpleImportRsp",
        "required":[
          "job_id",
          "errors"
        ],
        "type":"object",
        "properties":{
          "job_id":{
            "title":"Job Id",
            "type":"integer",
            "description":"The job which was created for the run. 0 if called with dry_run option.",
            "example":1
          },
          "errors":{
            "title":"Errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Validation errors, dry_run or not.",
            "example":[
              "'abcde' is not a valid value for SimpleImportFields.latitude",
              "'456.5' is not a valid value for SimpleImportFields.longitude",
              "'very very low' is not a valid value for SimpleImportFields.depthmin"
            ]
          }
        },
        "description":"Simple Import, response."
      },
      "SubsetReq":{
        "title":"Subset request Model",
        "required":[
          "dest_prj_id",
          "group_type",
          "limit_type",
          "limit_value"
        ],
        "type":"object",
        "properties":{
          "filters":{
            "title":"Filters",
            "allOf":[
              {
                "$ref":"#/components/schemas/ProjectFiltersDict"
              }
            ],
            "description":"The filters to apply to project.",
            "default":{},
            "example":{
              "freenum":"n01",
              "freenumst":"0"
            }
          },
          "dest_prj_id":{
            "title":"Destination project id",
            "type":"integer",
            "description":"The destination project ID.",
            "example":22
          },
          "group_type":{
            "title":"Group type",
            "allOf":[
              {
                "$ref":"#/components/schemas/GroupDefinitions"
              }
            ],
            "description":"Define the groups in which to apply limits. C for categories, S for samples, A for acquisitions.",
            "example":"A"
          },
          "limit_type":{
            "title":"Limit type",
            "allOf":[
              {
                "$ref":"#/components/schemas/LimitMethods"
              }
            ],
            "description":"The type of limit_value: P for %, V for constant, both per group.",
            "example":"P"
          },
          "limit_value":{
            "title":"Limit value",
            "type":"number",
            "description":"Limit value, e.g. 20% or 5 per copepoda or 5% per sample.",
            "example":10.0
          }
        },
        "description":"Subset request."
      },
      "SubsetRsp":{
        "title":"SubsetRsp",
        "required":[
          "job_id"
        ],
        "type":"object",
        "properties":{
          "job_id":{
            "title":"Job Id",
            "type":"integer",
            "description":"The job created for this operation.",
            "example":143
          }
        },
        "description":"Subset response."
      },
      "SummaryExportGroupingEnum":{
        "title":"SummaryExportGroupingEnum",
        "enum":[
          "",
          "S",
          "A",
          "P"
        ],
        "type":"string",
        "description":"It's implied that we minimally group/aggregate by category AKA classification AKA taxon"
      },
      "SummaryExportQuantitiesOptionsEnum":{
        "title":"SummaryExportQuantitiesOptionsEnum",
        "enum":[
          "abundance",
          "concentration",
          "biovolume"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "SummaryExportReq":{
        "title":"Summary Export request Model",
        "required":[
          "project_id"
        ],
        "type":"object",
        "properties":{
          "project_id":{
            "title":"Project Id",
            "type":"integer",
            "description":"The project to export.",
            "example":1
          },
          "quantity":{
            "title":"Quantity",
            "allOf":[
              {
                "$ref":"#/components/schemas/SummaryExportQuantitiesOptionsEnum"
              }
            ],
            "description":"The quantity to compute. Abundance is always possible.",
            "default":"abundance",
            "example":"abundance"
          },
          "summarise_by":{
            "title":"Summarise by",
            "allOf":[
              {
                "$ref":"#/components/schemas/SummaryExportSumOptionsEnum"
              }
            ],
            "description":"Computations aggregation level.",
            "default":"sample",
            "example":"acquisition"
          },
          "taxo_mapping":{
            "title":"Categories mapping",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"Mapping from present taxon (key) to output replacement one (value). Use a 0 replacement to _discard_ the present taxon.",
            "default":{},
            "example":{
              "456":956,
              "2456":213,
              "7153":0
            }
          },
          "formulae":{
            "title":"Computation formulas",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Transitory: How to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'.Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'",
            "default":{},
            "example":{
              "subsample_coef":"1/ssm.sub_part",
              "total_water_volume":"sam.tot_vol/1000",
              "individual_volume":"4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3"
            }
          },
          "out_to_ftp":{
            "title":"Out to ftp",
            "type":"boolean",
            "description":"Copy result file to FTP area. Original file is still available.",
            "default":false,
            "example":false
          }
        },
        "description":"Summary export request."
      },
      "SummaryExportSumOptionsEnum":{
        "title":"SummaryExportSumOptionsEnum",
        "enum":[
          "none",
          "sample",
          "acquisition"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "TaxaSearchRsp":{
        "title":"TaxaSearchRsp",
        "required":[
          "id",
          "text",
          "pr"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"The taxon/category IDs.",
            "example":14334
          },
          "renm_id":{
            "title":"Renm_id",
            "type":"integer",
            "description":"The advised replacement ID if the taxon/category is deprecated.",
            "example":"null"
          },
          "text":{
            "title":"Text",
            "type":"string",
            "description":"The taxon name, display one.",
            "example":"Bangia"
          },
          "pr":{
            "title":"Pr",
            "type":"integer",
            "description":"1 if the taxon is in project list, 0 otherwise.",
            "example":0
          }
        }
      },
      "TaxonCentral":{
        "title":"TaxonCentral",
        "required":[
          "id",
          "name",
          "taxotype",
          "taxostatus"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"The unique numeric id of the taxon.",
            "example":12876
          },
          "parent_id":{
            "title":"Parent id",
            "type":"integer",
            "description":"The unique numeric id of the taxon parent.",
            "example":11509
          },
          "name":{
            "title":"Name",
            "type":"string",
            "description":"The name of the taxon.",
            "example":"Echinodermata X"
          },
          "id_source":{
            "title":"Id source",
            "type":"string",
            "description":"The source ID.",
            "example":"70372"
          },
          "taxotype":{
            "title":"Taxo type",
            "type":"string",
            "description":"The taxon type, 'M' for Morpho or 'P' for Phylo.",
            "example":"P"
          },
          "display_name":{
            "title":"Display name",
            "type":"string",
            "description":"The display name of the taxon. It is suffixed in EcoTaxoServer with (Deprecated) when taxostatus is 'D'",
            "example":"Echinodermata X"
          },
          "lastupdate_datetime":{
            "title":"Last update datetime",
            "type":"string",
            "description":"Taxon last update. Date, with format YYYY-MM-DD hh:mm:ss.",
            "format":"date-time",
            "example":"2021-08-20 09:09:40"
          },
          "id_instance":{
            "title":"Id instance",
            "type":"integer",
            "description":"The instance Id.",
            "example":1
          },
          "taxostatus":{
            "title":"Taxo status",
            "type":"string",
            "description":"The taxon status, N for Not approved, A for Approved or D for Deprecated.",
            "example":"A"
          },
          "rename_to":{
            "title":"Rename to",
            "type":"integer",
            "description":"The advised replacement Name if the taxon is deprecated.",
            "example":"null"
          },
          "source_url":{
            "title":"Source url",
            "type":"string",
            "description":"The source url.",
            "example":"http://www.google.fr/"
          },
          "source_desc":{
            "title":"Source desc",
            "type":"string",
            "description":"The source description.",
            "example":"null"
          },
          "creator_email":{
            "title":"Creator email",
            "type":"string",
            "description":"Email of the creator of the taxon.",
            "example":"creator.user@emaim.com"
          },
          "creation_datetime":{
            "title":"Creation datetime",
            "type":"string",
            "description":"Taxon creation date. Date, with format YYYY-MM-DD hh:mm:ss.",
            "format":"date-time",
            "example":"2021-08-20 09:09:39"
          },
          "nbrobj":{
            "title":"Number of objects",
            "type":"integer",
            "description":"Number of objects in this category exactly.",
            "example":"5800"
          },
          "nbrobjcum":{
            "title":"Number of descendant objects",
            "type":"integer",
            "description":"Number of objects in this category and descendant ones.",
            "example":"54800"
          }
        }
      },
      "TaxonModel":{
        "title":"TaxonModel",
        "required":[
          "id",
          "name",
          "type",
          "nb_objects",
          "nb_children_objects",
          "display_name",
          "lineage",
          "id_lineage",
          "children"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"The taxon/category IDs.",
            "example":1
          },
          "renm_id":{
            "title":"Renm id",
            "type":"integer",
            "description":"The advised replacement ID if the taxon/category is deprecated.",
            "example":"null"
          },
          "name":{
            "title":"Name",
            "type":"string",
            "description":"The taxon/category verbatim name.",
            "example":"living"
          },
          "type":{
            "title":"Type",
            "type":"string",
            "description":"The taxon/category type, 'M' for Morpho or 'P' for Phylo.",
            "example":"P"
          },
          "nb_objects":{
            "title":"Nb objects",
            "type":"integer",
            "description":"How many objects are classified in this category.",
            "example":34118
          },
          "nb_children_objects":{
            "title":"Nb children objects",
            "type":"integer",
            "description":"How many objects are classified in this category children (not itself).",
            "example":30091727
          },
          "display_name":{
            "title":"Display name",
            "type":"string",
            "description":"The taxon/category display name.",
            "example":"living<"
          },
          "lineage":{
            "title":"Lineage",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"The taxon/category name of ancestors, including self, in first.",
            "example":[
              "living"
            ]
          },
          "id_lineage":{
            "title":"Id lineage",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The taxon/category IDs of ancestors, including self, in first.",
            "example":[
              1
            ]
          },
          "children":{
            "title":"Children",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The taxon/category IDs of children.",
            "example":[
              92952,
              2,
              92329,
              85048,
              4,
              93599,
              93687,
              85011,
              92951,
              93698,
              84961,
              92696,
              3
            ]
          }
        }
      },
      "TaxonUsageModel":{
        "title":"TaxonUsageModel",
        "required":[
          "projid",
          "title",
          "nb_validated"
        ],
        "type":"object",
        "properties":{
          "projid":{
            "title":"Project Id",
            "type":"integer",
            "description":"Project unique identifier.",
            "example":1
          },
          "title":{
            "title":"Project title",
            "type":"string",
            "description":"Project's title.",
            "example":"Zooscan Tara Med"
          },
          "nb_validated":{
            "title":"Nb validated",
            "type":"integer",
            "description":"How many validated objects in this category in this project.",
            "example":129
          }
        }
      },
      "TaxonomyRecast":{
        "title":"TaxonomyRecast",
        "required":[
          "from_to"
        ],
        "type":"object",
        "properties":{
          "from_to":{
            "title":"Categories mapping",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"Mapping from seen taxon (key) to output replacement one (value). Use a null replacement to _discard_ the present taxon. Note: keys are strings.",
            "example":{
              "456":956,
              "2456":213
            }
          },
          "doc":{
            "title":"Mapping documentation",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"To keep memory of the reasons for the above mapping. Note: keys are strings.",
            "example":{
              "456":"Up to species",
              "2456":"Up to nearest non-morpho",
              "9134":"Detritus"
            }
          }
        },
        "additionalProperties":false,
        "description":"In various contexts, a taxo recast (from taxon -> to taxon) setting."
      },
      "TaxonomyTreeStatus":{
        "title":"TaxonomyTreeStatus",
        "type":"object",
        "properties":{
          "last_refresh":{
            "title":"Last refresh",
            "type":"string",
            "description":"Taxonomy tree last refresh/sync from taxonomy server. Date, with format YYYY-MM-DDThh:mm:ss.",
            "example":"2021-10-07T01:26:47"
          }
        }
      },
      "UserActivateReq":{
        "title":"UserActivateReq",
        "type":"object",
        "properties":{
          "token":{
            "title":"token",
            "type":"string",
            "description":"token when the user is not an admin and must confirm the email. "
          },
          "reason":{
            "title":"Reason",
            "type":"string",
            "description":"status,optional users administrator comment related to the status. ",
            "example":"Email is not accepted...."
          },
          "password":{
            "title":"Password",
            "type":"string",
            "description":"Existing user can modify own email and must confirm it with token and password when email confirmation is on. "
          }
        },
        "description":"Request to modify status of a user by a Users Administrator or confirm email_status, or resend emails (when token is expired) to confirm email or modify pending profile by a user."
      },
      "UserActivity":{
        "title":"UserActivity",
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "nb_actions":{
            "title":"Nb Actions",
            "type":"integer"
          },
          "last_annot":{
            "title":"Last Annot",
            "type":"string"
          }
        }
      },
      "UserModelWithRights":{
        "title":"UserModelWithRights",
        "required":[
          "id",
          "email",
          "name"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"The unique numeric id of this user.",
            "example":1
          },
          "email":{
            "title":"Email",
            "type":"string",
            "description":"User's email address, as text, used during registration.",
            "example":"ecotaxa.api.user@gmail.com"
          },
          "password":{
            "title":"User's password'",
            "type":"string",
            "description":"Encrypted (or not) password.",
            "example":"$foobar45$"
          },
          "name":{
            "title":"Name",
            "type":"string",
            "description":"User's full name, as text.",
            "example":"userName"
          },
          "organisation":{
            "title":"Organisation",
            "type":"string",
            "description":"User's organisation name, as text.",
            "example":"Oceanographic Laboratory of Villefranche sur Mer - LOV"
          },
          "status":{
            "title":"Account status",
            "type":"integer",
            "description":"Status of the user : 1 for active, 0 for inactive ,2 for pending, -1 for blocked",
            "example":1
          },
          "status_date":{
            "title":"status date",
            "type":"string",
            "description":"Timestamp status modification date",
            "format":"date-time",
            "example":"2020-11-05T12:31:48.299713"
          },
          "status_admin_comment":{
            "title":"Comment",
            "type":"string",
            "description":"Optional Users admininistrator comment about the account status.",
            "example":""
          },
          "country":{
            "title":"Country",
            "type":"string",
            "description":"The country name, as text (but chosen in a consistent list).",
            "example":"France"
          },
          "orcid":{
            "title":"ORCID ID",
            "type":"string",
            "description":"The orcid id https://support.orcid.org.",
            "example":"0000-0001-2345-6789"
          },
          "usercreationdate":{
            "title":"User creation date",
            "type":"string",
            "description":"The date of creation of the user, as text formatted according to the ISO 8601 standard.",
            "format":"date-time",
            "example":"2020-11-05T12:31:48.299713"
          },
          "usercreationreason":{
            "title":"User creation reason",
            "type":"string",
            "description":"Paragraph describing the usage of EcoTaxa made by the user.",
            "example":"Analysis of size and shapes of plastic particles"
          },
          "mail_status":{
            "title":"Mail status",
            "type":"boolean",
            "description":"True for verified, False for waiting for verification, None for no action.",
            "example":true
          },
          "mail_status_date":{
            "title":"Mail status date",
            "type":"string",
            "description":"Timestamp mail status modification date",
            "format":"date-time",
            "example":"2020-11-05T12:31:48.299713"
          },
          "can_do":{
            "title":"User's permissions",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"List of User's allowed actions : 1 create a project, 2 administrate the app, 3 administrate users, 4 create taxon.",
            "default":[],
            "example":[
              1,
              4
            ]
          },
          "last_used_projects":{
            "title":"Last used projects",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ProjectSummaryModel"
            },
            "description":"List of User's last used projects.",
            "default":[],
            "example":[
              {
                "projid":3,
                "title":"Zooscan point B"
              },
              {
                "projid":1,
                "title":"Zooscan Tara Med"
              }
            ]
          }
        }
      },
      "ValidationError":{
        "title":"ValidationError",
        "required":[
          "loc",
          "msg",
          "type"
        ],
        "type":"object",
        "properties":{
          "loc":{
            "title":"Location",
            "type":"array",
            "items":{
              "type":"string"
            }
          },
          "msg":{
            "title":"Message",
            "type":"string"
          },
          "type":{
            "title":"Error Type",
            "type":"string"
          }
        }
      }
    },
    "securitySchemes":{
      "BearerOrCookieAuth":{
        "type":"oauth2",
        "flows":{
          "password":{
            "scopes":{},
            "tokenUrl":"/token"
          }
        }
      }
    }
  }
}