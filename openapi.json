{
  "openapi":"3.0.2",
  "info":{
    "title":"EcoTaxa",
    "version":"0.0.8"
  },
  "paths":{
    "/login":{
      "post":{
        "tags":[
          "authentification"
        ],
        "summary":"Login",
        "description":"Login barrier. If successful, the login will return a JWT which will have to be used\nin Bearer authentication scheme for subsequent calls.\n\n-`username`: User *email* which was used during registration\n\n-`password`: User password",
        "operationId":"login_login_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/LoginReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Users",
        "description":"Return the list of users. For admins only.",
        "operationId":"get_users_users_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Users Users Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/UserModel"
                  }
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/users/me":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Show Current User",
        "description":"Return currently authenticated user. On top of DB fields, 'can_do' lists the allowed system-wide actions.",
        "operationId":"show_current_user_users_me_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/UserModelWithRights"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/users/my_preferences/{project_id}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Current User Prefs",
        "description":"Return one preference, for project and currently authenticated user.",
        "operationId":"get_current_user_prefs_users_my_preferences__project_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Key",
              "type":"string"
            },
            "name":"key",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Current User Prefs Users My Preferences  Project Id  Get",
                  "type":"string"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      },
      "put":{
        "tags":[
          "users"
        ],
        "summary":"Set Current User Prefs",
        "description":"Set one preference, for project and currently authenticated user.\n-`key`: The preference key\n-`value`: The value to set this preference to",
        "operationId":"set_current_user_prefs_users_my_preferences__project_id__put",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Key",
              "type":"string"
            },
            "name":"key",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Value",
              "type":"string"
            },
            "name":"value",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/users/search":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Search User",
        "description":"Search users using various criteria, search is case insensitive and might contain % chars.",
        "operationId":"search_user_users_search_get",
        "parameters":[
          {
            "required":false,
            "schema":{
              "title":"By Name",
              "type":"string"
            },
            "name":"by_name",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search User Users Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/UserModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/users/{user_id}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get User",
        "description":"Return a single user by its id.",
        "operationId":"get_user_users__user_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"User Id",
              "type":"integer"
            },
            "name":"user_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/UserModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/collections/create":{
      "post":{
        "tags":[
          "collections"
        ],
        "summary":"Create Collection",
        "description":"Create a collection with at least one project inside.\n\n*Currently only for admins*",
        "operationId":"create_collection_collections_create_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CreateCollectionReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/collections/search":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Search Collection",
        "description":"Search for collections.\n\n*Currently only for admins*",
        "operationId":"search_collection_collections_search_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Title",
              "type":"string"
            },
            "name":"title",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Collection Collections Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/CollectionModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/collections/by_title":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Collection By Title",
        "description":"Return the single collection with this title.\nFor published datasets.\n!!! DO NOT MODIFY BEHAVIOR !!!",
        "operationId":"collection_by_title_collections_by_title_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Q",
              "type":"string"
            },
            "name":"q",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Get Collection",
        "description":"Read a collection by its ID.\n\n*Currently only for admins*",
        "operationId":"get_collection_collections__collection_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer"
            },
            "name":"collection_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      },
      "put":{
        "tags":[
          "collections"
        ],
        "summary":"Update Collection",
        "description":"Update the collection. Note that some updates are silently failing when not compatible\nwith the composing projects.\n\n*Currently only for admins*",
        "operationId":"update_collection_collections__collection_id__put",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer"
            },
            "name":"collection_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CollectionModel"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      },
      "delete":{
        "tags":[
          "collections"
        ],
        "summary":"Erase Collection",
        "description":"Delete the collection, i.e. the precious fields, as the projects are just unliked from the collection.",
        "operationId":"erase_collection_collections__collection_id__delete",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer"
            },
            "name":"collection_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/collections/{collection_id}/export/emodnet":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Emodnet Format Export",
        "description":"Export the collection in EMODnet format, @see https://www.emodnet-ingestion.eu/\nProduces a DwC-A archive into a temporary directory, ready for download.\n- param `dry_run`: If set, then only a diagnostic of doability will be done.\n- param `with_zeroes`: If set, then *absent* records will be generated, in the relevant samples,\n for categories present in other samples.\n- param `with_computations`: If set, then an attempt will be made to compute organisms concentrations\nand biovolumes.\n- param `auto_morpho`: If set, then any object classified on a Morpho category will be added to\n the count of the nearest Phylo parent, upward in the tree.\n\nMaybe useful, a reader in Python: https://python-dwca-reader.readthedocs.io/en/latest/index.html\n\n*Currently only for admins*",
        "operationId":"emodnet_format_export_collections__collection_id__export_emodnet_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer"
            },
            "name":"collection_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Dry Run",
              "type":"boolean"
            },
            "name":"dry_run",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"With Zeroes",
              "type":"boolean"
            },
            "name":"with_zeroes",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Auto Morpho",
              "type":"boolean"
            },
            "name":"auto_morpho",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"With Computations",
              "type":"boolean"
            },
            "name":"with_computations",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/EMODnetExportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/search":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Search Projects",
        "description":"Return projects for current user, if any.\n- `param` also_others: Allows to return projects for which given user has no right\n- `param` for_managing: Allows to return project that can be written to (including erased) by the given user\n- `param` title_filter: Use this pattern for matching returned projects names\n- `param` instrument_filter: Only return projects where this instrument was used\n- `param` filter_subset: Only return projects having 'subset' in their names",
        "operationId":"search_projects_projects_search_get",
        "parameters":[
          {
            "required":false,
            "schema":{
              "title":"Also Others",
              "type":"boolean",
              "default":false
            },
            "name":"also_others",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"For Managing",
              "type":"boolean",
              "default":false
            },
            "name":"for_managing",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Title Filter",
              "type":"string",
              "default":""
            },
            "name":"title_filter",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Instrument Filter",
              "type":"string",
              "default":""
            },
            "name":"instrument_filter",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Filter Subset",
              "type":"boolean",
              "default":false
            },
            "name":"filter_subset",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Projects Projects Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/create":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Create Project",
        "description":"Create an empty project with only a title, and return its number.\nThe project will be managed by current user.\nThe user has to be app administrator or project creator.",
        "operationId":"create_project_projects_create_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CreateProjectReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/subset":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Subset",
        "description":"Subset a project into another one.",
        "operationId":"project_subset_projects__project_id__subset_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/SubsetReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SubsetRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Query",
        "description":"Read project if it exists for current user, eventually for managing it.",
        "operationId":"project_query_projects__project_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":false,
            "schema":{
              "title":"For Managing",
              "type":"boolean",
              "default":false
            },
            "name":"for_managing",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProjectModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      },
      "put":{
        "tags":[
          "projects"
        ],
        "summary":"Update Project",
        "description":"Update the project.\nNote that some fields will NOT be updated and simply ignored, e.g. *free_cols.",
        "operationId":"update_project_projects__project_id__put",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectModel"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      },
      "delete":{
        "tags":[
          "projects"
        ],
        "summary":"Erase Project",
        "description":"Delete the project.\n    Optionally, if \"only_objects\" is set, the project structure is kept,\n        but emptied from any object/sample/acquisition/process\n    Otherwise, no trace of the project will remain in the database.",
        "operationId":"erase_project_projects__project_id__delete",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":false,
            "schema":{
              "title":"Only Objects",
              "type":"boolean",
              "default":false
            },
            "name":"only_objects",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/project_set/taxo_stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Set Get Stats",
        "description":"Read projects statistics, i.e. used taxa and classification states.\n\nIf several `ìds` are provided, one stat record will be returned per project.\nIf several `taxa_ids` are provided, one stat record will be returned per requested taxa, if populated.\nIf `taxa_ids` is 'all', all valued taxa in the project(s) are returned.",
        "operationId":"project_set_get_stats_project_set_taxo_stats_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Ids",
              "type":"string"
            },
            "name":"ids",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Taxa Ids",
              "type":"string",
              "default":""
            },
            "name":"taxa_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Set Get Stats Project Set Taxo Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectTaxoStatsModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/project_set/user_stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Set Get User Stats",
        "description":"Read projects user statistics.",
        "operationId":"project_set_get_user_stats_project_set_user_stats_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Ids",
              "type":"string"
            },
            "name":"ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Set Get User Stats Project Set User Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectUserStatsModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/merge":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Merge",
        "description":"Merge another project into this one. It's more a phagocytosis than a merge, as the source will see\nall its objects gone and will be erased.\n- param `dry_run`: If set, then only a diagnostic of doability will be done.",
        "operationId":"project_merge_projects__project_id__merge_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Source Project Id",
              "type":"integer"
            },
            "name":"source_project_id",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Dry Run",
              "type":"boolean"
            },
            "name":"dry_run",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/MergeRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/check":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Check",
        "description":"Check consistency of a project.",
        "operationId":"project_check_projects__project_id__check_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Stats",
        "description":"Check consistency of a project.",
        "operationId":"project_stats_projects__project_id__stats_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/projects/{project_id}/recompute_geo":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Recompute Geography",
        "description":"Recompute geography information for all samples in project.",
        "operationId":"project_recompute_geography_projects__project_id__recompute_geo_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/import_prep/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Import Preparation",
        "description":"Prepare/validate the import of an EcoTaxa archive or directory.",
        "operationId":"import_preparation_import_prep__project_id__post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ImportPrepReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ImportPrepRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/import_real/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Real Import",
        "description":"Import an EcoTaxa archive or directory.",
        "operationId":"real_import_import_real__project_id__post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ImportRealReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ImportRealRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/simple_import/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Simple Import",
        "description":"Import images only, with same metadata for all.",
        "operationId":"simple_import_simple_import__project_id__post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/SimpleImportReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SimpleImportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/samples/search":{
      "get":{
        "tags":[
          "samples"
        ],
        "summary":"Samples Search",
        "description":"Read samples for a set of projects.\n\n- project_ids: any(non number)-separated list of project numbers\n- id_pattern: sample id textual pattern. Use * or '' for 'any matches'. Match is case-insensitive.",
        "operationId":"samples_search_samples_search_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Ids",
              "type":"string"
            },
            "name":"project_ids",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Id Pattern",
              "type":"string"
            },
            "name":"id_pattern",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Samples Search Samples Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/SampleModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/sample_set/update":{
      "post":{
        "tags":[
          "samples"
        ],
        "summary":"Update Samples",
        "description":"Do the required update for each sample in the set. Any non-null field in the model is written to\nevery impacted sample.\n    Return the number of updated entities.",
        "operationId":"update_samples_sample_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/sample/{sample_id}":{
      "get":{
        "tags":[
          "samples"
        ],
        "summary":"Sample Query",
        "description":"Read a single object.",
        "operationId":"sample_query_sample__sample_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Sample Id",
              "type":"integer"
            },
            "name":"sample_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SampleModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/acquisitions/search":{
      "get":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Acquisitions Search",
        "description":"Read all acquisitions for a project.",
        "operationId":"acquisitions_search_acquisitions_search_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Acquisitions Search Acquisitions Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/AcquisitionModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/acquisition_set/update":{
      "post":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Update Acquisitions",
        "description":"Do the required update for each acquisition in the set.\n    Return the number of updated entities.",
        "operationId":"update_acquisitions_acquisition_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/acquisition/{acquisition_id}":{
      "get":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Acquisition Query",
        "description":"Read a single object.",
        "operationId":"acquisition_query_acquisition__acquisition_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Acquisition Id",
              "type":"integer"
            },
            "name":"acquisition_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/AcquisitionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/instruments/":{
      "get":{
        "tags":[
          "instrument"
        ],
        "summary":"Instrument Query",
        "description":"Query for instruments, inside specific project(s).",
        "operationId":"instrument_query_instruments__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Ids",
              "type":"string"
            },
            "name":"project_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Instrument Query Instruments  Get",
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process_set/update":{
      "post":{
        "tags":[
          "processes"
        ],
        "summary":"Update Processes",
        "description":"Do the required update for each process in the set.\n    Return the number of updated entities.",
        "operationId":"update_processes_process_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Processes Process Set Update Post",
                  "type":"integer"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/process/{process_id}":{
      "get":{
        "tags":[
          "processes"
        ],
        "summary":"Process Query",
        "description":"Read a single object.",
        "operationId":"process_query_process__process_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Process Id",
              "type":"integer"
            },
            "name":"process_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProcessModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/query":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Get Object Set",
        "description":"Return object ids for the given project with the filters.\n\nOptionally:\n\n    - fields will specify the needed object (and ancilliary entities) fields\n    - order_field will order the result using given field, If prefixed with \"-\" then it will be reversed.\n    - window_start & window_size allows to return only a slice of the result.\n\nFields follow the naming convention: `prefix.field`. Prefix is either 'obj' for main object, 'fre' for free fields, 'img' for the visible image.\n    - Column obj.imgcount contains the total count of images for the object.",
        "operationId":"get_object_set_object_set__project_id__query_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":false,
            "schema":{
              "title":"Fields",
              "type":"string"
            },
            "name":"fields",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Order Field",
              "type":"string"
            },
            "name":"order_field",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Window Start",
              "type":"integer"
            },
            "name":"window_start",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Window Size",
              "type":"integer"
            },
            "name":"window_size",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetQueryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/summary":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Get Object Set Summary",
        "description":"For the given project, with given filters, return the classification summary, i.e.:\n    - Total number of objects\nAlso if 'only_total' is not set:\n    - Number of Validated ones\n    - Number of Dubious ones\n    - Number of Predicted ones",
        "operationId":"get_object_set_summary_object_set__project_id__summary_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Only Total",
              "type":"boolean"
            },
            "name":"only_total",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetSummaryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/reset_to_predicted":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Reset Object Set To Predicted",
        "description":"Reset to Predicted all objects for the given project with the filters.",
        "operationId":"reset_object_set_to_predicted_object_set__project_id__reset_to_predicted_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/revert_to_history":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Revert Object Set To History",
        "description":"Revert all objects for the given project, with the filters, to the target.\n- param `filters`: The set of filters to apply to get the target objects.\n- param `dry_run`: If set, then no real write but consequences of the revert will be replied.\n- param `target`: Use null/None for reverting using the last annotation from anyone, or a user id\n    for the last annotation from this user.",
        "operationId":"revert_object_set_to_history_object_set__project_id__revert_to_history_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Dry Run",
              "type":"boolean"
            },
            "name":"dry_run",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Target",
              "type":"integer"
            },
            "name":"target",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetRevertToHistoryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/update":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Update Object Set",
        "description":"Update all the objects with given IDs and values\nCurrent user needs Manage right on all projects of specified objects.",
        "operationId":"update_object_set_object_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/classify":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Classify Object Set",
        "description":"Change classification and/or qualification for a set of objects.\nCurrent user needs at least Annotate right on all projects of specified objects.",
        "operationId":"classify_object_set_object_set_classify_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ClassifyReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/parents":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Query Object Set Parents",
        "description":"Return object ids, with parent ones and projects for the objects in given list.",
        "operationId":"query_object_set_parents_object_set_parents_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Object Ids",
                "type":"array",
                "items":{
                  "type":"integer"
                }
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetQueryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object_set/":{
      "delete":{
        "tags":[
          "objects"
        ],
        "summary":"Erase Object Set",
        "description":"Delete the objects with given object ids.\nCurrent user needs Manage right on all projects of specified objects.",
        "operationId":"erase_object_set_object_set__delete",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Object Ids",
                "type":"array",
                "items":{
                  "type":"integer"
                }
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object/{object_id}":{
      "get":{
        "tags":[
          "object"
        ],
        "summary":"Object Query",
        "description":"Read a single object. Anonymous reader can do if the project has the right rights :)",
        "operationId":"object_query_object__object_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Object Id",
              "type":"integer"
            },
            "name":"object_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/object/{object_id}/history":{
      "get":{
        "tags":[
          "object"
        ],
        "summary":"Object Query History",
        "description":"Read a single object's history.",
        "operationId":"object_query_history_object__object_id__history_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Object Id",
              "type":"integer"
            },
            "name":"object_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Object Query History Object  Object Id  History Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/HistoricalClassification"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/taxa":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Root Taxa",
        "description":"Return all taxa with no parent.",
        "operationId":"query_root_taxa_taxa_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Root Taxa Taxa Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxa/status":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Taxa Tree Status",
        "description":"Return the status of taxonomy tree w/r to freshness.",
        "operationId":"taxa_tree_status_taxa_status_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/TaxonomyTreeStatus"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/taxon/{taxon_id}":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Taxa",
        "description":"Information about a single taxon, including its lineage.",
        "operationId":"query_taxa_taxon__taxon_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Taxon Id",
              "type":"integer"
            },
            "name":"taxon_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/TaxonModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/taxon_set/search":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Search Taxa",
        "description":"Search for taxa by name.\n\nQueries can be 'small', i.e. of length < 3 and even zero-length.\nFor a public, unauthenticated call:\n- zero-length and small queries always return nothing.\n- otherwise, a full search is done and results are returned in alphabetical order.\n\nBehavior for an authenticated call:\n- zero-length queries: return the MRU list in full.\n- small queries: the MRU list is searched, so that taxa in the recent list are returned, if matching.\n- otherwise, a full search is done. Results are ordered so that taxa in the project list are in first,\n    and are signalled as such in the response.",
        "operationId":"search_taxa_taxon_set_search_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Query",
              "type":"string"
            },
            "name":"query",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Taxa Taxon Set Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxaSearchRsp"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/taxon_set/query":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Taxa Set",
        "description":"Information about several taxa, including their lineage.\nThe separator between numbers is arbitrary non-digit, e.g. \":\", \"|\" or \",\"",
        "operationId":"query_taxa_set_taxon_set_query_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Ids",
              "type":"string"
            },
            "name":"ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Taxa Set Taxon Set Query Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/status":{
      "get":{
        "tags":[
          "WIP"
        ],
        "summary":"System Status",
        "description":"Report the status, mainly used for verifying that the server is up.",
        "operationId":"system_status_status_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/tasks/{task_id}/file":{
      "get":{
        "tags":[
          "task"
        ],
        "summary":"Get Task File",
        "description":"Return the file produced by given task.\nThe task must belong to requester.",
        "operationId":"get_task_file_tasks__task_id__file_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Task Id",
              "type":"integer"
            },
            "name":"task_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Return the file.",
            "content":{
              "application/json":{
                "schema":{}
              },
              "application/zip":{}
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/error":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"System Error",
        "description":"This entry point will return a 500 internal error, on purpose so the stack trace is visible and client\ncan see what it gives.",
        "operationId":"system_error_error_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/noop":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"Do Nothing",
        "description":"This entry point will just do nothing.\n    It's also used for exporting models we need on client side.",
        "operationId":"do_nothing_noop_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Do Nothing Noop Get",
                  "anyOf":[
                    {
                      "$ref":"#/components/schemas/ObjectHeaderModel"
                    },
                    {
                      "$ref":"#/components/schemas/HistoricalClassification"
                    }
                  ]
                }
              }
            }
          }
        },
        "security":[
          {
            "HTTPBearer":[]
          }
        ]
      }
    },
    "/constants":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"Used Constants",
        "description":"This entry point will return useful strings for user dialog.\nNow also used for values extracted from Config.",
        "operationId":"used_constants_constants_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Constants"
                }
              }
            }
          }
        }
      }
    }
  },
  "components":{
    "schemas":{
      "AcquisitionModel":{
        "title":"AcquisitionModel",
        "required":[
          "acq_sample_id",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "acquisid":{
            "title":"Acquisid",
            "type":"integer"
          },
          "acq_sample_id":{
            "title":"Acq Sample Id",
            "type":"integer"
          },
          "orig_id":{
            "title":"Orig Id",
            "type":"string"
          },
          "instrument":{
            "title":"Instrument",
            "type":"string"
          },
          "free_columns":{
            "title":"Free columns from acquisition mapping in project",
            "type":"object",
            "default":{}
          }
        }
      },
      "BulkUpdateReq":{
        "title":"BulkUpdateReq",
        "required":[
          "target_ids",
          "updates"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"The IDs of the target entities",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "updates":{
            "title":"The updates, to do on all impacted entities",
            "type":"array",
            "items":{}
          }
        }
      },
      "ClassifyReq":{
        "title":"ClassifyReq",
        "required":[
          "target_ids",
          "classifications",
          "wanted_qualification"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"The IDs of the target objects",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "classifications":{
            "title":"The wanted new classifications, i.e. taxon ID, one for each object.  Use -1 to keep present one.",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "wanted_qualification":{
            "title":"The wanted qualifications for all objects. 'V' and 'P'.",
            "type":"string"
          }
        }
      },
      "CollectionModel":{
        "title":"CollectionModel",
        "required":[
          "project_ids",
          "external_id",
          "external_id_system",
          "title"
        ],
        "type":"object",
        "properties":{
          "project_ids":{
            "title":"The composing project IDs",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "provider_user":{
            "title":"Is the person who is responsible for the content of this metadata record. \nWriter of the title and abstract.",
            "allOf":[
              {
                "$ref":"#/components/schemas/UserModel"
              }
            ]
          },
          "contact_user":{
            "title":"Is the person who should be contacted in cases of questions regarding the\ncontent of the dataset or any data restrictions. This is also the person who is most likely to\nstay involved in the dataset the longest.",
            "allOf":[
              {
                "$ref":"#/components/schemas/UserModel"
              }
            ]
          },
          "creator_users":{
            "title":"All people who are responsible for the creation of\nthe collection. Data creators should receive credit for their work and should therefore be\nincluded in the citation.",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "default":[]
          },
          "creator_organisations":{
            "title":"All organisations who are responsible for the creation of\n    the collection. Data creators should receive credit for their work and should therefore be\n    included in the citation.",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          },
          "associate_users":{
            "title":"Other person(s) associated with the collection",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "default":[]
          },
          "associate_organisations":{
            "title":"Other organisation(s) associated with the collection",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          },
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "external_id":{
            "title":"External Id",
            "type":"string"
          },
          "external_id_system":{
            "title":"External Id System",
            "type":"string"
          },
          "title":{
            "title":"Title",
            "type":"string"
          },
          "citation":{
            "title":"Citation",
            "type":"string"
          },
          "license":{
            "title":"License",
            "type":"string"
          },
          "abstract":{
            "title":"Abstract",
            "type":"string"
          },
          "description":{
            "title":"Description",
            "type":"string"
          }
        },
        "description":"Collection + computed"
      },
      "Constants":{
        "title":"Constants",
        "type":"object",
        "properties":{
          "license_texts":{
            "title":"The supported licenses and help text/links",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{
              "CC0 1.0":"<a href=\"https://creativecommons.org/publicdomain/zero/1.0/\" rel=\"nofollow\"><strong>CC-0</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, with no conditions. Other databases can index the data. The data falls into the worldwide public domain. This is the license preferred by <a href=\"https://obis.org/manual/policy/\" rel=\"nofollow\">OBIS</a> and <a href=\"https://www.gbif.org/terms\" rel=\"nofollow\">GBIF</a>.",
              "CC BY 4.0":"<a href=\"https://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\"><strong>CC-BY</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors. Other databases can index the data.",
              "CC BY-NC 4.0":"<a href=\"https://creativecommons.org/licenses/by-nc/4.0/\" rel=\"nofollow\"><strong>CC-BY-NC</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors, and do not use it for commercial purpose (\"primarily intended for or directed toward commercial advantage or monetary compensation\"). Other databases can index the data.",
              "Copyright":"<strong>Copyright</strong>: only contributors to this project have rights on this data. This prevents its distribution in any kind of database.",
              "":"Not chosen"
            }
          },
          "app_manager":{
            "title":"The application manager identity (name, mail), from config file",
            "maxItems":2,
            "minItems":2,
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[
              "",
              ""
            ]
          }
        },
        "description":"Values which can be considered identical over the lifetime of the back-end "
      },
      "CreateCollectionReq":{
        "title":"CreateCollectionReq",
        "required":[
          "title",
          "project_ids"
        ],
        "type":"object",
        "properties":{
          "title":{
            "title":"The collection title",
            "type":"string"
          },
          "project_ids":{
            "title":"The composing project IDs",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"integer"
            }
          }
        }
      },
      "CreateProjectReq":{
        "title":"CreateProjectReq",
        "required":[
          "title"
        ],
        "type":"object",
        "properties":{
          "clone_of_id":{
            "title":"If set, clone specified Project",
            "type":"integer"
          },
          "title":{
            "title":"The project title",
            "type":"string"
          },
          "visible":{
            "title":"The project is created visible",
            "type":"boolean",
            "default":true
          }
        }
      },
      "EMODnetExportRsp":{
        "title":"EMODnetExportRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"Showstopper problems found while building the archive.",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          },
          "warnings":{
            "title":"Problems found while building the archive, which do not prevent producing it.",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          },
          "task_id":{
            "title":"The created task, 0 if there were problems.",
            "type":"integer",
            "default":0
          }
        },
        "description":"EMODNet format export response."
      },
      "HTTPValidationError":{
        "title":"HTTPValidationError",
        "type":"object",
        "properties":{
          "detail":{
            "title":"Detail",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HistoricalClassification":{
        "title":"HistoricalClassification",
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "classif_date":{
            "title":"Classif Date",
            "type":"string",
            "format":"date-time"
          },
          "classif_who":{
            "title":"Classif Who",
            "type":"integer"
          },
          "classif_type":{
            "title":"Classif Type",
            "type":"string"
          },
          "classif_qual":{
            "title":"Classif Qual",
            "type":"string"
          },
          "classif_score":{
            "title":"Classif Score",
            "type":"number"
          },
          "user_name":{
            "title":"User Name",
            "type":"string"
          },
          "taxon_name":{
            "title":"Taxon Name",
            "type":"string"
          }
        }
      },
      "HistoricalLastClassif":{
        "title":"HistoricalLastClassif",
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "histo_classif_date":{
            "title":"Histo Classif Date",
            "type":"string",
            "format":"date-time"
          },
          "histo_classif_type":{
            "title":"Histo Classif Type",
            "type":"string"
          },
          "histo_classif_id":{
            "title":"Histo Classif Id",
            "type":"integer"
          },
          "histo_classif_qual":{
            "title":"Histo Classif Qual",
            "type":"string"
          },
          "histo_classif_who":{
            "title":"Histo Classif Who",
            "type":"integer"
          }
        }
      },
      "ImageModel":{
        "title":"ImageModel",
        "type":"object",
        "properties":{
          "imgid":{
            "title":"Imgid",
            "type":"integer"
          },
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "imgrank":{
            "title":"Imgrank",
            "type":"integer"
          },
          "file_name":{
            "title":"File Name",
            "type":"string"
          },
          "orig_file_name":{
            "title":"Orig File Name",
            "type":"string"
          },
          "width":{
            "title":"Width",
            "type":"integer"
          },
          "height":{
            "title":"Height",
            "type":"integer"
          },
          "thumb_file_name":{
            "title":"Thumb File Name",
            "type":"string"
          },
          "thumb_width":{
            "title":"Thumb Width",
            "type":"integer"
          },
          "thumb_height":{
            "title":"Thumb Height",
            "type":"integer"
          }
        }
      },
      "ImportPrepReq":{
        "title":"ImportPrepReq",
        "required":[
          "task_id",
          "source_path"
        ],
        "type":"object",
        "properties":{
          "task_id":{
            "title":"The existing task to use",
            "type":"integer"
          },
          "source_path":{
            "title":"Source path on server, to zip or plain directory",
            "type":"string"
          },
          "taxo_mappings":{
            "title":"Optional taxonomy mapping",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "skip_loaded_files":{
            "title":"Skip Loaded Files",
            "type":"boolean",
            "default":false
          },
          "skip_existing_objects":{
            "title":"Skip Existing Objects",
            "type":"boolean",
            "default":false
          },
          "update_mode":{
            "title":"Update data ('Yes'), including classification ('Cla')",
            "type":"string",
            "default":""
          }
        },
        "description":"Import preparation, request. "
      },
      "ImportPrepRsp":{
        "title":"ImportPrepRsp",
        "required":[
          "source_path"
        ],
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Eventually amended source path on server",
            "type":"string"
          },
          "mappings":{
            "title":"Fields mapping",
            "type":"object",
            "additionalProperties":{
              "type":"object",
              "additionalProperties":{
                "type":"string"
              }
            },
            "default":{}
          },
          "found_users":{
            "title":"Users found in TSV files",
            "type":"object",
            "additionalProperties":{
              "type":"object"
            },
            "description":"key = user name; value = dict with (key = 'id' if resolved, else 'email')",
            "default":{}
          },
          "found_taxa":{
            "title":"Taxa found without ID in TSV files",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"key = taxon NAME; value = taxon ID if resolved, else None",
            "default":{}
          },
          "warnings":{
            "title":"Warnings from analysis",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          },
          "errors":{
            "title":"Errors from analysis",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Do NOT proceed to real import if not empty.",
            "default":[]
          },
          "rowcount":{
            "title":"Number of TSV rows, counted during validation",
            "type":"integer",
            "default":0
          }
        },
        "description":"Import preparation, response. "
      },
      "ImportRealReq":{
        "title":"ImportRealReq",
        "required":[
          "task_id",
          "source_path"
        ],
        "type":"object",
        "properties":{
          "task_id":{
            "title":"The existing task to use",
            "type":"integer"
          },
          "source_path":{
            "title":"Source path on server, to plain directory",
            "type":"string"
          },
          "taxo_mappings":{
            "title":"Optional taxonomy mapping",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "skip_loaded_files":{
            "title":"Skip Loaded Files",
            "type":"boolean",
            "default":false
          },
          "skip_existing_objects":{
            "title":"Skip Existing Objects",
            "type":"boolean",
            "default":false
          },
          "update_mode":{
            "title":"Update data ('Yes'), including classification ('Cla')",
            "type":"string",
            "default":""
          },
          "mappings":{
            "title":"Fields mapping",
            "type":"object",
            "additionalProperties":{
              "type":"object",
              "additionalProperties":{
                "type":"string"
              }
            },
            "default":{}
          },
          "found_users":{
            "title":"Users found in TSV files",
            "type":"object",
            "additionalProperties":{
              "type":"object"
            },
            "description":"key = user name; value = dict with (key = 'id' if resolved, else 'email')",
            "default":{}
          },
          "found_taxa":{
            "title":"Taxa found in TSV files",
            "type":"object",
            "additionalProperties":{
              "type":"integer"
            },
            "description":"key = taxon NAME; value = taxon ID if resolved, else None",
            "default":{}
          },
          "rowcount":{
            "title":"Number of TSV rows, counted during validation",
            "type":"integer",
            "default":0
          }
        },
        "description":"Import for real, request. "
      },
      "ImportRealRsp":{
        "title":"ImportRealRsp",
        "type":"object",
        "properties":{},
        "description":"Import for real, response. "
      },
      "LoginReq":{
        "title":"LoginReq",
        "type":"object",
        "properties":{
          "username":{
            "title":"Username",
            "type":"string",
            "default":"User email, like in Web UI"
          },
          "password":{
            "title":"Password",
            "type":"string",
            "default":"User password"
          }
        }
      },
      "MergeRsp":{
        "title":"MergeRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"The errors found during processing.",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          }
        },
        "description":"Merge response. "
      },
      "MinimalUserBO":{
        "title":"MinimalUserBO",
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "name":{
            "title":"Name",
            "type":"string"
          }
        }
      },
      "ObjectHeaderModel":{
        "title":"ObjectHeaderModel",
        "required":[
          "acquisid",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "acquisid":{
            "title":"Acquisid",
            "type":"integer"
          },
          "orig_id":{
            "title":"Orig Id",
            "type":"string"
          },
          "objdate":{
            "title":"Objdate",
            "type":"string",
            "format":"date"
          },
          "objtime":{
            "title":"Objtime",
            "type":"string",
            "format":"time"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number"
          },
          "longitude":{
            "title":"Longitude",
            "type":"number"
          },
          "depth_min":{
            "title":"Depth Min",
            "type":"number"
          },
          "depth_max":{
            "title":"Depth Max",
            "type":"number"
          },
          "sunpos":{
            "title":"Sunpos",
            "type":"string"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "classif_qual":{
            "title":"Classif Qual",
            "type":"string"
          },
          "classif_who":{
            "title":"Classif Who",
            "type":"integer"
          },
          "classif_when":{
            "title":"Classif When",
            "type":"string",
            "format":"date-time"
          },
          "classif_auto_id":{
            "title":"Classif Auto Id",
            "type":"integer"
          },
          "classif_auto_score":{
            "title":"Classif Auto Score",
            "type":"number"
          },
          "classif_auto_when":{
            "title":"Classif Auto When",
            "type":"string",
            "format":"date-time"
          },
          "classif_crossvalidation_id":{
            "title":"Classif Crossvalidation Id",
            "type":"integer"
          },
          "complement_info":{
            "title":"Complement Info",
            "type":"string"
          },
          "similarity":{
            "title":"Similarity",
            "type":"number"
          },
          "random_value":{
            "title":"Random Value",
            "type":"integer"
          },
          "object_link":{
            "title":"Object Link",
            "type":"string"
          }
        }
      },
      "ObjectModel":{
        "title":"ObjectModel",
        "required":[
          "acquisid",
          "orig_id",
          "sample_id",
          "project_id"
        ],
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "acquisid":{
            "title":"Acquisid",
            "type":"integer"
          },
          "orig_id":{
            "title":"Original object ID from initial TSV load",
            "type":"string"
          },
          "objdate":{
            "title":"Objdate",
            "type":"string",
            "format":"date"
          },
          "objtime":{
            "title":"Objtime",
            "type":"string",
            "format":"time"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number"
          },
          "longitude":{
            "title":"Longitude",
            "type":"number"
          },
          "depth_min":{
            "title":"Depth Min",
            "type":"number"
          },
          "depth_max":{
            "title":"Depth Max",
            "type":"number"
          },
          "sunpos":{
            "title":"Sunpos",
            "type":"string"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "classif_qual":{
            "title":"Classif Qual",
            "type":"string"
          },
          "classif_who":{
            "title":"Classif Who",
            "type":"integer"
          },
          "classif_when":{
            "title":"Classif When",
            "type":"string",
            "format":"date-time"
          },
          "classif_auto_id":{
            "title":"Classif Auto Id",
            "type":"integer"
          },
          "classif_auto_score":{
            "title":"Classif Auto Score",
            "type":"number"
          },
          "classif_auto_when":{
            "title":"Classif Auto When",
            "type":"string",
            "format":"date-time"
          },
          "classif_crossvalidation_id":{
            "title":"Classif Crossvalidation Id",
            "type":"integer"
          },
          "complement_info":{
            "title":"Complement Info",
            "type":"string"
          },
          "similarity":{
            "title":"Similarity",
            "type":"number"
          },
          "random_value":{
            "title":"Random Value",
            "type":"integer"
          },
          "object_link":{
            "title":"Object link",
            "type":"string"
          },
          "sample_id":{
            "title":"Sample (i.e. parent of parent acquisition) ID",
            "type":"integer"
          },
          "project_id":{
            "title":"Project (i.e. parent of sample) ID",
            "type":"integer"
          },
          "images":{
            "title":"Images for this object",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ImageModel"
            },
            "default":[]
          },
          "free_columns":{
            "title":"Free columns from object mapping in project",
            "type":"object",
            "default":{}
          }
        }
      },
      "ObjectSetQueryRsp":{
        "title":"ObjectSetQueryRsp",
        "type":"object",
        "properties":{
          "object_ids":{
            "title":"Matching object IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "acquisition_ids":{
            "title":"Parent (acquisition) IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "sample_ids":{
            "title":"Parent (sample) IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "project_ids":{
            "title":"Project IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "details":{
            "title":"Requested fields, in request order",
            "type":"array",
            "items":{
              "type":"array",
              "items":{}
            },
            "default":[]
          },
          "total_ids":{
            "title":"Total rows returned by the query, even if it was window-ed",
            "type":"integer",
            "default":0
          }
        },
        "description":"Tuned model for faster serialization out.\nTODO: A bit useless in the context as FastAPI does _not_ use ser/deser from the model.\n      Instead, it produces what needs to be sent over the wire and calls a JSON encoder onto it.\n      So 1) It calls def jsonable_encoder (in FastAPI encoders.py)\n         2) It calls an encoder (presently ORJSONEncoder in main.py)"
      },
      "ObjectSetRevertToHistoryRsp":{
        "title":"ObjectSetRevertToHistoryRsp",
        "type":"object",
        "properties":{
          "last_entries":{
            "title":"Object + last classification",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/HistoricalLastClassif"
            },
            "default":[]
          },
          "classif_info":{
            "title":"Classification names (self+parent) for involved IDs",
            "type":"object",
            "default":{}
          }
        }
      },
      "ObjectSetSummaryRsp":{
        "title":"ObjectSetSummaryRsp",
        "type":"object",
        "properties":{
          "total_objects":{
            "title":"Total number of objects in the set",
            "type":"integer"
          },
          "validated_objects":{
            "title":"Number of validated objects in the set",
            "type":"integer"
          },
          "dubious_objects":{
            "title":"Number of dubious objects in the set",
            "type":"integer"
          },
          "predicted_objects":{
            "title":"Number of predicted objects in the set",
            "type":"integer"
          }
        },
        "description":"Tuned model for faster serialization out.\nTODO: A bit useless in the context as FastAPI does _not_ use ser/deser from the model.\n      Instead, it produces what needs to be sent over the wire and calls a JSON encoder onto it.\n      So 1) It calls def jsonable_encoder (in FastAPI encoders.py)\n         2) It calls an encoder (presently ORJSONEncoder in main.py)"
      },
      "ProcessModel":{
        "title":"ProcessModel",
        "required":[
          "processid",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "processid":{
            "title":"Processid",
            "type":"integer"
          },
          "orig_id":{
            "title":"Orig Id",
            "type":"string"
          },
          "free_columns":{
            "title":"Free columns from process mapping in project",
            "type":"object",
            "default":{}
          }
        }
      },
      "ProjectFilters":{
        "title":"ProjectFilters",
        "type":"object",
        "properties":{
          "taxo":{
            "title":"Taxo",
            "type":"string"
          },
          "taxochild":{
            "title":"Taxochild",
            "type":"string"
          },
          "statusfilter":{
            "title":"Statusfilter",
            "type":"string"
          },
          "MapN":{
            "title":"Mapn",
            "type":"string"
          },
          "MapW":{
            "title":"Mapw",
            "type":"string"
          },
          "MapE":{
            "title":"Mape",
            "type":"string"
          },
          "MapS":{
            "title":"Maps",
            "type":"string"
          },
          "depthmin":{
            "title":"Depthmin",
            "type":"string"
          },
          "depthmax":{
            "title":"Depthmax",
            "type":"string"
          },
          "samples":{
            "title":"Samples",
            "type":"string"
          },
          "instrum":{
            "title":"Instrum",
            "type":"string"
          },
          "daytime":{
            "title":"Daytime",
            "type":"string"
          },
          "month":{
            "title":"Month",
            "type":"string"
          },
          "fromdate":{
            "title":"Fromdate",
            "type":"string"
          },
          "todate":{
            "title":"Todate",
            "type":"string"
          },
          "fromtime":{
            "title":"Fromtime",
            "type":"string"
          },
          "totime":{
            "title":"Totime",
            "type":"string"
          },
          "inverttime":{
            "title":"Inverttime",
            "type":"string"
          },
          "validfromdate":{
            "title":"Validfromdate",
            "type":"string"
          },
          "validtodate":{
            "title":"Validtodate",
            "type":"string"
          },
          "freenum":{
            "title":"Freenum",
            "type":"string"
          },
          "freenumst":{
            "title":"Freenumst",
            "type":"string"
          },
          "freenumend":{
            "title":"Freenumend",
            "type":"string"
          },
          "freetxt":{
            "title":"Freetxt",
            "type":"string"
          },
          "freetxtval":{
            "title":"Freetxtval",
            "type":"string"
          },
          "filt_annot":{
            "title":"Filt Annot",
            "type":"string"
          },
          "filt_last_annot":{
            "title":"Filt Last Annot",
            "type":"string"
          }
        }
      },
      "ProjectModel":{
        "title":"ProjectModel",
        "required":[
          "title"
        ],
        "type":"object",
        "properties":{
          "obj_free_cols":{
            "title":"Object free columns",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "sample_free_cols":{
            "title":"Sample free columns",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "acquisition_free_cols":{
            "title":"Acquisition free columns",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "process_free_cols":{
            "title":"Process free columns",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "init_classif_list":{
            "title":"Favorite taxa used in classification",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "managers":{
            "title":"Managers of this project",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "default":[]
          },
          "annotators":{
            "title":"Annotators of this project, if not manager",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "default":[]
          },
          "viewers":{
            "title":"Viewers of this project, if not manager nor annotator",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "default":[]
          },
          "contact":{
            "title":"The contact person is a manager who serves as the contact person for other users and EcoTaxa's managers.",
            "allOf":[
              {
                "$ref":"#/components/schemas/UserModel"
              }
            ]
          },
          "highest_right":{
            "title":"The highest right for requester on this project. One of 'Manage', 'Annotate', 'View'.",
            "type":"string",
            "default":""
          },
          "license":{
            "title":"License",
            "type":"string"
          },
          "projid":{
            "title":"Projid",
            "type":"integer"
          },
          "title":{
            "title":"Title",
            "type":"string"
          },
          "visible":{
            "title":"Visible",
            "type":"boolean"
          },
          "status":{
            "title":"Status",
            "type":"string"
          },
          "objcount":{
            "title":"Objcount",
            "type":"number"
          },
          "pctvalidated":{
            "title":"Pctvalidated",
            "type":"number"
          },
          "pctclassified":{
            "title":"Pctclassified",
            "type":"number"
          },
          "classifsettings":{
            "title":"Classifsettings",
            "type":"string"
          },
          "classiffieldlist":{
            "title":"Classiffieldlist",
            "type":"string"
          },
          "popoverfieldlist":{
            "title":"Popoverfieldlist",
            "type":"string"
          },
          "comments":{
            "title":"Comments",
            "type":"string"
          },
          "projtype":{
            "title":"Projtype",
            "type":"string"
          },
          "rf_models_used":{
            "title":"Rf Models Used",
            "type":"string"
          },
          "cnn_network_id":{
            "title":"Cnn Network Id",
            "type":"string"
          }
        },
        "description":"Project + computed",
        "example":{
          "obj_free_cols":{
            "area":"n01",
            "esd":"n02"
          },
          "sample_free_cols":{
            "barcode":"t01"
          },
          "acquisition_free_cols":{
            "flash_delay":"t01"
          },
          "process_free_cols":{
            "nb_images":"t01"
          }
        }
      },
      "ProjectSummaryModel":{
        "title":"ProjectSummaryModel",
        "required":[
          "projid",
          "title"
        ],
        "type":"object",
        "properties":{
          "projid":{
            "title":"Project unique identifier",
            "type":"integer"
          },
          "title":{
            "title":"Project title",
            "type":"string"
          }
        }
      },
      "ProjectTaxoStatsModel":{
        "title":"ProjectTaxoStatsModel",
        "required":[
          "projid",
          "nb_unclassified",
          "nb_validated",
          "nb_dubious",
          "nb_predicted"
        ],
        "type":"object",
        "properties":{
          "projid":{
            "title":"The project id",
            "type":"integer"
          },
          "used_taxa":{
            "title":"The taxa/category ids used inside the project",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "nb_unclassified":{
            "title":"The number of unclassified objects inside the project",
            "type":"integer"
          },
          "nb_validated":{
            "title":"The number of validated objects inside the project",
            "type":"integer"
          },
          "nb_dubious":{
            "title":"The number of dubious objects inside the project",
            "type":"integer"
          },
          "nb_predicted":{
            "title":"The number of predicted objects inside the project",
            "type":"integer"
          }
        }
      },
      "ProjectUserStatsModel":{
        "title":"ProjectUserStatsModel",
        "type":"object",
        "properties":{
          "projid":{
            "title":"The project id",
            "type":"integer"
          },
          "annotators":{
            "title":"The users who decided on present classification of objects",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/MinimalUserBO"
            }
          }
        }
      },
      "SampleModel":{
        "title":"SampleModel",
        "required":[
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "sampleid":{
            "title":"Sampleid",
            "type":"integer"
          },
          "projid":{
            "title":"Projid",
            "type":"integer"
          },
          "orig_id":{
            "title":"Orig Id",
            "type":"string"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number"
          },
          "longitude":{
            "title":"Longitude",
            "type":"number"
          },
          "dataportal_descriptor":{
            "title":"Dataportal Descriptor",
            "type":"string"
          },
          "free_columns":{
            "title":"Free columns from sample mapping in project",
            "type":"object",
            "default":{}
          }
        }
      },
      "SimpleImportReq":{
        "title":"SimpleImportReq",
        "required":[
          "task_id",
          "source_path",
          "values"
        ],
        "type":"object",
        "properties":{
          "task_id":{
            "title":"The existing task to use, if 0 then it's a dry run",
            "type":"integer"
          },
          "source_path":{
            "title":"Source path on server, to zip or plain directory",
            "type":"string"
          },
          "values":{
            "title":"Constant values, per field, to write for all images.",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":":imgdate, imgtime, latitude, longitude, depthmin, depthmax, taxolb, userlb, status"
          },
          "possible_values":{
            "title":"Possible Values",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[
              "imgdate",
              "imgtime",
              "latitude",
              "longitude",
              "depthmin",
              "depthmax",
              "taxolb",
              "userlb",
              "status"
            ]
          }
        },
        "description":"Simple Import preparation, request. "
      },
      "SimpleImportRsp":{
        "title":"SimpleImportRsp",
        "required":[
          "errors",
          "nb_images"
        ],
        "type":"object",
        "properties":{
          "errors":{
            "title":"Validation, copy or insert errors",
            "type":"array",
            "items":{
              "type":"string"
            }
          },
          "nb_images":{
            "title":"Number of successfully imported images",
            "type":"integer"
          }
        },
        "description":"Simple Import, response. "
      },
      "SubsetReq":{
        "title":"SubsetReq",
        "required":[
          "task_id",
          "dest_prj_id",
          "limit_type",
          "limit_value",
          "do_images"
        ],
        "type":"object",
        "properties":{
          "task_id":{
            "title":"The existing task to use.",
            "type":"integer"
          },
          "filters":{
            "title":"The filters to apply to project",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "dest_prj_id":{
            "title":"The destination project ID.",
            "type":"integer"
          },
          "limit_type":{
            "title":"The type of limit_value: P for %, V for constant, both per category.",
            "enum":[
              "P",
              "V"
            ],
            "type":"string"
          },
          "limit_value":{
            "title":"Limit value, e.g. 20% or 5 per copepoda.",
            "type":"number"
          },
          "do_images":{
            "title":"If set, also clone images.",
            "type":"boolean"
          }
        },
        "description":"Subset request. "
      },
      "SubsetRsp":{
        "title":"SubsetRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"The errors found during processing",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          }
        },
        "description":"Subset response. "
      },
      "TaxaSearchRsp":{
        "title":"TaxaSearchRsp",
        "required":[
          "id",
          "text",
          "pr"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"The taxon/category IDs.",
            "type":"integer"
          },
          "text":{
            "title":"The taxon name, display one.",
            "type":"string"
          },
          "pr":{
            "title":"1 if the taxon is in project list, 0 otherwise.",
            "type":"integer"
          }
        }
      },
      "TaxonModel":{
        "title":"TaxonModel",
        "required":[
          "id",
          "name",
          "nb_objects",
          "nb_children_objects",
          "display_name",
          "lineage",
          "id_lineage",
          "children"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"The taxon/category IDs.",
            "type":"integer"
          },
          "name":{
            "title":"The taxon/category verbatim name.",
            "type":"string"
          },
          "nb_objects":{
            "title":"How many objects are classified in this category.",
            "type":"integer"
          },
          "nb_children_objects":{
            "title":"How many objects are classified in this category children (not itself).",
            "type":"integer"
          },
          "display_name":{
            "title":"The taxon/category display name.",
            "type":"string"
          },
          "lineage":{
            "title":"The taxon/category name of ancestors, including self, in first.",
            "type":"array",
            "items":{
              "type":"string"
            }
          },
          "id_lineage":{
            "title":"The taxon/category IDs of ancestors, including self, in first.",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "children":{
            "title":"The taxon/category IDs of children.",
            "type":"array",
            "items":{
              "type":"integer"
            }
          }
        }
      },
      "TaxonomyTreeStatus":{
        "title":"TaxonomyTreeStatus",
        "type":"object",
        "properties":{
          "last_refresh":{
            "title":"Taxonomy tree last refresh/sync from taxonomy server. Date, with format YYYY-MM-DDThh:mm:ss.",
            "type":"string"
          }
        }
      },
      "UserModel":{
        "title":"UserModel",
        "required":[
          "email",
          "name"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "email":{
            "title":"Email",
            "type":"string"
          },
          "name":{
            "title":"Name",
            "type":"string"
          },
          "organisation":{
            "title":"Organisation",
            "type":"string"
          },
          "active":{
            "title":"Active",
            "type":"boolean"
          },
          "country":{
            "title":"Country",
            "type":"string"
          },
          "usercreationdate":{
            "title":"Usercreationdate",
            "type":"string",
            "format":"date-time"
          },
          "usercreationreason":{
            "title":"Usercreationreason",
            "type":"string"
          }
        }
      },
      "UserModelWithRights":{
        "title":"UserModelWithRights",
        "required":[
          "email",
          "name"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "email":{
            "title":"Email",
            "type":"string"
          },
          "name":{
            "title":"Name",
            "type":"string"
          },
          "organisation":{
            "title":"Organisation",
            "type":"string"
          },
          "active":{
            "title":"Active",
            "type":"boolean"
          },
          "country":{
            "title":"Country",
            "type":"string"
          },
          "usercreationdate":{
            "title":"Usercreationdate",
            "type":"string",
            "format":"date-time"
          },
          "usercreationreason":{
            "title":"Usercreationreason",
            "type":"string"
          },
          "can_do":{
            "title":"Actions allowed to this user, 1=create project, 2=administrate the app",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "last_used_projects":{
            "title":"The last used projects for this user",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ProjectSummaryModel"
            },
            "default":[]
          }
        }
      },
      "ValidationError":{
        "title":"ValidationError",
        "required":[
          "loc",
          "msg",
          "type"
        ],
        "type":"object",
        "properties":{
          "loc":{
            "title":"Location",
            "type":"array",
            "items":{
              "type":"string"
            }
          },
          "msg":{
            "title":"Message",
            "type":"string"
          },
          "type":{
            "title":"Error Type",
            "type":"string"
          }
        }
      }
    },
    "securitySchemes":{
      "HTTPBearer":{
        "type":"http",
        "scheme":"bearer"
      }
    }
  }
}