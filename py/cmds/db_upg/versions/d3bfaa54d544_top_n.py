"""top-n

Revision ID: d3bfaa54d544
Revises: 1b1beb672279
Create Date: 2023-12-12 07:12:15.001019

"""

# revision identifiers, used by Alembic.
revision = "d3bfaa54d544"
down_revision = "1b1beb672279"

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("dbplyr_006")
    op.drop_table("dbplyr_003")
    op.drop_index("obj2_acquis", table_name="obj2")
    op.drop_table("obj2")
    op.drop_index("is_obj3_acq_classq_classi", table_name="obj3")
    op.drop_table("obj3")
    op.drop_table("loc_3d")
    op.drop_table("dbplyr_007")
    op.drop_table("dbplyr_002")
    op.drop_table("dbplyr_005")
    op.drop_table("dbplyr_001")
    op.drop_table("dbplyr_004")
    op.drop_table("loc_3d_agg")
    op.add_column("obj_head", sa.Column("training_id", sa.INTEGER(), nullable=True))
    op.drop_index("is_objectsacqclassifqual2", table_name="obj_head")
    op.create_index(
        "is_objectsacqclassifqual",
        "obj_head",
        ["acquisid", "classif_id", "classif_qual"],
        unique=False,
    )
    op.create_foreign_key(
        None, "obj_head", "training", ["training_id"], ["training_id"]
    )
    op.drop_column("obj_head", "classif_auto_id")
    op.drop_column("obj_head", "classif_auto_when")
    op.drop_column("obj_head", "classif_crossvalidation_id")
    op.drop_column("obj_head", "similarity")
    op.drop_column("obj_head", "classif_auto_score")
    op.add_column(
        "objectsclassifhisto", sa.Column("training_id", sa.INTEGER(), nullable=True)
    )
    op.create_foreign_key(
        None,
        "objectsclassifhisto",
        "taxonomy",
        ["classif_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        None,
        "objectsclassifhisto",
        "training",
        ["training_id"],
        ["training_id"],
        ondelete="CASCADE",
    )
    op.drop_column("objectsclassifhisto", "classif_score")
    op.drop_column("objectsclassifhisto", "classif_type")
    op.alter_column(
        "user_password_reset",
        "temp_password",
        existing_type=sa.VARCHAR(),
        nullable=False,
    )
    op.drop_constraint(
        "user_password_reset_user_id_fkey", "user_password_reset", type_="foreignkey"
    )
    op.create_foreign_key(None, "user_password_reset", "users", ["user_id"], ["id"])
    # ### end Alembic commands ###
    """
-- Date of the grouped writes of previous prediction tasks
create temp table unq_classif_110 as
select distinct classif_auto_when
from obj_prj
where projid = 110
  and classif_auto_when is not null;

-- Look for start and end dates of prediction tasks
-- assuming that 5 minutes have elapsed b/w 2 tasks (time to read a bit the result)
create temp table classif_chunks_110 as
select *
from (select classif_auto_when,
             classif_auto_when - lead(classif_auto_when, -1, '01/01/1970')
                                 OVER (ORDER BY classif_auto_when) as delta_prev,
             lead(classif_auto_when, 1, '01/01/5000')
             OVER (ORDER BY classif_auto_when) - classif_auto_when as delta_next
      from unq_classif_110) deltas
where delta_next > '00:05:00.000'
   or delta_prev > '00:05:00.000'
order by classif_auto_when;

create temp table classif_tasks_110
as
select classif_auto_when as begin_date,
       (select classif_auto_when
        from classif_chunks_110 ct2
        where ct2.classif_auto_when > ct1.classif_auto_when
        order by ct2.classif_auto_when
        limit 1)         as end_date
from classif_chunks_110 ct1
where delta_prev > '00:05:00.000'

select *
from classif_tasks_110

-- Check we forgot nobody
select count(1)
from obj_prj
where obj_prj.projid = 110
  and classif_auto_when is not null

select count(1)
from obj_prj,
     classif_tasks_110 ct
where obj_prj.projid = 110
  and classif_auto_when is not null
  and classif_auto_when between ct.begin_date and ct.end_date

select count(1), classif_auto_when, array_agg(objid) as pred_objs
from obj_prj
where projid = 110
  and classif_auto_when is not null
group by classif_auto_when
order by classif_auto_when;

-- Each task becomes a training
insert into training (training_id, training_author, training_when, training_path)
select nextval('seq_training'), 768, ct.begin_date, 'Migrated'
from classif_tasks_110 ct

-- Each predicted object becomes a Prediction
insert into prediction(training_id, object_id, classif_id, score)
select trn.training_id, obh.objid, obh.classif_auto_id, obh.classif_auto_score
from obj_prj obh
         join classif_tasks_110 ct
              on obh.classif_auto_when between ct.begin_date and ct.end_date
         join training trn on trn.training_when = ct.begin_date
where projid = 110

-- Each object is (was?) now predicted during the training
update obj_head obh
set training_id = (select trn.training_id
                   from classif_tasks_110 ct
                            join training trn on trn.training_when = ct.begin_date
                   where obh.classif_auto_when between ct.begin_date and ct.end_date)
where obh.objid in (select objid from obj_prj where projid = 110)

select count(1) from obj_head where training_id is not null;
    """


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "user_password_reset", type_="foreignkey")
    op.create_foreign_key(
        "user_password_reset_user_id_fkey",
        "user_password_reset",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "user_password_reset",
        "temp_password",
        existing_type=sa.VARCHAR(),
        nullable=True,
    )
    op.add_column(
        "objectsclassifhisto",
        sa.Column(
            "classif_type", sa.CHAR(length=1), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "objectsclassifhisto",
        sa.Column(
            "classif_score",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "objectsclassifhisto", type_="foreignkey")
    op.drop_constraint(None, "objectsclassifhisto", type_="foreignkey")
    op.drop_column("objectsclassifhisto", "training_id")
    op.add_column(
        "obj_head",
        sa.Column(
            "classif_auto_score",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "obj_head",
        sa.Column(
            "similarity",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "obj_head",
        sa.Column(
            "classif_crossvalidation_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "obj_head",
        sa.Column(
            "classif_auto_when",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "obj_head",
        sa.Column("classif_auto_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "obj_head", type_="foreignkey")
    op.drop_index("is_objectsacqclassifqual", table_name="obj_head")
    op.create_index(
        "is_objectsacqclassifqual2",
        "obj_head",
        ["acquisid", "classif_qual", "classif_id"],
        unique=False,
    )
    op.drop_column("obj_head", "training_id")
    op.create_table(
        "loc_3d_agg",
        sa.Column(
            "latitude",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "longitude",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "objdatetime", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.create_table(
        "dbplyr_004",
        sa.Column(
            "pprojid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("project_short", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "use",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_table(
        "dbplyr_001",
        sa.Column(
            "psampleid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "sampleid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_table(
        "dbplyr_005",
        sa.Column(
            "pprojid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("project_short", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "use",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_table(
        "dbplyr_002",
        sa.Column(
            "psampleid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "sampleid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_table(
        "dbplyr_007",
        sa.Column(
            "pprojid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("project_short", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "use",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_table(
        "loc_3d",
        sa.Column(
            "latitude",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "longitude",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("objdate", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("objtime", postgresql.TIME(), autoincrement=False, nullable=True),
    )
    op.create_table(
        "obj3",
        sa.Column("objid", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("acquisid", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "orig_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("classif_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("classif_qual", sa.String(), autoincrement=False, nullable=True),
        sa.Column("classif_who", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "classif_when", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("classif_auto_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "classif_auto_score",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "classif_auto_when",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "depth_min",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "depth_max",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "free_n",
            postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "free_t", postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["acquisid"], ["acquisitions.acquisid"], name="obj3_acquisid_fkey"
        ),
        sa.PrimaryKeyConstraint("objid", name="obj3_pkey"),
    )
    op.create_index(
        "is_obj3_acq_classq_classi",
        "obj3",
        ["acquisid", "classif_qual", "classif_id"],
        unique=False,
    )
    op.create_table(
        "obj2",
        sa.Column("objid", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("acquisid", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "orig_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("classif_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "classif_qual", sa.CHAR(length=1), autoincrement=False, nullable=True
        ),
        sa.Column("classif_who", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "classif_when", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("classif_auto_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "classif_auto_score",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "classif_auto_when",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("complement_info", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("sunpos", sa.CHAR(length=1), autoincrement=False, nullable=True),
        sa.Column(
            "latitude",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "longitude",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("objdate", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column("objtime", postgresql.TIME(), autoincrement=False, nullable=True),
        sa.Column(
            "depth_min",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "depth_max",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "free_n",
            postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "free_t", postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["acquisid"], ["acquisitions.acquisid"], name="obj2_acquisid_fkey"
        ),
        sa.PrimaryKeyConstraint("objid", name="obj2_pkey"),
    )
    op.create_index("obj2_acquis", "obj2", ["acquisid"], unique=False)
    op.create_table(
        "dbplyr_003",
        sa.Column(
            "pprojid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("project_short", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "use",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_table(
        "dbplyr_006",
        sa.Column(
            "pprojid",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("project", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("project_short", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "use",
            postgresql.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    # ### end Alembic commands ###
