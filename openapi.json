{
  "openapi":"3.0.2",
  "info":{
    "title":"EcoTaxa",
    "version":"0.0.17"
  },
  "servers":[
    {
      "url":"/api",
      "description":"External access"
    },
    {
      "url":"/",
      "description":"Local access"
    }
  ],
  "paths":{
    "/login":{
      "post":{
        "tags":[
          "authentification"
        ],
        "summary":"Login",
        "description":"**Login barrier,** \n\nIf successful, the login will returns a **JWT** which will have to be used\nin bearer authentication scheme for subsequent calls.",
        "operationId":"login_login_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/LoginReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Login Login Post",
                  "type":"string"
                },
                "example":"eyJ1c2VyX2lkIjo5OTN9.YUmHHw.-X4tsLsYbwldKL6vDgO3o4-aAxE"
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Users",
        "description":"Returns the list of **all users** with their information. \n\n🔒 *For admins only.*",
        "operationId":"get_users_users_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Users Users Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/UserModel"
                  }
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/me":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Show Current User",
        "description":"Returns **currently authenticated user's** information, permissions and last used projects.",
        "operationId":"show_current_user_users_me_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/UserModelWithRights"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/my_preferences/{project_id}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get Current User Prefs",
        "description":"**Returns one preference**, for a project and the currently authenticated user.\n\nAvailable keys are **cwd**, **img_import** and **filters**.",
        "operationId":"get_current_user_prefs_users_my_preferences__project_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"The preference key.",
            "required":false,
            "schema":{
              "title":"Key",
              "type":"string",
              "description":"The preference key."
            },
            "example":"filters",
            "name":"key",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Get Current User Prefs Users My Preferences  Project Id  Get",
                  "type":"string"
                },
                "example":"{\"dispfield\": \" dispfield_orig_id dispfield_classif_auto_score dispfield_classif_when\", \"ipp\": \"1000\", \"magenabled\": \"1\", \"popupenabled\": \"1\", \"sortby\": \"orig_id\", \"sortorder\": \"asc\", \"statusfilter\": \"P\", \"zoom\": \"90\"}"
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "put":{
        "tags":[
          "users"
        ],
        "summary":"Set Current User Prefs",
        "description":"**Sets one preference**, for a project and for the currently authenticated user.\n\nAvailable keys are **cwd**, **img_import** and **filters**.\n\nThe key disappears if set to empty string.",
        "operationId":"set_current_user_prefs_users_my_preferences__project_id__put",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"The preference key.",
            "required":false,
            "schema":{
              "title":"Key",
              "type":"string",
              "description":"The preference key."
            },
            "example":"filters",
            "name":"key",
            "in":"query"
          },
          {
            "description":"The value to set this preference to.",
            "required":false,
            "schema":{
              "title":"Value",
              "type":"string",
              "description":"The value to set this preference to."
            },
            "example":"{\"dispfield\": \" dispfield_orig_id dispfield_classif_auto_score dispfield_classif_when dispfield_random_value\", \"ipp\": \"500\", \"magenabled\": \"1\", \"popupenabled\": \"1\", \"sortby\": \"orig_id\", \"sortorder\": \"asc\", \"statusfilter\": \"\", \"zoom\": \"90\"}",
            "name":"value",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/search":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Search User",
        "description":"**Search users using various criteria**, search is case insensitive and might contain % chars.",
        "operationId":"search_user_users_search_get",
        "parameters":[
          {
            "description":"Search by name, use % for searching with 'any char'.",
            "required":false,
            "schema":{
              "title":"search by name",
              "type":"string",
              "description":"Search by name, use % for searching with 'any char'."
            },
            "example":"%userNa%",
            "name":"by_name",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search User Users Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/UserModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/users/{user_id}":{
      "get":{
        "tags":[
          "users"
        ],
        "summary":"Get User",
        "description":"Returns **information about the user** corresponding to the given id.",
        "operationId":"get_user_users__user_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"User Id",
              "type":"integer"
            },
            "name":"user_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/UserModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/collections/create":{
      "post":{
        "tags":[
          "collections"
        ],
        "summary":"Create Collection",
        "description":"**Create a collection** with at least one project inside.\n\nReturns the created collection Id.\n\n🔒 *For admins only.*",
        "operationId":"create_collection_collections_create_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CreateCollectionReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Create Collection Collections Create Post",
                  "type":"integer"
                },
                "example":1
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/collections/search":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Search Collections",
        "description":"**Search for collections.**\n\n🔒 *For admins only.*",
        "operationId":"search_collections_collections_search_get",
        "parameters":[
          {
            "description":"Search by title, use % for searching with 'any char'.",
            "required":false,
            "schema":{
              "title":"Title",
              "type":"string",
              "description":"Search by title, use % for searching with 'any char'."
            },
            "example":"%coll%",
            "name":"title",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Collections Collections Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/CollectionModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/collections/by_title":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Collection By Title",
        "description":"Return the **single collection with this title**.\n\n*For published datasets.*\n\n⚠️ DO NOT MODIFY BEHAVIOR ⚠️ ",
        "operationId":"collection_by_title_collections_by_title_get",
        "parameters":[
          {
            "description":"Search by **exact** title",
            "required":false,
            "schema":{
              "title":"Title",
              "type":"string",
              "description":"Search by **exact** title"
            },
            "example":"My collection",
            "name":"q",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/by_short_title":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Collection By Short Title",
        "description":"Return the **single collection with this short title**.\n\n*For published datasets.*\n\n⚠️ DO NOT MODIFY BEHAVIOR ⚠️ ",
        "operationId":"collection_by_short_title_collections_by_short_title_get",
        "parameters":[
          {
            "description":"Search by **exact** short title",
            "required":false,
            "schema":{
              "title":"Short title",
              "type":"string",
              "description":"Search by **exact** short title"
            },
            "example":"My coll",
            "name":"q",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Get Collection",
        "description":"Returns **information about the collection** corresponding to the given id.\n\n 🔒 *For admins only.*",
        "operationId":"get_collection_collections__collection_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer"
            },
            "name":"collection_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/CollectionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "put":{
        "tags":[
          "collections"
        ],
        "summary":"Update Collection",
        "description":"**Update the collection**. Note that some updates are silently failing when not compatible\n with the composing projects.\n\n 🔒 *For admins only.*",
        "operationId":"update_collection_collections__collection_id__put",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer"
            },
            "name":"collection_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CollectionModel"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "delete":{
        "tags":[
          "collections"
        ],
        "summary":"Erase Collection",
        "description":"**Delete the collection**, \n\ni.e. the precious fields, as the projects are just linked-at from the collection.\n\n🔒 *For admins only.*",
        "operationId":"erase_collection_collections__collection_id__delete",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer"
            },
            "name":"collection_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Erase Collection Collections  Collection Id  Delete",
                  "type":"integer"
                },
                "example":0
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/collections/{collection_id}/export/emodnet":{
      "get":{
        "tags":[
          "collections"
        ],
        "summary":"Emodnet Format Export",
        "description":"**Export the collection in EMODnet format**, @see https://www.emodnet-ingestion.eu\n\nProduces a DwC-A archive into a temporary directory, ready for download.\n\nMaybe useful, a reader in Python: https://python-dwca-reader.readthedocs.io/en/latest/index.html\n\n🔒 *For admins only.*",
        "operationId":"emodnet_format_export_collections__collection_id__export_emodnet_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Collection Id",
              "type":"integer"
            },
            "name":"collection_id",
            "in":"path"
          },
          {
            "description":"If set, then only a diagnostic of doability will be done.",
            "required":false,
            "schema":{
              "title":"Dry run",
              "type":"boolean",
              "description":"If set, then only a diagnostic of doability will be done."
            },
            "example":false,
            "name":"dry_run",
            "in":"query"
          },
          {
            "description":"If set, then *absent* records will be generated, in the relevant samples, for categories present in other samples.",
            "required":false,
            "schema":{
              "title":"With zeroes",
              "type":"boolean",
              "description":"If set, then *absent* records will be generated, in the relevant samples, for categories present in other samples."
            },
            "example":false,
            "name":"with_zeroes",
            "in":"query"
          },
          {
            "description":"If set, then any object classified on a Morpho category will be added to the count of the nearest Phylo parent, upward in the tree.",
            "required":false,
            "schema":{
              "title":"Auto morpho",
              "type":"boolean",
              "description":"If set, then any object classified on a Morpho category will be added to the count of the nearest Phylo parent, upward in the tree."
            },
            "example":false,
            "name":"auto_morpho",
            "in":"query"
          },
          {
            "description":"If set, then an attempt will be made to compute organisms concentrations and biovolumes.",
            "required":false,
            "schema":{
              "title":"With computations",
              "type":"boolean",
              "description":"If set, then an attempt will be made to compute organisms concentrations and biovolumes."
            },
            "example":false,
            "name":"with_computations",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/EMODnetExportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/search":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Search Projects",
        "description":"Returns **projects which the current user has explicit permission to access, with search options.**\n\nNote that, for performance reasons, in returned ProjectModels, field 'highest_rank' is NOT valued\n(unlike in simple query). The same information can be found in 'managers', 'annotators' and 'viewers' lists.",
        "operationId":"search_projects_projects_search_get",
        "parameters":[
          {
            "required":false,
            "deprecated":true,
            "schema":{
              "title":"Also others",
              "type":"boolean",
              "default":false
            },
            "example":false,
            "name":"also_others",
            "in":"query"
          },
          {
            "description":"Return projects on which the current user has _no permission_, but visible to him/her",
            "required":false,
            "schema":{
              "title":"Not granted",
              "type":"boolean",
              "description":"Return projects on which the current user has _no permission_, but visible to him/her",
              "default":false
            },
            "example":false,
            "name":"not_granted",
            "in":"query"
          },
          {
            "description":"Return projects that can be written to (including erased) by the current user",
            "required":false,
            "schema":{
              "title":"Nor managing",
              "type":"boolean",
              "description":"Return projects that can be written to (including erased) by the current user",
              "default":false
            },
            "example":false,
            "name":"for_managing",
            "in":"query"
          },
          {
            "description":"Use this pattern for matching returned projects names",
            "required":false,
            "schema":{
              "title":"Title filter",
              "type":"string",
              "description":"Use this pattern for matching returned projects names"
            },
            "example":"Tara",
            "name":"title_filter",
            "in":"query"
          },
          {
            "description":"Only return projects where this instrument was used",
            "required":false,
            "schema":{
              "title":"Instrument filter",
              "type":"string",
              "description":"Only return projects where this instrument was used",
              "default":""
            },
            "example":"uvp5",
            "name":"instrument_filter",
            "in":"query"
          },
          {
            "description":"Only return projects having 'subset' in their names",
            "required":false,
            "schema":{
              "title":"Filter subset",
              "type":"boolean",
              "description":"Only return projects having 'subset' in their names",
              "default":false
            },
            "example":true,
            "name":"filter_subset",
            "in":"query"
          },
          {
            "description":"One of ['instrument', 'highest_right', 'license', 'projid', 'title', 'visible', 'status', 'objcount', 'pctvalidated', 'pctclassified', 'classifsettings', 'classiffieldlist', 'popoverfieldlist', 'comments', 'projtype', 'rf_models_used', 'cnn_network_id']",
            "required":false,
            "schema":{
              "title":"Order field",
              "type":"string",
              "description":"One of ['instrument', 'highest_right', 'license', 'projid', 'title', 'visible', 'status', 'objcount', 'pctvalidated', 'pctclassified', 'classifsettings', 'classiffieldlist', 'popoverfieldlist', 'comments', 'projtype', 'rf_models_used', 'cnn_network_id']"
            },
            "example":"instrument",
            "name":"order_field",
            "in":"query"
          },
          {
            "description":"Skip `window_start` before returning data",
            "required":false,
            "schema":{
              "title":"Window start",
              "type":"integer",
              "description":"Skip `window_start` before returning data"
            },
            "example":"0",
            "name":"window_start",
            "in":"query"
          },
          {
            "description":"Return only `window_size` lines",
            "required":false,
            "schema":{
              "title":"Window size",
              "type":"integer",
              "description":"Return only `window_size` lines"
            },
            "example":"100",
            "name":"window_size",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Projects Projects Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/create":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Create Project",
        "description":"**Create an empty project with only a title,** and **return its id**.\n\nThe project will be managed by current user.\n\n🔒 The user has to be *app administrator* or *project creator*.",
        "operationId":"create_project_projects_create_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/CreateProjectReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Create Project Projects Create Post",
                  "anyOf":[
                    {
                      "type":"integer"
                    },
                    {
                      "type":"string"
                    }
                  ]
                },
                "example":44
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/subset":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Subset",
        "description":"**Subset a project into another one.**",
        "operationId":"project_subset_projects__project_id__subset_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/SubsetReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SubsetRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Query",
        "description":"**Returns project** if it exists for current user, eventually for managing it.",
        "operationId":"project_query_projects__project_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"For managing this project.",
            "required":false,
            "schema":{
              "title":"For managinig",
              "type":"boolean",
              "description":"For managing this project."
            },
            "example":false,
            "name":"for_managing",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProjectModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "put":{
        "tags":[
          "projects"
        ],
        "summary":"Update Project",
        "description":"**Update the project**.\n\nNote that some fields will **NOT** be updated and simply ignored, e.g. *free_cols*.",
        "operationId":"update_project_projects__project_id__put",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectModel"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      },
      "delete":{
        "tags":[
          "projects"
        ],
        "summary":"Erase Project",
        "description":"**Delete the project.**\n    \nOptionally, if \"only_objects\" is set, the project structure is kept,\nbut emptied from any object, sample, acquisition and process.\n\nOtherwise, no trace of the project will remain in the database.\n\n**Returns** the number of  : **deleted objects**, 0, **deleated image rows** and **deleated image files**.",
        "operationId":"erase_project_projects__project_id__delete",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"If set, the project structure is kept, but emptied from any object, sample, acquisition and process.",
            "required":false,
            "schema":{
              "title":"Only objects",
              "type":"boolean",
              "description":"If set, the project structure is kept, but emptied from any object, sample, acquisition and process.",
              "default":false
            },
            "example":false,
            "name":"only_objects",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":[
                  100,
                  0,
                  10,
                  10
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/project_set/taxo_stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Set Get Stats",
        "description":"**Returns projects statistics**, i.e. used taxa and classification states.",
        "operationId":"project_set_get_stats_project_set_taxo_stats_get",
        "parameters":[
          {
            "description":"String containing the list of one or more id separated by non-num char. \n \n **If several ids are provided**, one stat record will be returned per project.",
            "required":false,
            "schema":{
              "title":"Ids",
              "type":"string",
              "description":"String containing the list of one or more id separated by non-num char. \n \n **If several ids are provided**, one stat record will be returned per project."
            },
            "example":"1",
            "name":"ids",
            "in":"query"
          },
          {
            "description":"**If several taxa_ids are provided**, one stat record will be returned per requested taxa, if populated.\n \n **If taxa_ids is all**, all valued taxa in the project(s) are returned.",
            "required":false,
            "schema":{
              "title":"Taxa Ids",
              "type":"string",
              "description":"**If several taxa_ids are provided**, one stat record will be returned per requested taxa, if populated.\n \n **If taxa_ids is all**, all valued taxa in the project(s) are returned.",
              "default":""
            },
            "example":"all",
            "name":"taxa_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Set Get Stats Project Set Taxo Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectTaxoStatsModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/project_set/user_stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Set Get User Stats",
        "description":"**Returns projects user statistics**, i.e. a summary of the work done by users in the\nrequired projects. \n\nThe returned values are a detail per project, so size of input list equals size of output list.",
        "operationId":"project_set_get_user_stats_project_set_user_stats_get",
        "parameters":[
          {
            "description":"String containing the list of one or more id separated by non-num char. \n \n **If several ids are provided**, one stat record will be returned per project.",
            "required":false,
            "schema":{
              "title":"Ids",
              "type":"string",
              "description":"String containing the list of one or more id separated by non-num char. \n \n **If several ids are provided**, one stat record will be returned per project."
            },
            "example":"1",
            "name":"ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Set Get User Stats Project Set User Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/ProjectUserStatsModel"
                  }
                },
                "example":[
                  {
                    "projid":1,
                    "annotators":[
                      {
                        "id":1267,
                        "name":"User Name"
                      }
                    ],
                    "activities":[
                      {
                        "id":1267,
                        "nb_actions":605,
                        "last_annot":"2021-09-27T13:08:54"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/merge":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Merge",
        "description":"**Merge another project into this one.**\n\nIt's more a phagocytosis than a merge, as the source will see\nall its objects gone and will be erased.",
        "operationId":"project_merge_projects__project_id__merge_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "description":"Id of the other project. This source project will see all its objects gone and will be erased.",
            "required":false,
            "schema":{
              "title":"Source project Id",
              "type":"integer",
              "description":"Id of the other project. This source project will see all its objects gone and will be erased."
            },
            "example":2,
            "name":"source_project_id",
            "in":"query"
          },
          {
            "description":"If set, then only a diagnostic of doability will be done.",
            "required":false,
            "schema":{
              "title":"Dry run",
              "type":"boolean",
              "description":"If set, then only a diagnostic of doability will be done."
            },
            "example":true,
            "name":"dry_run",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/MergeRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/check":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Check",
        "description":"**Check consistency of a project**.\n\nWith time and bugs, some consistency problems could be introduced in projects.\nThis service aims at listing them.",
        "operationId":"project_check_projects__project_id__check_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Project Check Projects  Project Id  Check Get",
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                },
                "example":[]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/stats":{
      "get":{
        "tags":[
          "projects"
        ],
        "summary":"Project Stats",
        "description":"Check consistency of a project.",
        "operationId":"project_stats_projects__project_id__stats_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/projects/{project_id}/recompute_geo":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Project Recompute Geography",
        "description":"**Recompute geography information** for all samples in project.\n\n🔒 The user has to be *project manager*.",
        "operationId":"project_recompute_geography_projects__project_id__recompute_geo_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{},
                "example":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/file_import/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Import File",
        "description":"Validate or do a real import of an EcoTaxa archive or directory.",
        "operationId":"import_file_file_import__project_id__post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ImportReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ImportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/simple_import/{project_id}":{
      "post":{
        "tags":[
          "projects"
        ],
        "summary":"Simple Import",
        "description":"Import images only, with same metadata for all.\n- param `dry_run`: If set, then _only_ a diagnostic of do-ability will be done.\n    In this case, plain value check.\nIf no dry_run, this call will create a background job.",
        "operationId":"simple_import_simple_import__project_id__post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Dry Run",
              "type":"boolean"
            },
            "name":"dry_run",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/SimpleImportReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SimpleImportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/samples/search":{
      "get":{
        "tags":[
          "samples"
        ],
        "summary":"Samples Search",
        "description":"**Search for samples**",
        "operationId":"samples_search_samples_search_get",
        "parameters":[
          {
            "description":"String containing the list of one or more project id separated by non-num char.",
            "required":false,
            "schema":{
              "title":"Project Ids",
              "type":"string",
              "description":"String containing the list of one or more project id separated by non-num char."
            },
            "example":"1,55",
            "name":"project_ids",
            "in":"query"
          },
          {
            "description":"Sample id textual pattern. Use * or '' for 'any matches'. Match is case-insensitive.",
            "required":false,
            "schema":{
              "title":"Pattern Id",
              "type":"string",
              "description":"Sample id textual pattern. Use * or '' for 'any matches'. Match is case-insensitive."
            },
            "example":"*",
            "name":"id_pattern",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Samples Search Samples Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/SampleModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/sample_set/taxo_stats":{
      "get":{
        "tags":[
          "samples"
        ],
        "summary":"Sample Set Get Stats",
        "description":"Returns **classification statistics** for the given set of samples.\n\nEXPECT A SLOW RESPONSE : No cache of such information anywhere.",
        "operationId":"sample_set_get_stats_sample_set_taxo_stats_get",
        "parameters":[
          {
            "description":"String containing the list of one or more sample ids separated by non-num char.",
            "required":false,
            "schema":{
              "title":"Sample Ids",
              "type":"string",
              "description":"String containing the list of one or more sample ids separated by non-num char."
            },
            "example":"15,5",
            "name":"sample_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Sample Set Get Stats Sample Set Taxo Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/SampleTaxoStatsModel"
                  }
                },
                "example":{
                  "nb_dubious":56,
                  "nb_predicted":5500,
                  "nb_unclassified":0,
                  "nb_validated":1345,
                  "projid":1,
                  "used_taxa":[
                    45072,
                    78418,
                    84963,
                    85011,
                    85012,
                    85078
                  ]
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/sample_set/update":{
      "post":{
        "tags":[
          "samples"
        ],
        "summary":"Update Samples",
        "description":"Do the required **update for each sample in the set.** \n\nAny non-null field in the model is written to every impacted sample.\n\n**Returns the number of updated entities.**",
        "operationId":"update_samples_sample_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Samples Sample Set Update Post",
                  "type":"integer"
                },
                "example":1
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/sample/{sample_id}":{
      "get":{
        "tags":[
          "samples"
        ],
        "summary":"Sample Query",
        "description":"Returns **information about the sample** corresponding to the given id.",
        "operationId":"sample_query_sample__sample_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Sample Id",
              "type":"integer"
            },
            "name":"sample_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/SampleModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/acquisitions/search":{
      "get":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Acquisitions Search",
        "description":"Returns the **list of all acquisitions for a given project**.",
        "operationId":"acquisitions_search_acquisitions_search_get",
        "parameters":[
          {
            "description":"The project id",
            "required":false,
            "schema":{
              "title":"Project id",
              "type":"integer",
              "description":"The project id"
            },
            "example":1,
            "name":"project_id",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Acquisitions Search Acquisitions Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/AcquisitionModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/acquisition_set/update":{
      "post":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Update Acquisitions",
        "description":"Do the required **update for each acquisition in the set**.\n\nReturn the number of updated entities.",
        "operationId":"update_acquisitions_acquisition_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Acquisitions Acquisition Set Update Post",
                  "type":"integer"
                },
                "example":2
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/acquisition/{acquisition_id}":{
      "get":{
        "tags":[
          "acquisitions"
        ],
        "summary":"Acquisition Query",
        "description":"Returns **information about the acquisition** corresponding to the given id.",
        "operationId":"acquisition_query_acquisition__acquisition_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Acquisition Id",
              "type":"integer"
            },
            "name":"acquisition_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/AcquisitionModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/instruments/":{
      "get":{
        "tags":[
          "instrument"
        ],
        "summary":"Instrument Query",
        "description":"Returns the list of instruments, inside specific project(s).",
        "operationId":"instrument_query_instruments__get",
        "parameters":[
          {
            "description":"String containing the list of one or more project id separated by non-num char.",
            "required":false,
            "schema":{
              "title":"Projects ids",
              "type":"string",
              "description":"String containing the list of one or more project id separated by non-num char."
            },
            "example":"1,2,3",
            "name":"project_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Instrument Query Instruments  Get",
                  "type":"array",
                  "items":{
                    "type":"string"
                  }
                },
                "example":[
                  "uvp5",
                  "zooscan"
                ]
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/process_set/update":{
      "post":{
        "tags":[
          "processes"
        ],
        "summary":"Update Processes",
        "description":"Do the required update for each process in the set.\n    Return the number of updated entities.",
        "operationId":"update_processes_process_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Update Processes Process Set Update Post",
                  "type":"integer"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/process/{process_id}":{
      "get":{
        "tags":[
          "processes"
        ],
        "summary":"Process Query",
        "description":"Read a single object.",
        "operationId":"process_query_process__process_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Process Id",
              "type":"integer"
            },
            "name":"process_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ProcessModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/query":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Get Object Set",
        "description":"Return object ids for the given project with the filters.\n\nOptionally:\n\n    - fields will specify the needed object (and ancilliary entities) fields\n    - order_field will order the result using given field, If prefixed with \"-\" then it will be reversed.\n    - window_start & window_size allows to return only a slice of the result.\n\nFields follow the naming convention: `prefix.field`.\n    Prefix is either 'obj' for main object, 'fre' for free fields, 'img' for the visible image.\n    Use a comma to separate fields.\n    - Column obj.imgcount contains the total count of images for the object.",
        "operationId":"get_object_set_object_set__project_id__query_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":false,
            "schema":{
              "title":"Fields",
              "type":"string"
            },
            "name":"fields",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Order Field",
              "type":"string"
            },
            "name":"order_field",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Window Start",
              "type":"integer"
            },
            "name":"window_start",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Window Size",
              "type":"integer"
            },
            "name":"window_size",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetQueryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/summary":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Get Object Set Summary",
        "description":"For the given project, with given filters, return the classification summary, i.e.:\n    - Total number of objects\nAlso if 'only_total' is not set:\n    - Number of Validated ones\n    - Number of Dubious ones\n    - Number of Predicted ones",
        "operationId":"get_object_set_summary_object_set__project_id__summary_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Only Total",
              "type":"boolean"
            },
            "name":"only_total",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetSummaryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/reset_to_predicted":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Reset Object Set To Predicted",
        "description":"Reset to Predicted all objects for the given project with the filters.",
        "operationId":"reset_object_set_to_predicted_object_set__project_id__reset_to_predicted_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/revert_to_history":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Revert Object Set To History",
        "description":"Revert all objects for the given project, with the filters, to the target.\n- param `filters`: The set of filters to apply to get the target objects.\n- param `dry_run`: If set, then no real write but consequences of the revert will be replied.\n- param `target`: Use null/None for reverting using the last annotation from anyone, or a user id\n    for the last annotation from this user.",
        "operationId":"revert_object_set_to_history_object_set__project_id__revert_to_history_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Dry Run",
              "type":"boolean"
            },
            "name":"dry_run",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Target",
              "type":"integer"
            },
            "name":"target",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetRevertToHistoryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/{project_id}/reclassify":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Reclassify Object Set",
        "description":"Regardless of present classification or state, set the new classification for this object set.\nIf the filter designates \"all with given classification\", add a TaxonomyChangeLog entry.\n:returns the number of affected objects.",
        "operationId":"reclassify_object_set_object_set__project_id__reclassify_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          },
          {
            "required":true,
            "schema":{
              "title":"Forced Id",
              "type":"integer"
            },
            "name":"forced_id",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Reason",
              "type":"string"
            },
            "name":"reason",
            "in":"query"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ProjectFilters"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/update":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Update Object Set",
        "description":"Update all the objects with given IDs and values\nCurrent user needs Manage right on all projects of specified objects.",
        "operationId":"update_object_set_object_set_update_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/BulkUpdateReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/classify":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Classify Object Set",
        "description":"Change classification and/or qualification for a set of objects.\nCurrent user needs at least Annotate right on all projects of specified objects.",
        "operationId":"classify_object_set_object_set_classify_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ClassifyReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/classify_auto":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Classify Auto Object Set",
        "description":"Set automatic classification of a set of objects.\n - `params`: None, all is in the Request body.",
        "operationId":"classify_auto_object_set_object_set_classify_auto_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/ClassifyAutoReq"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/parents":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Query Object Set Parents",
        "description":"Return object ids, with parent ones and projects for the objects in given list.",
        "operationId":"query_object_set_parents_object_set_parents_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Object Ids",
                "type":"array",
                "items":{
                  "type":"integer"
                }
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectSetQueryRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/export":{
      "post":{
        "tags":[
          "objects"
        ],
        "summary":"Export Object Set",
        "description":"Start an export job for the given object set and options.",
        "operationId":"export_object_set_object_set_export_post",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "$ref":"#/components/schemas/Body_export_object_set_object_set_export_post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ExportRsp"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object_set/":{
      "delete":{
        "tags":[
          "objects"
        ],
        "summary":"Erase Object Set",
        "description":"Delete the objects with given object ids.\nCurrent user needs Manage right on all projects of specified objects.",
        "operationId":"erase_object_set_object_set__delete",
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Object Ids",
                "type":"array",
                "items":{
                  "type":"integer"
                }
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object/{object_id}":{
      "get":{
        "tags":[
          "object"
        ],
        "summary":"Object Query",
        "description":"Read a single object. Anonymous reader can do if the project has the right rights :)",
        "operationId":"object_query_object__object_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Object Id",
              "type":"integer"
            },
            "name":"object_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/ObjectModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/object/{object_id}/history":{
      "get":{
        "tags":[
          "object"
        ],
        "summary":"Object Query History",
        "description":"Read a single object's history.",
        "operationId":"object_query_history_object__object_id__history_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Object Id",
              "type":"integer"
            },
            "name":"object_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Object Query History Object  Object Id  History Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/HistoricalClassification"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Root Taxa",
        "description":"Return all taxa with no parent.",
        "operationId":"query_root_taxa_taxa_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Root Taxa Taxa Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/taxa/status":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Taxa Tree Status",
        "description":"Return the status of taxonomy tree w/r to freshness.",
        "operationId":"taxa_tree_status_taxa_status_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/TaxonomyTreeStatus"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa/reclassification_stats":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Reclassif Stats",
        "description":"Dig into reclassification logs and, for each input category id, determine the most chosen target category,\nexcluding the advised one.\nBy convention, if nothing relevant is found, the input category itself is returned. So one can expect\nthat the returned list has the same size as the required one.",
        "operationId":"reclassif_stats_taxa_reclassification_stats_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Taxa Ids",
              "type":"string"
            },
            "name":"taxa_ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Reclassif Stats Taxa Reclassification Stats Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa/reclassification_history/{project_id}":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Reclassif Project Stats",
        "description":"Dig into reclassification logs and return the associations source->target for previous reclassifications.",
        "operationId":"reclassif_project_stats_taxa_reclassification_history__project_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon/{taxon_id}":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Taxa",
        "description":"Information about a single taxon, including its lineage.",
        "operationId":"query_taxa_taxon__taxon_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Taxon Id",
              "type":"integer"
            },
            "name":"taxon_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/TaxonModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon/{taxon_id}/usage":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Taxa Usage",
        "description":"Where a given taxon is used. Only validated uses are returned.",
        "operationId":"query_taxa_usage_taxon__taxon_id__usage_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Taxon Id",
              "type":"integer"
            },
            "name":"taxon_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Taxa Usage Taxon  Taxon Id  Usage Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonUsageModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon_set/search":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Search Taxa",
        "description":"Search for taxa by name.\n\nQueries can be 'small', i.e. of length < 3 and even zero-length.\nFor a public, unauthenticated call:\n- zero-length and small queries always return nothing.\n- otherwise, a full search is done and results are returned in alphabetical order.\n\nBehavior for an authenticated call:\n- zero-length queries: return the MRU list in full.\n- small queries: the MRU list is searched, so that taxa in the recent list are returned, if matching.\n- otherwise, a full search is done. Results are ordered so that taxa in the project list are in first,\n    and are signalled as such in the response.",
        "operationId":"search_taxa_taxon_set_search_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Query",
              "type":"string"
            },
            "name":"query",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Project Id",
              "type":"integer"
            },
            "name":"project_id",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Search Taxa Taxon Set Search Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxaSearchRsp"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon_set/query":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Query Taxa Set",
        "description":"Information about several taxa, including their lineage.\nThe separator between numbers is arbitrary non-digit, e.g. \":\", \"|\" or \",\"",
        "operationId":"query_taxa_set_taxon_set_query_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Ids",
              "type":"string"
            },
            "name":"ids",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Query Taxa Set Taxon Set Query Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/TaxonModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon/central/{taxon_id}":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Get Taxon In Central",
        "description":"Get EcoTaxoServer full record for this taxon.",
        "operationId":"get_taxon_in_central_taxon_central__taxon_id__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Taxon Id",
              "type":"integer"
            },
            "name":"taxon_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxon/central":{
      "put":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Add Taxon In Central",
        "description":"Create a taxon on EcoTaxoServer.\nLogged user must be manager (on any project) or application admin.",
        "operationId":"add_taxon_in_central_taxon_central_put",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Name",
              "type":"string"
            },
            "name":"name",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Parent Id",
              "type":"integer"
            },
            "name":"parent_id",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Taxotype",
              "type":"string"
            },
            "name":"taxotype",
            "in":"query"
          },
          {
            "required":true,
            "schema":{
              "title":"Creator Email",
              "type":"string"
            },
            "name":"creator_email",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Source Desc",
              "type":"string"
            },
            "name":"source_desc",
            "in":"query"
          },
          {
            "required":false,
            "schema":{
              "title":"Source Url",
              "type":"string"
            },
            "name":"source_url",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa/stats/push_to_central":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Push Taxa Stats In Central",
        "description":"Push present instance stats into EcoTaxoServer.",
        "operationId":"push_taxa_stats_in_central_taxa_stats_push_to_central_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/taxa/pull_from_central":{
      "get":{
        "tags":[
          "Taxonomy Tree"
        ],
        "summary":"Pull Taxa Update From Central",
        "description":"Get what changed in EcoTaxoServer managed tree and update local tree accordingly.",
        "operationId":"pull_taxa_update_from_central_taxa_pull_from_central_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"List Jobs",
        "description":"Return the jobs for current user, or all of them if admin and asked for.",
        "operationId":"list_jobs_jobs__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"For Admin",
              "type":"boolean"
            },
            "name":"for_admin",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response List Jobs Jobs  Get",
                  "type":"array",
                  "items":{
                    "$ref":"#/components/schemas/JobModel"
                  }
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"Get Job",
        "description":"Return the job by its id.",
        "operationId":"get_job_jobs__job_id___get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer"
            },
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/JobModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/answer":{
      "post":{
        "tags":[
          "jobs"
        ],
        "summary":"Reply Job Question",
        "description":"Send answers to last question. The job resumes after it receives the reply.\nNote: It's only about data storage here.\nIf the data is technically NOK e.g. not a JS object, standard 422 error should be thrown.\nIf the data is incorrect from consistency point of view, the job will return in Asking state.",
        "operationId":"reply_job_question_jobs__job_id__answer_post",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer"
            },
            "name":"job_id",
            "in":"path"
          }
        ],
        "requestBody":{
          "content":{
            "application/json":{
              "schema":{
                "title":"Reply",
                "type":"object"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/restart":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"Restart Job",
        "description":"Restart the job by its id.\nThe job must be in a restartable state, and be accessible to current user.",
        "operationId":"restart_job_jobs__job_id__restart_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer"
            },
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/log":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"Get Job Log File",
        "description":"Return the log file produced by given task.\nThe task must belong to requester.",
        "operationId":"get_job_log_file_jobs__job_id__log_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer"
            },
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}/file":{
      "get":{
        "tags":[
          "jobs"
        ],
        "summary":"Get Job File",
        "description":"Return the file produced by given task.\nThe task must belong to requester.",
        "operationId":"get_job_file_jobs__job_id__file_get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer"
            },
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Return the produced file.",
            "content":{
              "application/json":{
                "schema":{}
              },
              "application/zip":{},
              "text/tab-separated-values":{}
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/jobs/{job_id}":{
      "delete":{
        "tags":[
          "jobs"
        ],
        "summary":"Erase Job",
        "description":"Delete the job, from DB and with associated storage.\nIf the job is running then kill it.",
        "operationId":"erase_job_jobs__job_id__delete",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Job Id",
              "type":"integer"
            },
            "name":"job_id",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/my_files/{sub_path}":{
      "get":{
        "tags":[
          "Files"
        ],
        "summary":"List User Files",
        "description":"List the private files which are usable for some file-related operations e.g. import.",
        "operationId":"list_user_files_my_files__sub_path__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Sub Path",
              "type":"string"
            },
            "name":"sub_path",
            "in":"path"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/DirectoryModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/my_files/":{
      "post":{
        "tags":[
          "Files"
        ],
        "summary":"Put User File",
        "description":"Upload a file for the current user. The returned text will contain a serve-side path\nwhich is usable for some file-related operations e.g. import.",
        "operationId":"put_user_file_my_files__post",
        "requestBody":{
          "content":{
            "multipart/form-data":{
              "schema":{
                "$ref":"#/components/schemas/Body_put_user_file_my_files__post"
              }
            }
          },
          "required":true
        },
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Put User File My Files  Post",
                  "type":"string"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/common_files/":{
      "get":{
        "tags":[
          "Files"
        ],
        "summary":"List Common Files",
        "description":"List the common files which are usable for some file-related operations e.g. import.",
        "operationId":"list_common_files_common_files__get",
        "parameters":[
          {
            "required":true,
            "schema":{
              "title":"Path",
              "type":"string"
            },
            "name":"path",
            "in":"query"
          }
        ],
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/DirectoryModel"
                }
              }
            }
          },
          "422":{
            "description":"Validation Error",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/status":{
      "get":{
        "tags":[
          "WIP"
        ],
        "summary":"System Status",
        "description":"Report the status, mainly used for verifying that the server is up.",
        "operationId":"system_status_status_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/error":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"System Error",
        "description":"This entry point will return a 500 internal error, on purpose so the stack trace is visible and client\ncan see what it gives.",
        "operationId":"system_error_error_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{}
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/noop":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"Do Nothing",
        "description":"This entry point will just do nothing.\n    It's also used for exporting models we need on client side.",
        "operationId":"do_nothing_noop_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "title":"Response Do Nothing Noop Get",
                  "anyOf":[
                    {
                      "$ref":"#/components/schemas/ObjectHeaderModel"
                    },
                    {
                      "$ref":"#/components/schemas/HistoricalClassification"
                    }
                  ]
                }
              }
            }
          }
        },
        "security":[
          {
            "BearerOrCookieAuth":[]
          }
        ]
      }
    },
    "/constants":{
      "get":{
        "tags":[
          "misc"
        ],
        "summary":"Used Constants",
        "description":"This entry point will return useful strings for user dialog.\nNow also used for values extracted from Config.",
        "operationId":"used_constants_constants_get",
        "responses":{
          "200":{
            "description":"Successful Response",
            "content":{
              "application/json":{
                "schema":{
                  "$ref":"#/components/schemas/Constants"
                }
              }
            }
          }
        }
      }
    }
  },
  "components":{
    "schemas":{
      "AcquisitionModel":{
        "title":"AcquisitionModel",
        "type":"object",
        "properties":{
          "acquisid":{
            "title":"Acquisition Id",
            "type":"integer",
            "description":"The acquisition Id",
            "example":144
          },
          "acq_sample_id":{
            "title":"Acquisition sample Id",
            "type":"integer",
            "description":"The acquisition sample Id",
            "example":1039
          },
          "orig_id":{
            "title":"Origine Id",
            "type":"string",
            "description":"The origine Id",
            "example":"uvp5_station1_cast1b"
          },
          "instrument":{
            "title":"Instrument",
            "type":"string",
            "description":"Instrument used",
            "example":"uvp5"
          },
          "free_columns":{
            "title":"Free columns",
            "type":"object",
            "description":"Free columns from acquisition mapping in project",
            "default":{},
            "example":{
              "bottomdepth":322,
              "ship":"suroit"
            }
          }
        }
      },
      "Body_export_object_set_object_set_export_post":{
        "title":"Body_export_object_set_object_set_export_post",
        "required":[
          "filters",
          "request"
        ],
        "type":"object",
        "properties":{
          "filters":{
            "$ref":"#/components/schemas/ProjectFilters"
          },
          "request":{
            "$ref":"#/components/schemas/ExportReq"
          }
        }
      },
      "Body_put_user_file_my_files__post":{
        "title":"Body_put_user_file_my_files__post",
        "required":[
          "file"
        ],
        "type":"object",
        "properties":{
          "file":{
            "title":"File",
            "type":"string",
            "format":"binary"
          },
          "path":{
            "title":"Path",
            "type":"string"
          },
          "tag":{
            "title":"Tag",
            "type":"string"
          }
        }
      },
      "BulkUpdateReq":{
        "title":"BulkUpdateReq",
        "required":[
          "target_ids",
          "updates"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"Target Id",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The IDs of the target entities",
            "example":[
              1,
              5,
              290
            ]
          },
          "updates":{
            "title":"Updates",
            "type":"array",
            "items":{},
            "description":"The list of updates, to do on all impacted entities. \n\n     { \n\n         ucol : A column name, pseudo-columns AKA free ones, are OK. \n\n         uval : The new value to set, always as a string \n\n     }",
            "example":[
              {
                "ucol":"sub_part",
                "uval":"2"
              }
            ]
          }
        }
      },
      "ClassifyAutoReq":{
        "title":"ClassifyAutoReq",
        "required":[
          "target_ids",
          "classifications",
          "scores",
          "keep_log"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"The IDs of the target objects",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "classifications":{
            "title":"The wanted new classifications, i.e. taxon ID, one for each object. ",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "scores":{
            "title":"The classification scores, generally b/w 0 and 1. ",
            "type":"array",
            "items":{
              "type":"number"
            }
          },
          "keep_log":{
            "title":"Set if former automatic classification history is needed. ",
            "type":"boolean"
          }
        },
        "example":{
          "target_ids":[
            634509,
            6234516,
            976544
          ],
          "classifications":[
            7546,
            3421,
            788
          ],
          "scores":[
            0.4,
            0.56,
            0.38
          ],
          "keep_log":false
        }
      },
      "ClassifyReq":{
        "title":"ClassifyReq",
        "required":[
          "target_ids",
          "classifications",
          "wanted_qualification"
        ],
        "type":"object",
        "properties":{
          "target_ids":{
            "title":"The IDs of the target objects",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "classifications":{
            "title":"The wanted new classifications, i.e. taxon ID, one for each object.  Use -1 to keep present one.",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "wanted_qualification":{
            "title":"The wanted qualifications for all objects. 'V' and 'P'.",
            "type":"string"
          }
        }
      },
      "CollectionModel":{
        "title":"CollectionModel",
        "required":[
          "project_ids"
        ],
        "type":"object",
        "properties":{
          "project_ids":{
            "title":"Project ids",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The list of composing project IDs",
            "example":[
              1
            ]
          },
          "provider_user":{
            "title":"Provider user",
            "allOf":[
              {
                "$ref":"#/components/schemas/UserModel"
              }
            ],
            "description":"Is the person who \n        is responsible for the content of this metadata record. Writer of the title and abstract."
          },
          "contact_user":{
            "title":"Contact user",
            "allOf":[
              {
                "$ref":"#/components/schemas/UserModel"
              }
            ],
            "description":"Is the person who \n        should be contacted in cases of questions regarding the content of the dataset or any data restrictions. \n        This is also the person who is most likely to stay involved in the dataset the longest."
          },
          "creator_users":{
            "title":"Creator users",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "description":"All people who \n        are responsible for the creation of the collection. Data creators should receive credit \n        for their work and should therefore be included in the citation.",
            "default":[]
          },
          "creator_organisations":{
            "title":"Creator organisations",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"All \n        organisations who are responsible for the creation of the collection. Data creators should \n        receive credit for their work and should therefore be included in the citation.",
            "default":[]
          },
          "associate_users":{
            "title":"Associate users",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "description":"Other person(s) \n        associated with the collection",
            "default":[]
          },
          "associate_organisations":{
            "title":"Associate organisations",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Other \n        organisation(s) associated with the collection",
            "default":[]
          },
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"The collection Id",
            "example":1
          },
          "external_id":{
            "title":"External Id",
            "type":"string",
            "description":"The external Id",
            "example":""
          },
          "external_id_system":{
            "title":"External id system",
            "type":"string",
            "description":"The external Id system",
            "example":""
          },
          "title":{
            "title":"Title",
            "type":"string",
            "description":"The collection title",
            "example":"My collection"
          },
          "short_title":{
            "title":"Short title",
            "type":"string",
            "description":"The collection short title",
            "example":"My coll"
          },
          "citation":{
            "title":"Citation",
            "type":"string",
            "description":"The collection citation",
            "example":""
          },
          "license":{
            "title":"License",
            "type":"string",
            "description":"The collection license",
            "example":"CC BY 4.0"
          },
          "abstract":{
            "title":"Abstract",
            "type":"string",
            "description":"The collection abstract",
            "example":""
          },
          "description":{
            "title":"Description",
            "type":"string",
            "description":"The collection description",
            "example":""
          }
        },
        "description":"Collection + computed"
      },
      "Constants":{
        "title":"Constants",
        "type":"object",
        "properties":{
          "license_texts":{
            "title":"The supported licenses and help text/links",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{
              "CC0 1.0":"<a href=\"https://creativecommons.org/publicdomain/zero/1.0/\" rel=\"nofollow\"><strong>CC-0</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, with no conditions. Other databases can index the data. The data falls into the worldwide public domain. This is the license preferred by <a href=\"https://obis.org/manual/policy/\" rel=\"nofollow\">OBIS</a> and <a href=\"https://www.gbif.org/terms\" rel=\"nofollow\">GBIF</a>.",
              "CC BY 4.0":"<a href=\"https://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\"><strong>CC-BY</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors. Other databases can index the data.",
              "CC BY-NC 4.0":"<a href=\"https://creativecommons.org/licenses/by-nc/4.0/\" rel=\"nofollow\"><strong>CC-BY-NC</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors, and do not use it for commercial purpose (\"primarily intended for or directed toward commercial advantage or monetary compensation\"). Other databases can index the data.",
              "Copyright":"<strong>Copyright</strong>: only contributors to this project have rights on this data. This prevents its distribution in any kind of database.",
              "":"Not chosen"
            }
          },
          "app_manager":{
            "title":"The application manager identity (name, mail), from config file",
            "maxItems":2,
            "minItems":2,
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[
              "",
              ""
            ]
          }
        },
        "description":"Values which can be considered identical over the lifetime of the back-end "
      },
      "CreateCollectionReq":{
        "title":"CreateCollectionReq",
        "required":[
          "title",
          "project_ids"
        ],
        "type":"object",
        "properties":{
          "title":{
            "title":"Title",
            "type":"string",
            "description":"The collection title",
            "example":"My collection"
          },
          "project_ids":{
            "title":"Project ids",
            "minItems":1,
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The list of composing project IDs",
            "example":[
              1
            ]
          }
        }
      },
      "CreateProjectReq":{
        "title":"CreateProjectReq",
        "required":[
          "title"
        ],
        "type":"object",
        "properties":{
          "clone_of_id":{
            "title":"Clone of id",
            "type":"integer",
            "description":"If set, clone specified Project",
            "example":2
          },
          "title":{
            "title":"Title",
            "type":"string",
            "description":"The project title",
            "example":"My new project title"
          },
          "visible":{
            "title":"Visible",
            "type":"boolean",
            "description":"If True, the project is created visible",
            "default":true,
            "example":true
          }
        }
      },
      "DirectoryEntryModel":{
        "title":"DirectoryEntryModel",
        "required":[
          "name",
          "type",
          "size",
          "mtime"
        ],
        "type":"object",
        "properties":{
          "name":{
            "title":"atomic entry name",
            "type":"string"
          },
          "type":{
            "title":"entry type, 'D' for directory, 'F' for file",
            "type":"string"
          },
          "size":{
            "title":"Entry size, for zips",
            "type":"integer"
          },
          "mtime":{
            "title":"Modification time, in ISO format",
            "type":"string"
          }
        },
        "description":"Something inside a directory, i.e. a sub-directory or a file"
      },
      "DirectoryModel":{
        "title":"DirectoryModel",
        "required":[
          "path",
          "entries"
        ],
        "type":"object",
        "properties":{
          "path":{
            "title":"A /-separated path from root to this directory",
            "type":"string"
          },
          "entries":{
            "title":"Entries, i.e. subdirectories or contained files. All entries are readable, i.e. can be used as input or navigated into.",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/DirectoryEntryModel"
            }
          }
        },
        "description":"A path + list of entries inside. The path is relative to an implied root."
      },
      "EMODnetExportRsp":{
        "title":"EMODnetExportRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"Errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Showstopper problems found while building the archive.",
            "default":[],
            "example":[]
          },
          "warnings":{
            "title":"Warnings",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Problems found while building the archive, which do not prevent producing it.",
            "default":[],
            "example":[]
          },
          "job_id":{
            "title":"Job Id",
            "type":"integer",
            "description":"The created job, 0 if there were problems.",
            "default":0,
            "example":1
          }
        },
        "description":"EMODNet format export response."
      },
      "ExportReq":{
        "title":"ExportReq",
        "required":[
          "project_id",
          "exp_type",
          "tsv_entities",
          "split_by",
          "coma_as_separator",
          "format_dates_times",
          "with_images",
          "with_internal_ids",
          "only_first_image",
          "sum_subtotal",
          "out_to_ftp"
        ],
        "type":"object",
        "properties":{
          "project_id":{
            "title":"The project to export",
            "type":"integer"
          },
          "exp_type":{
            "title":"The export type: 'TSV', 'BAK', 'DOI' or 'SUM'.",
            "allOf":[
              {
                "$ref":"#/components/schemas/ExportTypeEnum"
              }
            ]
          },
          "use_latin1":{
            "title":"Export using latin 1 character set, AKA iso-8859-1. Default is utf-8.",
            "type":"boolean",
            "default":false
          },
          "tsv_entities":{
            "title":"For 'TSV' type, the entities to export, one letter for each of O(bject), P(rocess), A(cquisition), S(ample), classification H(istory), C(omments).",
            "type":"string"
          },
          "split_by":{
            "title":"For 'TSV' type, inside archives, split in one directory per... 'sample', 'taxo' or '' (no split)",
            "type":"string"
          },
          "coma_as_separator":{
            "title":"For 'TSV' type, use a , instead of . for decimal separator.",
            "type":"boolean"
          },
          "format_dates_times":{
            "title":"For 'TSV' type, format dates and times using - and : respectively.",
            "type":"boolean"
          },
          "with_images":{
            "title":"For 'BAK' and 'DOI' types, export images as well.",
            "type":"boolean"
          },
          "with_internal_ids":{
            "title":"For 'BAK' and 'DOI' types, export internal DB IDs.",
            "type":"boolean"
          },
          "only_first_image":{
            "title":"For 'DOI' type, export only first (displayed) image.",
            "type":"boolean"
          },
          "sum_subtotal":{
            "title":"For 'SUM' type, how subtotals should be calculated. Per A(cquisition) or S(ample) or ''",
            "type":"string"
          },
          "out_to_ftp":{
            "title":"Copy result file to FTP area. Original file is still available.",
            "type":"boolean"
          }
        },
        "description":"Export request."
      },
      "ExportRsp":{
        "title":"ExportRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"Errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Showstopper problems found while building the archive.",
            "default":[],
            "example":[]
          },
          "warnings":{
            "title":"Warnings",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"Problems found while building the archive, which do not prevent producing it.",
            "default":[],
            "example":[]
          },
          "job_id":{
            "title":"Job Id",
            "type":"integer",
            "description":"The created job, 0 if there were problems.",
            "default":0,
            "example":1
          }
        },
        "description":"Export response.\nTODO: Should inherit the other way round."
      },
      "ExportTypeEnum":{
        "title":"ExportTypeEnum",
        "enum":[
          "TSV",
          "BAK",
          "DOI",
          "SUM"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "GroupDefinitions":{
        "title":"GroupDefinitions",
        "enum":[
          "C",
          "S",
          "A"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "HTTPValidationError":{
        "title":"HTTPValidationError",
        "type":"object",
        "properties":{
          "detail":{
            "title":"Detail",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ValidationError"
            }
          }
        }
      },
      "HistoricalClassification":{
        "title":"HistoricalClassification",
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "classif_date":{
            "title":"Classif Date",
            "type":"string",
            "format":"date-time"
          },
          "classif_who":{
            "title":"Classif Who",
            "type":"integer"
          },
          "classif_type":{
            "title":"Classif Type",
            "type":"string"
          },
          "classif_qual":{
            "title":"Classif Qual",
            "type":"string"
          },
          "classif_score":{
            "title":"Classif Score",
            "type":"number"
          },
          "user_name":{
            "title":"User Name",
            "type":"string"
          },
          "taxon_name":{
            "title":"Taxon Name",
            "type":"string"
          }
        }
      },
      "HistoricalLastClassif":{
        "title":"HistoricalLastClassif",
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "histo_classif_date":{
            "title":"Histo Classif Date",
            "type":"string",
            "format":"date-time"
          },
          "histo_classif_type":{
            "title":"Histo Classif Type",
            "type":"string"
          },
          "histo_classif_id":{
            "title":"Histo Classif Id",
            "type":"integer"
          },
          "histo_classif_qual":{
            "title":"Histo Classif Qual",
            "type":"string"
          },
          "histo_classif_who":{
            "title":"Histo Classif Who",
            "type":"integer"
          }
        }
      },
      "ImageModel":{
        "title":"ImageModel",
        "required":[
          "imgrank",
          "file_name",
          "orig_file_name",
          "width",
          "height"
        ],
        "type":"object",
        "properties":{
          "imgid":{
            "title":"Imgid",
            "type":"integer"
          },
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "imgrank":{
            "title":"Imgrank",
            "type":"integer"
          },
          "file_name":{
            "title":"File Name",
            "type":"string"
          },
          "orig_file_name":{
            "title":"Orig File Name",
            "type":"string"
          },
          "width":{
            "title":"Width",
            "type":"integer"
          },
          "height":{
            "title":"Height",
            "type":"integer"
          },
          "thumb_file_name":{
            "title":"Thumb File Name",
            "type":"string"
          },
          "thumb_width":{
            "title":"Thumb Width",
            "type":"integer"
          },
          "thumb_height":{
            "title":"Thumb Height",
            "type":"integer"
          }
        }
      },
      "ImportReq":{
        "title":"ImportReq",
        "required":[
          "source_path"
        ],
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Source path on server, to zip or plain directory. The path can be returned by a file upload (absolute), otherwise it's relative to shared file area root.",
            "type":"string"
          },
          "taxo_mappings":{
            "title":"Optional taxonomy mapping, key=taxo ID found in file, value=final taxo ID to write",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "default":{}
          },
          "skip_loaded_files":{
            "title":"Skip Loaded Files",
            "type":"boolean",
            "default":false
          },
          "skip_existing_objects":{
            "title":"Skip Existing Objects",
            "type":"boolean",
            "default":false
          },
          "update_mode":{
            "title":"Update data ('Yes'), including classification ('Cla')",
            "type":"string",
            "default":""
          }
        },
        "description":"Import request, from UI choices. "
      },
      "ImportRsp":{
        "title":"ImportRsp",
        "required":[
          "job_id"
        ],
        "type":"object",
        "properties":{
          "job_id":{
            "title":"The job which was created for the run",
            "type":"integer"
          },
          "errors":{
            "title":"Errors from analysis",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          }
        },
        "description":"Import response. "
      },
      "JobModel":{
        "title":"JobModel",
        "required":[
          "owner_id",
          "type",
          "creation_date",
          "updated_on"
        ],
        "type":"object",
        "properties":{
          "params":{
            "title":"Creation parameters",
            "type":"object",
            "default":{}
          },
          "result":{
            "title":"Final result of the run",
            "type":"object",
            "default":{}
          },
          "errors":{
            "title":"The errors seen during last step",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[]
          },
          "question":{
            "title":"The data provoking job move to Asking state",
            "type":"object",
            "default":{}
          },
          "reply":{
            "title":"The data provided as a reply to the question",
            "type":"object",
            "default":{}
          },
          "inside":{
            "title":"Internal state of the job",
            "type":"object",
            "default":{}
          },
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "owner_id":{
            "title":"Owner Id",
            "type":"integer"
          },
          "type":{
            "title":"Type",
            "type":"string"
          },
          "state":{
            "title":"State",
            "type":"string"
          },
          "step":{
            "title":"Step",
            "type":"integer"
          },
          "progress_pct":{
            "title":"Progress Pct",
            "type":"integer"
          },
          "progress_msg":{
            "title":"Progress Msg",
            "type":"string"
          },
          "creation_date":{
            "title":"Creation Date",
            "type":"string",
            "format":"date-time"
          },
          "updated_on":{
            "title":"Updated On",
            "type":"string",
            "format":"date-time"
          }
        },
        "description":"All from DB table"
      },
      "LimitMethods":{
        "title":"LimitMethods",
        "enum":[
          "P",
          "V"
        ],
        "type":"string",
        "description":"An enumeration."
      },
      "LoginReq":{
        "title":"LoginReq",
        "type":"object",
        "properties":{
          "password":{
            "title":"User's password",
            "type":"string",
            "description":"User password",
            "example":"UserPassword!"
          },
          "username":{
            "title":"User's eamil",
            "type":"string",
            "description":"User email used during registration",
            "example":"user@email.com"
          }
        }
      },
      "MergeRsp":{
        "title":"MergeRsp",
        "type":"object",
        "properties":{
          "errors":{
            "title":"Errors",
            "type":"array",
            "items":{
              "type":"string"
            },
            "description":"The errors found during processing.",
            "default":[]
          }
        },
        "description":"Merge response. "
      },
      "MinimalUserBO":{
        "title":"MinimalUserBO",
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "name":{
            "title":"Name",
            "type":"string"
          }
        }
      },
      "ObjectHeaderModel":{
        "title":"ObjectHeaderModel",
        "required":[
          "acquisid",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "acquisid":{
            "title":"Acquisid",
            "type":"integer"
          },
          "orig_id":{
            "title":"Orig Id",
            "type":"string"
          },
          "objdate":{
            "title":"Objdate",
            "type":"string",
            "format":"date"
          },
          "objtime":{
            "title":"Objtime",
            "type":"string",
            "format":"time"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number"
          },
          "longitude":{
            "title":"Longitude",
            "type":"number"
          },
          "depth_min":{
            "title":"Depth Min",
            "type":"number"
          },
          "depth_max":{
            "title":"Depth Max",
            "type":"number"
          },
          "sunpos":{
            "title":"Sunpos",
            "type":"string"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "classif_qual":{
            "title":"Classif Qual",
            "type":"string"
          },
          "classif_who":{
            "title":"Classif Who",
            "type":"integer"
          },
          "classif_when":{
            "title":"Classif When",
            "type":"string",
            "format":"date-time"
          },
          "classif_auto_id":{
            "title":"Classif Auto Id",
            "type":"integer"
          },
          "classif_auto_score":{
            "title":"Classif Auto Score",
            "type":"number"
          },
          "classif_auto_when":{
            "title":"Classif Auto When",
            "type":"string",
            "format":"date-time"
          },
          "classif_crossvalidation_id":{
            "title":"Classif Crossvalidation Id",
            "type":"integer"
          },
          "complement_info":{
            "title":"Complement Info",
            "type":"string"
          },
          "similarity":{
            "title":"Similarity",
            "type":"number"
          },
          "random_value":{
            "title":"Random Value",
            "type":"integer"
          },
          "object_link":{
            "title":"Object Link",
            "type":"string"
          }
        }
      },
      "ObjectModel":{
        "title":"ObjectModel",
        "required":[
          "acquisid",
          "orig_id",
          "sample_id",
          "project_id"
        ],
        "type":"object",
        "properties":{
          "objid":{
            "title":"Objid",
            "type":"integer"
          },
          "acquisid":{
            "title":"Acquisid",
            "type":"integer"
          },
          "orig_id":{
            "title":"Original object ID from initial TSV load",
            "type":"string"
          },
          "objdate":{
            "title":"Objdate",
            "type":"string",
            "format":"date"
          },
          "objtime":{
            "title":"Objtime",
            "type":"string",
            "format":"time"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number"
          },
          "longitude":{
            "title":"Longitude",
            "type":"number"
          },
          "depth_min":{
            "title":"Depth Min",
            "type":"number"
          },
          "depth_max":{
            "title":"Depth Max",
            "type":"number"
          },
          "sunpos":{
            "title":"Sunpos",
            "type":"string"
          },
          "classif_id":{
            "title":"Classif Id",
            "type":"integer"
          },
          "classif_qual":{
            "title":"Classif Qual",
            "type":"string"
          },
          "classif_who":{
            "title":"Classif Who",
            "type":"integer"
          },
          "classif_when":{
            "title":"Classif When",
            "type":"string",
            "format":"date-time"
          },
          "classif_auto_id":{
            "title":"Classif Auto Id",
            "type":"integer"
          },
          "classif_auto_score":{
            "title":"Classif Auto Score",
            "type":"number"
          },
          "classif_auto_when":{
            "title":"Classif Auto When",
            "type":"string",
            "format":"date-time"
          },
          "classif_crossvalidation_id":{
            "title":"Classif Crossvalidation Id",
            "type":"integer"
          },
          "complement_info":{
            "title":"Complement Info",
            "type":"string"
          },
          "similarity":{
            "title":"Similarity",
            "type":"number"
          },
          "random_value":{
            "title":"Random Value",
            "type":"integer"
          },
          "object_link":{
            "title":"Object link",
            "type":"string"
          },
          "sample_id":{
            "title":"Sample (i.e. parent of parent acquisition) ID",
            "type":"integer"
          },
          "project_id":{
            "title":"Project (i.e. parent of sample) ID",
            "type":"integer"
          },
          "images":{
            "title":"Images for this object",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ImageModel"
            },
            "default":[]
          },
          "free_columns":{
            "title":"Free columns from object mapping in project",
            "type":"object",
            "default":{}
          }
        }
      },
      "ObjectSetQueryRsp":{
        "title":"ObjectSetQueryRsp",
        "type":"object",
        "properties":{
          "object_ids":{
            "title":"Matching object IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "acquisition_ids":{
            "title":"Parent (acquisition) IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "sample_ids":{
            "title":"Parent (sample) IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "project_ids":{
            "title":"Project IDs",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "default":[]
          },
          "details":{
            "title":"Requested fields, in request order",
            "type":"array",
            "items":{
              "type":"array",
              "items":{}
            },
            "default":[]
          },
          "total_ids":{
            "title":"Total rows returned by the query, even if it was window-ed",
            "type":"integer",
            "default":0
          }
        },
        "description":"Tuned model for faster serialization out.\nTODO: A bit useless in the context as FastAPI does _not_ use ser/deser from the model.\n      Instead, it produces what needs to be sent over the wire and calls a JSON encoder onto it.\n      So 1) It calls def jsonable_encoder (in FastAPI encoders.py)\n         2) It calls an encoder (presently ORJSONEncoder in main.py)"
      },
      "ObjectSetRevertToHistoryRsp":{
        "title":"ObjectSetRevertToHistoryRsp",
        "type":"object",
        "properties":{
          "last_entries":{
            "title":"Object + last classification",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/HistoricalLastClassif"
            },
            "default":[]
          },
          "classif_info":{
            "title":"Classification names (self+parent) for involved IDs",
            "type":"object",
            "default":{}
          }
        }
      },
      "ObjectSetSummaryRsp":{
        "title":"ObjectSetSummaryRsp",
        "type":"object",
        "properties":{
          "total_objects":{
            "title":"Total number of objects in the set",
            "type":"integer"
          },
          "validated_objects":{
            "title":"Number of validated objects in the set",
            "type":"integer"
          },
          "dubious_objects":{
            "title":"Number of dubious objects in the set",
            "type":"integer"
          },
          "predicted_objects":{
            "title":"Number of predicted objects in the set",
            "type":"integer"
          }
        },
        "description":"Tuned model for faster serialization out.\nTODO: A bit useless in the context as FastAPI does _not_ use ser/deser from the model.\n      Instead, it produces what needs to be sent over the wire and calls a JSON encoder onto it.\n      So 1) It calls def jsonable_encoder (in FastAPI encoders.py)\n         2) It calls an encoder (presently ORJSONEncoder in main.py)"
      },
      "ProcessModel":{
        "title":"ProcessModel",
        "required":[
          "processid",
          "orig_id"
        ],
        "type":"object",
        "properties":{
          "processid":{
            "title":"Processid",
            "type":"integer"
          },
          "orig_id":{
            "title":"Orig Id",
            "type":"string"
          },
          "free_columns":{
            "title":"Free columns from process mapping in project",
            "type":"object",
            "default":{}
          }
        }
      },
      "ProjectFilters":{
        "title":"ProjectFilters",
        "type":"object",
        "properties":{
          "taxo":{
            "title":"Taxo",
            "type":"string"
          },
          "taxochild":{
            "title":"Taxochild",
            "type":"string"
          },
          "statusfilter":{
            "title":"Statusfilter",
            "type":"string"
          },
          "MapN":{
            "title":"Mapn",
            "type":"string"
          },
          "MapW":{
            "title":"Mapw",
            "type":"string"
          },
          "MapE":{
            "title":"Mape",
            "type":"string"
          },
          "MapS":{
            "title":"Maps",
            "type":"string"
          },
          "depthmin":{
            "title":"Depthmin",
            "type":"string"
          },
          "depthmax":{
            "title":"Depthmax",
            "type":"string"
          },
          "samples":{
            "title":"Samples",
            "type":"string"
          },
          "instrum":{
            "title":"Instrum",
            "type":"string"
          },
          "daytime":{
            "title":"Daytime",
            "type":"string"
          },
          "month":{
            "title":"Month",
            "type":"string"
          },
          "fromdate":{
            "title":"Fromdate",
            "type":"string"
          },
          "todate":{
            "title":"Todate",
            "type":"string"
          },
          "fromtime":{
            "title":"Fromtime",
            "type":"string"
          },
          "totime":{
            "title":"Totime",
            "type":"string"
          },
          "inverttime":{
            "title":"Inverttime",
            "type":"string"
          },
          "validfromdate":{
            "title":"Validfromdate",
            "type":"string"
          },
          "validtodate":{
            "title":"Validtodate",
            "type":"string"
          },
          "freenum":{
            "title":"Freenum",
            "type":"string"
          },
          "freenumst":{
            "title":"Freenumst",
            "type":"string"
          },
          "freenumend":{
            "title":"Freenumend",
            "type":"string"
          },
          "freetxt":{
            "title":"Freetxt",
            "type":"string"
          },
          "freetxtval":{
            "title":"Freetxtval",
            "type":"string"
          },
          "filt_annot":{
            "title":"Filt Annot",
            "type":"string"
          },
          "filt_last_annot":{
            "title":"Filt Last Annot",
            "type":"string"
          }
        }
      },
      "ProjectModel":{
        "title":"ProjectModel",
        "required":[
          "projid",
          "title",
          "visible",
          "status",
          "objcount",
          "pctvalidated",
          "pctclassified",
          "classifsettings",
          "classiffieldlist",
          "popoverfieldlist",
          "comments",
          "projtype",
          "rf_models_used",
          "cnn_network_id"
        ],
        "type":"object",
        "properties":{
          "obj_free_cols":{
            "title":"Object free cols",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Object free columns",
            "default":{},
            "example":{
              "area":"n01",
              "esd":"n02"
            }
          },
          "sample_free_cols":{
            "title":"Sample free cols",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Sample free columns",
            "default":{},
            "example":{
              "barcode":"t01"
            }
          },
          "acquisition_free_cols":{
            "title":"Acquisition free cols",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Acquisition free columns",
            "default":{},
            "example":{
              "flash_delay":"t01"
            }
          },
          "process_free_cols":{
            "title":"Process free cols",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"Process free columns",
            "default":{},
            "example":{
              "nb_images":"t01"
            }
          },
          "init_classif_list":{
            "title":"Init classification list",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"Favorite taxa used in classification",
            "default":[],
            "example":[
              5,
              11493,
              11498,
              11509
            ]
          },
          "managers":{
            "title":"Managers",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "description":"Managers of this project",
            "default":[]
          },
          "annotators":{
            "title":"Annotators",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "description":"Annotators of this project, if not manager",
            "default":[]
          },
          "viewers":{
            "title":"Viewers",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserModel"
            },
            "description":"Viewers of this project, if not manager nor annotator",
            "default":[]
          },
          "instrument":{
            "title":"Instrument",
            "type":"string",
            "description":"This project's instrument. Transitory: if several of them, then coma-separated",
            "example":"zooscan"
          },
          "contact":{
            "title":"Contact",
            "allOf":[
              {
                "$ref":"#/components/schemas/UserModel"
              }
            ],
            "description":"The contact person is a manager who serves as the contact person for other users and EcoTaxa's managers."
          },
          "highest_right":{
            "title":"Highest right",
            "type":"string",
            "description":"The highest right for requester on this project. One of 'Manage', 'Annotate', 'View'.",
            "default":"",
            "example":"View"
          },
          "license":{
            "title":"License",
            "type":"string"
          },
          "projid":{
            "title":"Project Id",
            "type":"integer",
            "description":"The project Id",
            "example":4824
          },
          "title":{
            "title":"Title",
            "type":"string",
            "description":"The project title",
            "example":"MyProject"
          },
          "visible":{
            "title":"Visible",
            "type":"boolean",
            "description":"The project visibility",
            "example":false
          },
          "status":{
            "title":"Status",
            "type":"string",
            "description":"The project status",
            "example":"Annotate"
          },
          "objcount":{
            "title":"Object count",
            "type":"number",
            "description":"The number of objects",
            "example":32292.0
          },
          "pctvalidated":{
            "title":"Percentage validated",
            "type":"number",
            "description":"Percentage of validated images.",
            "example":0.015483711135885049
          },
          "pctclassified":{
            "title":"Percentage classified",
            "type":"number",
            "description":"Percentage of classified images.",
            "example":100.0
          },
          "classifsettings":{
            "title":"Classification settings",
            "type":"string",
            "example":"baseproject=1602\ncritvar=%area,angle,area,area_exc,bx,by,cdexc,centroids,circ.,circex,convarea,convperim,cv,elongation,esd,fcons,feret,feretareaexc,fractal,height,histcum1,histcum2,histcum3,intden,kurt,lat_end,lon_end,major,max,mean,meanpos,median,min,minor,mode,nb1,nb2,perim.,perimareaexc,perimferet,perimmajor,range,skelarea,skew,slope,sr,stddev,symetrieh,symetriehc,symetriev,symetrievc,thickr,width,x,xm,xstart,y,ym,ystart\nposttaxomapping=\nseltaxo=45074,84963,61990,13333,82399,61973,62005,25930,25932,61996,78426,81941,11514,85076,85061,30815,85185,92230,85079,84993,25824,85115,85004,26525,25944,11509,26524,92112,84976,25942,84980,85078,78418,84977,85060,61993,61991,85069,81871,74144,11758,72431,13381,11518,5,18758,85117,92042,84968,84997,87826,92236,92237,92039,84989,85193,83281,78412,92239,71617,81977,45071,12865,85044,81940,85067,12908,85116,56693,85008,92139,92068\nusemodel_foldername=testln1"
          },
          "classiffieldlist":{
            "title":"Classification field list",
            "type":"string",
            "example":"depth_min=depth_min\r\ndepth_max=depth_max\r\narea=area [pixel]\r\nmean=mean [0-255]\r\nfractal=fractal\r\nmajor=major [pixel]\r\nsymetrieh=symetrieh\r\ncirc.=circ\r\nferet = Feret [pixel]"
          },
          "popoverfieldlist":{
            "title":"Pop over field list",
            "type":"string",
            "example":"depth_min=depth_min\r\ndepth_max=depth_max\r\narea=area [pixel]\r\nmean=mean [0-255]\r\nfractal=fractal\r\nmajor=major [pixel]\r\nsymetrieh=symetrieh\r\ncirc.=circ\r\nferet = Feret [pixel]"
          },
          "comments":{
            "title":"Comments",
            "type":"string",
            "description":"The project comments",
            "example":""
          },
          "projtype":{
            "title":"Project type",
            "type":"string",
            "description":"The type of the project",
            "example":""
          },
          "rf_models_used":{
            "title":"Rf models used",
            "type":"string",
            "example":""
          },
          "cnn_network_id":{
            "title":"Cnn network id",
            "type":"string",
            "example":"SCN_zooscan_group1"
          }
        },
        "description":"Project + computed"
      },
      "ProjectSummaryModel":{
        "title":"ProjectSummaryModel",
        "type":"object",
        "properties":{
          "projid":{
            "title":"Project Id",
            "type":"integer",
            "description":"Project unique identifier",
            "example":1
          },
          "title":{
            "title":"Project title",
            "type":"string",
            "description":"Project's title",
            "example":"Zooscan Tara Med"
          }
        }
      },
      "ProjectTaxoStatsModel":{
        "title":"ProjectTaxoStatsModel",
        "required":[
          "projid",
          "nb_unclassified",
          "nb_validated",
          "nb_dubious",
          "nb_predicted"
        ],
        "type":"object",
        "properties":{
          "projid":{
            "title":"projid",
            "type":"integer",
            "description":"The project id",
            "example":1
          },
          "used_taxa":{
            "title":"used_taxa",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The taxa/category ids used inside the project. An id of -1 means some unclassified objects",
            "default":[],
            "example":[
              45072,
              78418,
              84963,
              85011,
              85012,
              85078
            ]
          },
          "nb_unclassified":{
            "title":"nb_unclassified",
            "type":"integer",
            "description":"The number of unclassified objects inside the project",
            "example":0
          },
          "nb_validated":{
            "title":"nb_validated",
            "type":"integer",
            "description":"The number of validated objects inside the project",
            "example":5000
          },
          "nb_dubious":{
            "title":"nb_dubious",
            "type":"integer",
            "description":"The number of dubious objects inside the project",
            "example":56
          },
          "nb_predicted":{
            "title":"nb_predicted",
            "type":"integer",
            "description":"The number of predicted objects inside the project",
            "example":1345
          }
        }
      },
      "ProjectUserStatsModel":{
        "title":"ProjectUserStatsModel",
        "type":"object",
        "properties":{
          "projid":{
            "title":"Project id",
            "type":"integer",
            "description":"The project id"
          },
          "annotators":{
            "title":"Annotators",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/MinimalUserBO"
            },
            "description":"The users who ever decided on classification or state of objects"
          },
          "activities":{
            "title":"Activities",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/UserActivity"
            },
            "description":"More details on annotators' activities"
          }
        }
      },
      "SampleModel":{
        "title":"SampleModel",
        "required":[
          "sampleid",
          "projid",
          "orig_id",
          "latitude",
          "longitude",
          "dataportal_descriptor"
        ],
        "type":"object",
        "properties":{
          "sampleid":{
            "title":"Sample Id",
            "type":"integer",
            "description":"The sample Id",
            "example":100
          },
          "projid":{
            "title":"Project Id",
            "type":"integer",
            "description":"The project Id",
            "example":4
          },
          "orig_id":{
            "title":"Origine Id",
            "type":"string",
            "description":"The origine Id",
            "example":"dewex_leg2_19"
          },
          "latitude":{
            "title":"Latitude",
            "type":"number",
            "description":"The latitude",
            "example":42.0231666666667
          },
          "longitude":{
            "title":"Longitude",
            "type":"number",
            "description":"The longitude",
            "example":4.71766666666667
          },
          "dataportal_descriptor":{
            "title":"Dataportal descriptor",
            "type":"string",
            "example":""
          },
          "free_columns":{
            "title":"Free columns",
            "type":"object",
            "description":"Free columns from sample mapping in project",
            "default":{},
            "example":{
              "flash_delay":"t01"
            }
          }
        }
      },
      "SampleTaxoStatsModel":{
        "title":"SampleTaxoStatsModel",
        "type":"object",
        "properties":{
          "sample_id":{
            "title":"Sample id",
            "type":"integer",
            "description":"The sample id"
          },
          "used_taxa":{
            "title":"Used taxa",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"The taxa/category ids used inside the sample. -1 for unclassified objects"
          },
          "nb_unclassified":{
            "title":"Number unclassified",
            "type":"integer",
            "description":"The number of unclassified objects inside the sample"
          },
          "nb_validated":{
            "title":"Number validated",
            "type":"integer",
            "description":"The number of validated objects inside the sample"
          },
          "nb_dubious":{
            "title":"Number dubious",
            "type":"integer",
            "description":"The number of dubious objects inside the sample"
          },
          "nb_predicted":{
            "title":"Number predicted",
            "type":"integer",
            "description":"The number of predicted objects inside the sample"
          }
        }
      },
      "SimpleImportReq":{
        "title":"SimpleImportReq",
        "required":[
          "source_path",
          "values"
        ],
        "type":"object",
        "properties":{
          "source_path":{
            "title":"Source path on server, to zip or plain directory",
            "type":"string"
          },
          "values":{
            "title":"Constant values, per field, to write for all images. If a field has no value don't include it.",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":":imgdate, imgtime, latitude, longitude, depthmin, depthmax, taxolb, userlb, status"
          },
          "possible_values":{
            "title":"Possible Values",
            "type":"array",
            "items":{
              "type":"string"
            },
            "default":[
              "imgdate",
              "imgtime",
              "latitude",
              "longitude",
              "depthmin",
              "depthmax",
              "taxolb",
              "userlb",
              "status"
            ]
          }
        },
        "description":"Simple Import request. "
      },
      "SimpleImportRsp":{
        "title":"SimpleImportRsp",
        "required":[
          "job_id",
          "errors"
        ],
        "type":"object",
        "properties":{
          "job_id":{
            "title":"The job which was created for the run. 0 if called with dry_run option.",
            "type":"integer"
          },
          "errors":{
            "title":"Validation errors, dry_run or not.",
            "type":"array",
            "items":{
              "type":"string"
            }
          }
        },
        "description":"Simple Import, response. "
      },
      "SubsetReq":{
        "title":"SubsetReq",
        "required":[
          "dest_prj_id",
          "group_type",
          "limit_type",
          "limit_value",
          "do_images"
        ],
        "type":"object",
        "properties":{
          "filters":{
            "title":"Filters",
            "type":"object",
            "additionalProperties":{
              "type":"string"
            },
            "description":"The filters to apply to project",
            "default":{},
            "example":{
              "freenum":"n01",
              "freenumst":"0"
            }
          },
          "dest_prj_id":{
            "title":"Destination project id",
            "type":"integer",
            "description":"The destination project ID.",
            "example":22
          },
          "group_type":{
            "title":"Group type",
            "allOf":[
              {
                "$ref":"#/components/schemas/GroupDefinitions"
              }
            ],
            "description":"Define the groups in which to apply limits. C for categories, S for samples, A for acquisitions.",
            "example":"A"
          },
          "limit_type":{
            "title":"Limit type",
            "allOf":[
              {
                "$ref":"#/components/schemas/LimitMethods"
              }
            ],
            "description":"The type of limit_value: P for %, V for constant, both per group.",
            "example":"P"
          },
          "limit_value":{
            "title":"Limit value",
            "type":"number",
            "description":"Limit value, e.g. 20% or 5 per copepoda or 5% per sample.",
            "example":10.0
          },
          "do_images":{
            "title":"Do images",
            "type":"boolean",
            "description":"If set, also clone images.",
            "example":true
          }
        },
        "description":"Subset request. "
      },
      "SubsetRsp":{
        "title":"SubsetRsp",
        "required":[
          "job_id"
        ],
        "type":"object",
        "properties":{
          "job_id":{
            "title":"Job Id",
            "type":"integer",
            "description":"The job created for this operation.",
            "example":143
          }
        },
        "description":"Subset response. "
      },
      "TaxaSearchRsp":{
        "title":"TaxaSearchRsp",
        "required":[
          "id",
          "text",
          "pr"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"The taxon/category IDs.",
            "type":"integer"
          },
          "renm_id":{
            "title":"The advised replacement ID iif the taxon/category is deprecated.",
            "type":"integer"
          },
          "text":{
            "title":"The taxon name, display one.",
            "type":"string"
          },
          "pr":{
            "title":"1 if the taxon is in project list, 0 otherwise.",
            "type":"integer"
          }
        }
      },
      "TaxonModel":{
        "title":"TaxonModel",
        "required":[
          "id",
          "name",
          "type",
          "nb_objects",
          "nb_children_objects",
          "display_name",
          "lineage",
          "id_lineage",
          "children"
        ],
        "type":"object",
        "properties":{
          "id":{
            "title":"The taxon/category IDs.",
            "type":"integer"
          },
          "renm_id":{
            "title":"The advised replacement ID iif the taxon/category is deprecated.",
            "type":"integer"
          },
          "name":{
            "title":"The taxon/category verbatim name.",
            "type":"string"
          },
          "type":{
            "title":"The taxon/category type, 'M' or 'P'",
            "type":"string"
          },
          "nb_objects":{
            "title":"How many objects are classified in this category.",
            "type":"integer"
          },
          "nb_children_objects":{
            "title":"How many objects are classified in this category children (not itself).",
            "type":"integer"
          },
          "display_name":{
            "title":"The taxon/category display name.",
            "type":"string"
          },
          "lineage":{
            "title":"The taxon/category name of ancestors, including self, in first.",
            "type":"array",
            "items":{
              "type":"string"
            }
          },
          "id_lineage":{
            "title":"The taxon/category IDs of ancestors, including self, in first.",
            "type":"array",
            "items":{
              "type":"integer"
            }
          },
          "children":{
            "title":"The taxon/category IDs of children.",
            "type":"array",
            "items":{
              "type":"integer"
            }
          }
        }
      },
      "TaxonUsageModel":{
        "title":"TaxonUsageModel",
        "required":[
          "nb_validated"
        ],
        "type":"object",
        "properties":{
          "projid":{
            "title":"Project Id",
            "type":"integer",
            "description":"Project unique identifier",
            "example":1
          },
          "title":{
            "title":"Project title",
            "type":"string",
            "description":"Project's title",
            "example":"Zooscan Tara Med"
          },
          "nb_validated":{
            "title":"How many validated objects in this category in this project",
            "type":"integer"
          }
        }
      },
      "TaxonomyTreeStatus":{
        "title":"TaxonomyTreeStatus",
        "type":"object",
        "properties":{
          "last_refresh":{
            "title":"Taxonomy tree last refresh/sync from taxonomy server. Date, with format YYYY-MM-DDThh:mm:ss.",
            "type":"string"
          }
        }
      },
      "UserActivity":{
        "title":"UserActivity",
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer"
          },
          "nb_actions":{
            "title":"Nb Actions",
            "type":"integer"
          },
          "last_annot":{
            "title":"Last Annot",
            "type":"string"
          }
        }
      },
      "UserModel":{
        "title":"UserModel",
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"Unique user identifier",
            "example":1
          },
          "email":{
            "title":"Email",
            "type":"string",
            "description":"User's email used during registration",
            "example":"user@email.com"
          },
          "name":{
            "title":"Name",
            "type":"string",
            "description":"User's full name",
            "example":"userName"
          },
          "organisation":{
            "title":"Organisation",
            "type":"string",
            "description":"User's organisation",
            "example":"Oceanographic Laboratory of Villefranche sur Mer - LOV"
          },
          "active":{
            "title":"Account status",
            "type":"boolean",
            "description":"User's Account status",
            "example":true
          },
          "country":{
            "title":"Country",
            "type":"string",
            "description":"User's country",
            "example":"France"
          },
          "usercreationdate":{
            "title":"User creation date",
            "type":"string",
            "description":"User account creation date",
            "format":"date-time",
            "example":"2020-11-05T12:31:48.299713"
          },
          "usercreationreason":{
            "title":"User creation reason",
            "type":"string",
            "description":"The reason of creation of this user account",
            "example":"Analysis of size and shapes of plastic particles"
          }
        }
      },
      "UserModelWithRights":{
        "title":"UserModelWithRights",
        "type":"object",
        "properties":{
          "id":{
            "title":"Id",
            "type":"integer",
            "description":"Unique user identifier",
            "example":1
          },
          "email":{
            "title":"Email",
            "type":"string",
            "description":"User's email used during registration",
            "example":"user@email.com"
          },
          "name":{
            "title":"Name",
            "type":"string",
            "description":"User's full name",
            "example":"userName"
          },
          "organisation":{
            "title":"Organisation",
            "type":"string",
            "description":"User's organisation",
            "example":"Oceanographic Laboratory of Villefranche sur Mer - LOV"
          },
          "active":{
            "title":"Account status",
            "type":"boolean",
            "description":"User's Account status",
            "example":true
          },
          "country":{
            "title":"Country",
            "type":"string",
            "description":"User's country",
            "example":"France"
          },
          "usercreationdate":{
            "title":"User creation date",
            "type":"string",
            "description":"User account creation date",
            "format":"date-time",
            "example":"2020-11-05T12:31:48.299713"
          },
          "usercreationreason":{
            "title":"User creation reason",
            "type":"string",
            "description":"The reason of creation of this user account",
            "example":"Analysis of size and shapes of plastic particles"
          },
          "can_do":{
            "title":"User's permissions",
            "type":"array",
            "items":{
              "type":"integer"
            },
            "description":"List of User's allowed actions : 1 create a project, 2 administrate the app, 3 administrate users, 4 create taxon",
            "default":[],
            "example":[
              1,
              4
            ]
          },
          "last_used_projects":{
            "title":"Last used projects",
            "type":"array",
            "items":{
              "$ref":"#/components/schemas/ProjectSummaryModel"
            },
            "description":"List of User's last used projects",
            "default":[],
            "example":[
              {
                "projid":3,
                "title":"Zooscan point B"
              },
              {
                "projid":1,
                "title":"Zooscan Tara Med"
              }
            ]
          }
        }
      },
      "ValidationError":{
        "title":"ValidationError",
        "required":[
          "loc",
          "msg",
          "type"
        ],
        "type":"object",
        "properties":{
          "loc":{
            "title":"Location",
            "type":"array",
            "items":{
              "type":"string"
            }
          },
          "msg":{
            "title":"Message",
            "type":"string"
          },
          "type":{
            "title":"Error Type",
            "type":"string"
          }
        }
      }
    },
    "securitySchemes":{
      "BearerOrCookieAuth":{
        "type":"oauth2",
        "flows":{
          "password":{
            "scopes":{},
            "tokenUrl":"/token"
          }
        }
      }
    }
  }
}